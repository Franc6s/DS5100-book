[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DS 5100: Programming for Data Science",
    "section": "",
    "text": "Welcome\nWelcome to the companion text for DS 5100 Programming for Data Science.\nThis text is designed to provide all the content necessary to take DS 5100 at UVA’s School of Data Science. The course provides an introduction to programming from a data science perspective. It focuses on the development of basic skills in Python and R Programming, as well the command line and GitHub. It is currently one of two foundational courses taught, along with a course in linear models.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "modules/m00/m00-intro.html",
    "href": "modules/m00/m00-intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Objective and Scope\nThe main objective of the course is to introduce fundamental programming concepts and techniques so that students may successfully complete courses in machine learning and computational statistics, as well as to become successful data scientists in the workplace.\nTopics covered range from using the command line, git, and GitHub, to visualization and project management.",
    "crumbs": [
      "Welcome",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "modules/m00/m00-intro.html#philosophy",
    "href": "modules/m00/m00-intro.html#philosophy",
    "title": "Introduction",
    "section": "Philosophy",
    "text": "Philosophy\nMore generally, the course is designed to instill a basic competency on which to build out one’s knowledge and skills within the program.",
    "crumbs": [
      "Welcome",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "modules/m00/m00-intro.html#how-to-use-this-book",
    "href": "modules/m00/m00-intro.html#how-to-use-this-book",
    "title": "Introduction",
    "section": "How to use this book",
    "text": "How to use this book",
    "crumbs": [
      "Welcome",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "modules/m01/m01-intro.html",
    "href": "modules/m01/m01-intro.html",
    "title": "M01 Getting Started",
    "section": "",
    "text": "Topics",
    "crumbs": [
      "M01 Getting Started"
    ]
  },
  {
    "objectID": "modules/m01/m01-intro.html#topics",
    "href": "modules/m01/m01-intro.html#topics",
    "title": "M01 Getting Started",
    "section": "",
    "text": "Introduce the course\nAccess Rivanna\nExplore the Unix command line\nExplore use of Git and GitHub",
    "crumbs": [
      "M01 Getting Started"
    ]
  },
  {
    "objectID": "topics/rivanna.html",
    "href": "topics/rivanna.html",
    "title": "About Rivanna",
    "section": "",
    "text": "Introduction\nA useful infrastructural resource for this course is Rivanna, UVA’s high-performance computing (HPC) cluster. Each student has an account on Rivanna and access to resources there based on participation in this course. We will use Rivanna in our class for both Python and R.\nThis page describes some of the tools available for your use in this course.\nResources for getting help, including a knowledge base and ticket system, are found at the Support Option’s Page on UVA’s Research Computing website.\nYou may need to use VPN to access Rivanna from an off-grounds location. To install VPN on your computer, go to the ITS VPN page for instructions. Note that you should connect to “UVA Anywhere,” not to any of the higher security options. Course Allocation\nThis course has been allocated compute and space resources on Rivanna. The names of the resources are given below. The allocation ID needs to be entered to access certain tools. The storage path is accessible to you on the remote server.",
    "crumbs": [
      "M01 Getting Started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>About Rivanna</span>"
    ]
  },
  {
    "objectID": "topics/rivanna.html#introduction",
    "href": "topics/rivanna.html#introduction",
    "title": "About Rivanna",
    "section": "",
    "text": "Allocation ID: msds_ds5100\nStorage path: /project/MSDS_DS5100  (Don’t use unless directed to.)",
    "crumbs": [
      "M01 Getting Started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>About Rivanna</span>"
    ]
  },
  {
    "objectID": "topics/rivanna.html#tools",
    "href": "topics/rivanna.html#tools",
    "title": "About Rivanna",
    "section": "Tools ",
    "text": "Tools \nUVA Research Computing provides you with a suite of tools to access Rivanna. These tools are accessible through the menu on the UVA OpenOnDemand Dashboard page. Below are some brief descriptions of the tools.\nFile Explorer. A web-based GUI to access the file system of the remote server. Can be used to create, move, and delete directories and files, and to edit the contents of files (see Editor). You can also upload and download files through this interface. The File Explorer is useful to view your remote content and manage files and directories without having to use the command line. Note that not all operations can be performed through this interface.\nFind under “Files” in the menu. \nEditor. A web-based text editor launched from the File Explorer to view and edit text files on the remote server.  Although not as sophisticated as VS Code (below), this is very useful for editing data and code files without having to use a command line editor. One advantage over VS Code is that it does not need to be launched – which means it does not time out like the Interactive Apps listed below.\nThe Editor is launched from the File Explorer.\nSSH Shell Access (Terminal). Access to the command line of the remote server.  Use this to open a terminal window to perform Linux commands directly.  Note that It is necessary to use a terminal to install and run certain programs on the remote server.\nFind under “Clusters” in the menu. \nYou can also access the remote command line via SSH on your local computer. Just enter the following on the command line of either a PC or Mac:\nssh -Y &lt;userid&gt;@rivanna.hpc.virginia.edu\nReplace &lt;userid&gt; with your UVA Net ID, e.g. abc2x. \nBe suer to be running VPN if you are accessing Rivanna from an off-grounds location.",
    "crumbs": [
      "M01 Getting Started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>About Rivanna</span>"
    ]
  },
  {
    "objectID": "topics/rivanna.html#interactive-apps",
    "href": "topics/rivanna.html#interactive-apps",
    "title": "About Rivanna",
    "section": "Interactive Apps",
    "text": "Interactive Apps\nThese tools must be launched by specifying a set of parameters, including the allocation you are using. They are also timed and will close when time is up. Be sure to give yourself enough time when launching these, and to be aware of how much time you have when working.\nNote also that you should allocate the fewest resources necessary to do the work you plan to do. This saves resources on the remote host, but also allows your app to launch more quickly. If you ask for an excessive amount of resources, you may wait a long time (e.g. hours) to have your app launched.\nDesktop. Access to a GUI desktop to the remote server. This provides a access to various applications on the server, including a web browser, a file explorer, and terminal windows.  Using this is not necessary if you can get by with the tools listed above.\nFind under “Interactive Apps &gt; Desktop” in the menu.\nVS Code. Access to Visual Studio Code on the remote server. This is a fully functional instance of the IDE.\nFind under “Interactive Apps &gt; Code Server” in the menu.\nJupyter. Access to Jupyter Lab on the remote server. Find under “Interactive Apps &gt; Jupyter Lab” in the menu.\nRStudio. Access to Jupyter Lab on the remote server.\nFind under “Interactive Apps &gt; RStudio Server” in the menu.",
    "crumbs": [
      "M01 Getting Started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>About Rivanna</span>"
    ]
  },
  {
    "objectID": "topics/rivanna.html#for-more-information",
    "href": "topics/rivanna.html#for-more-information",
    "title": "About Rivanna",
    "section": "For More Information",
    "text": "For More Information\nUVA’s Research Computing Learning Portal provides resources for learning how to use Rivanna. Here are two slide decks that you may find useful:\n\nIntroduction to Rivanna\nUsing Rivanna from the Command Line",
    "crumbs": [
      "M01 Getting Started",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>About Rivanna</span>"
    ]
  },
  {
    "objectID": "topics/unix.html",
    "href": "topics/unix.html",
    "title": "Using Unix",
    "section": "",
    "text": "Introduction\nThe Unix family of operating systems provide users with a command line interface (CLI) to execute commands and get things done. They also, typically provide GUIs but we won’t go into those here.\nThe Unix family includes all varieties of Linux and the Mac OS (which is based on FreeBSD).\nThe command line that you actually interact with – the set of commands available to you – is called a shell, and there are several shells that you can run on your system. The most typical shell in use today is called bash which stands for Bourne Again Shell, since it is an improved version of bsh (The Bourne Shell). New versions of MacOS use the Z shell (zsh). The commands in these two shells are mostly similar, but there are subtle differences.\nWindows has shells too for its command line interface. The default shell is DOS, but is also has PowerShell  as an advanced (and very capable) option.\nFor more information, check out these resources:",
    "crumbs": [
      "M01 Getting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Using Unix</span>"
    ]
  },
  {
    "objectID": "topics/unix.html#introduction",
    "href": "topics/unix.html#introduction",
    "title": "Using Unix",
    "section": "",
    "text": "UVA Research Computing’s Unix tutorial.\nNewham, 2005, Learning the bash Shell, O’Reilly Media.\nJeroen Janssens, 2021, Data Science From the Command Line, O’Reilly Media.\nNeal Stephenson, 1999, In the Beginning Was The Command Line. (PDF version.)",
    "crumbs": [
      "M01 Getting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Using Unix</span>"
    ]
  },
  {
    "objectID": "topics/unix.html#basic-commands",
    "href": "topics/unix.html#basic-commands",
    "title": "Using Unix",
    "section": "Basic Commands",
    "text": "Basic Commands\nIn this course, you don’t need to know very many Unix shell commands, but you should be comfortable working from the command line to perform basic tasks. This is because some things can only be performed from the command line, such as installing some essential software. Here is a list of basic commands.\nNavigating filesystems and managing directories:\n\ncd – change directory\npwd – show the current directory\nln – make links and symlinks to files and directories\nmkdir – make new directory\nrmdir – remove directories in Unix\n\nNavigating filesystem and managing files and access permissions:\n\nls – list files and directories\ncp – copy files\nrm – remove files and directories\nmv – rename or move files and directories to another location\nchmod – change file/directory access permissions\nchown – change file/directory ownership",
    "crumbs": [
      "M01 Getting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Using Unix</span>"
    ]
  },
  {
    "objectID": "topics/unix.html#text-file-commands",
    "href": "topics/unix.html#text-file-commands",
    "title": "Using Unix",
    "section": "Text file commands",
    "text": "Text file commands\nMost of important configuration in Unix is in plain text files, these commands will let you quickly inspect files or view logs:\n\ncat – concatenate files and show contents to the standard output\nmore – basic pagination when viewing text files or parsing Unix commands output\nless – an improved pagination tool for viewing text files (better than more command)\nhead – show the first 10 lines of text file (you can specify any number of lines)\ntail – show the last 10 lines of text file (any number can be specified)\ngrep – search for patterns in text files",
    "crumbs": [
      "M01 Getting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Using Unix</span>"
    ]
  },
  {
    "objectID": "topics/unix.html#miscellaneous",
    "href": "topics/unix.html#miscellaneous",
    "title": "Using Unix",
    "section": "Miscellaneous",
    "text": "Miscellaneous\n\nclear – clear screen\nhistory – show history of previous commands",
    "crumbs": [
      "M01 Getting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Using Unix</span>"
    ]
  },
  {
    "objectID": "topics/unix.html#command-line-cool",
    "href": "topics/unix.html#command-line-cool",
    "title": "Using Unix",
    "section": "Command Line Cool",
    "text": "Command Line Cool\nAlthough we will not be using the command line to this degree, you should know that it is a powerful environment for doing data science work. The book Data Science from the Command Line makes the case for using the command line to perform many tasks that we often perform with more resource intensive (i.e. bloated) tools such as Python and R.  At some point in your early DS career, you may want to look at this. The book itself is also a great introduction to data science!\n\nOne last thing – for fun you may want to read Neal Stephenson’s “In the Beginning Was The Command Line”, a kind of cyberpunk history of the topic. Stephenson, by the way, is the author who coined the term “metaverse” in the novel Snowcrash.",
    "crumbs": [
      "M01 Getting Started",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Using Unix</span>"
    ]
  },
  {
    "objectID": "topics/setting-up-ssh.html",
    "href": "topics/setting-up-ssh.html",
    "title": "SSH for GitHub",
    "section": "",
    "text": "Overview",
    "crumbs": [
      "M01 Getting Started",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>SSH for GitHub</span>"
    ]
  },
  {
    "objectID": "topics/setting-up-ssh.html#overview",
    "href": "topics/setting-up-ssh.html#overview",
    "title": "SSH for GitHub",
    "section": "",
    "text": "This method will allow you to interact with your repos hosted on GitHub without having to enter your login credentials each time.\nYou will create an SSH key on your local machine. By “local machine,” we mean the machine where you will be working and pulling to, e.g your laptop or Rivanna. In other words, it’s local relative to GitHub.\nSSH keys have a public and private component. These are hash strings that are stored in files. Both will be generated on your machine.\nYou will copy and paste the generate public key to your GitHub account.\nGoing forward, you will clone from your account using the SSH protocol.",
    "crumbs": [
      "M01 Getting Started",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>SSH for GitHub</span>"
    ]
  },
  {
    "objectID": "topics/setting-up-ssh.html#steps",
    "href": "topics/setting-up-ssh.html#steps",
    "title": "SSH for GitHub",
    "section": "Steps",
    "text": "Steps\n\nPart A\nOn your local machine\n\nGet to the command line on the computer from which you will be pushing and pulling to your GitHub repo.\n\n\nIf you are using Rivanna, you can access this through the Dashboard or connect via SSH.\nIf you are using a Mac, open Terminal.\nIf you are using Windows and you have admin rights, first install git-bash. Otherwise follow this tutorial from Microsoft.\n\n\nMove into your root directory. If on a Unix-based system (Rivanna or a Mac), you can do this by entering cd by itself.\nGenerate the key:\n\n\nEnter: ssh-keygen -t ed25519 -C \"your_email_id@example.com\", using your email address.\nThe value ed25519 is the key type and must not be changed.\nBe sure to use the email address associated with your GitHub account in the above command.\n\n\nAt the prompt, type in a secure passphrase.\n\n\nYou don’t have to do this, but it is advised.\nCreate a memorable sentence.\nA good passphrase should have at least 15, preferably 20 characters and be difficult to guess. It should contain upper case letters, lower case letters, digits, and preferably at least one punctuation character.\n\n\nAdd the key to ssh-agent:\n\n\nEnter: eval \"$(ssh-agent -s)\"\nEnter: ssh-add ~/.ssh/id_ed25519\n\n\n\n\n\n\n\nTip\n\n\n\nIf you are on a Mac and the ssh-add command gives an error saying that the file is not found or that you do not have permission, try running the following command then re-running ssh-add:\nls -al\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you’re using macOS Sierra 10.12.2 or later, you will need to modify your ~/.ssh/config file to automatically load keys into the ssh-agent and store passphrases in your keychain. Follow the instructions here (at step 2).\n\n\n\n\nPart B\nOn your GitHub account\n\nGet the public key that was just generated.\n\n\nEnter: more ~/.ssh/id_ed25519.pub\nCopy the result to your clipboard (e.g. by blocking off the line and entering Ctrl-C).\nThe key should begin ssh-ed25519 and end with the email address you used in generating the key. In between it will have a long string of alphanumeric characters.\n\n\nOn GitHub, go to your account settings and select “SSH and GPG Keys” from the side menu.\n\n\nA link to your account settings can be found in the drop-down list produced by clicking on your user icon in the upper right of the website.\n\n\nUnder “SSH keys,” press the “New SSH Key” button.\n\n\nAdd a brief title describing the context of the key, i.e. the local machine where it was generated, e.g. Rivanna.\nChoose “Authentication Key” as the Key type.\nPaste the key into the Key text area.\nSubmit the form by pressing “Add SSH key.”\n\nYou are now good to go. Whenever you clone a site from your GitHub account, choose the SSH link.",
    "crumbs": [
      "M01 Getting Started",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>SSH for GitHub</span>"
    ]
  },
  {
    "objectID": "topics/setting-up-ssh.html#information-sources",
    "href": "topics/setting-up-ssh.html#information-sources",
    "title": "SSH for GitHub",
    "section": "Information Sources",
    "text": "Information Sources\nThe GitHub site has lots of excellent documentation.\nHere are some pages you may find useful:\n\nAbout SSH\nGenerate the key\nAbout pass phrases\nAdding the key to GitHub\nUpdating repos with SSH",
    "crumbs": [
      "M01 Getting Started",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>SSH for GitHub</span>"
    ]
  },
  {
    "objectID": "topics/git-and-github.html",
    "href": "topics/git-and-github.html",
    "title": "Git and GitHub",
    "section": "",
    "text": "Introduction\nGit and GitHub are two tools that work together, but it is important to understand what each does and how they are different to each other.\nHere are some basic things to know:",
    "crumbs": [
      "M01 Getting Started",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "topics/git-and-github.html#introduction",
    "href": "topics/git-and-github.html#introduction",
    "title": "Git and GitHub",
    "section": "",
    "text": "Git is a stand-alone version control system that runs on a variety of platforms, including Linux, MacOS, and Windows.\nGitHub is a company that offers a cloud-based Git repository hosting service that makes it easy to use Git for version control, collaboration, and sharing code. This service is offered through a website.\nThere are other Git hosting services out there, including GitLab, and open source tool that can be installed on a local server.\nGitHub (and services like it) builds on top of Git, adding some functionality to it, while Git can interact with GitHub through actions like cloning, pushing, and pulling. However,\nFor example, git does not require GitHub to function. For example, git does not have a fork command. GitHub (and other hosting services such as GitLab) have added this command as a convenient way to copy repositories.",
    "crumbs": [
      "M01 Getting Started",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "topics/git-and-github.html#using-git-and-github-together",
    "href": "topics/git-and-github.html#using-git-and-github-together",
    "title": "Git and GitHub",
    "section": "Using Git and GitHub Together",
    "text": "Using Git and GitHub Together\nIn practice, we tend to use Git and GitHub together.\nWe use Git to perform version control on our code, and we use GitHub to share code and to collaborate on coding projects.\nWhen we use Git and GitHub together, we typically follow patterns.\nFor example, a basic series of actions one continually makes with Git are the following:\n\n\n\nAction\nDescription\nCommand\n\n\n\n\nFork\nForking a repo makes a copy of someone else’s repo in your GitHub account, which you can now modify. Note: Forking does not have to be performed if you are not interested in altering the code. You can clone it directly.\nThis is done through GitHub’s web interface by clicking on the Fork button.\n\n\nClone\nCloning the repo to a workspace to which you have access, whether a local machine or a remote resource (e.g. Rivanna).\ngit clone &lt;repo&gt;\n\n\nAdd\nCreating or editing a file locally and then adding it to the list of files git will keep track of.\ngit add &lt;filename&gt;Note that you may use wildcards here, e.g. *, to add more than one file at a time.\n\n\nCommit\nCommitting the changes made to the file by adding them to the repo’s database of changes. This is accompanied by a brief, descriptive message of the changes made.\ngit commit -m \"What you did\"\n\n\nPush\nPushing the changes to the remote repo that you cloned from. This uploads both the files and the database changes to the repo.\ngit push\n\n\nPull\nPulling, i.e. downloading, any changes that have been made to the remote repo to your local repo. This usually happens if you are working in teams on the same project.\ngit pull\n\n\nPull Request\nThis is a request made to the owner of the original repo to pull in the changes you’ve made to your forked copy.\nThis is done through GitHub’s web interface. Read the docs. \n\n\nFetch Upstream\nThis refreshes the content of your forked repo with the content from the original repo.\nThis is done through GitHub’s web interface. Read the docs. \n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis is not the only pattern to use with Git. Here is another — the Git Fork-Branch-Pull Workflow\n\n\nHere is a visualization of the process:\n\n\n\nDiagram of common git workflow\n\n\nIn this diagram, the dashed lines refer to actions performed only once for a give repo.\nForking and cloning are done to acquire a repo.\nFetch upstream (aka sync fork) and pull requests on the GitHub server.\nPull and push on your local machine are done repeatedly as you develop and share code.\nNote that the here the expression “remote workstation” may be confusing; it means remote relative to your laptop, e.g. Rivanna, which we sometimes call local relative to the GitHub repo.\nIn any case, note that these two copies of the same repo do not communicate with each other directly, but rather through their common relationship with the GitHub hosted instance of the repo.",
    "crumbs": [
      "M01 Getting Started",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "topics/git-and-github.html#to-learn-more",
    "href": "topics/git-and-github.html#to-learn-more",
    "title": "Git and GitHub",
    "section": "To Learn More",
    "text": "To Learn More\nThe Git website has excellent learning materials. Use the following links to access vides and\n\nVideos\nBook\n\n\n\n\nXKCD #1597\n\n\nSource",
    "crumbs": [
      "M01 Getting Started",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Git and GitHub</span>"
    ]
  },
  {
    "objectID": "modules/m02/m02-intro.html",
    "href": "modules/m02/m02-intro.html",
    "title": "M02 Introducing Python",
    "section": "",
    "text": "Topics",
    "crumbs": [
      "M02 Introducing Python"
    ]
  },
  {
    "objectID": "modules/m02/m02-intro.html#topics",
    "href": "modules/m02/m02-intro.html#topics",
    "title": "M02 Introducing Python",
    "section": "",
    "text": "Running Python code\nPython’s basic data types\nPython’s primary operators associated with each data type\nPython’s built-in data structures",
    "crumbs": [
      "M02 Introducing Python"
    ]
  },
  {
    "objectID": "modules/m02/m02-intro.html#readings",
    "href": "modules/m02/m02-intro.html#readings",
    "title": "M02 Introducing Python",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\nKatz and Katz 2019, Section 1, Preparing the Workspace\nLutz, Learning Python, Part I: Getting Started, Chapter 2\nLutz, Learning Python, Part I: Getting Started, Chapter 3\nLutz, Learning Python, Part II: Types and Operations, Chapters 4–9\n\n\n\nOptional\n\nKatz and Katz 2019, Section 1, First Steps in Coding - Variables and Data Types\nBuilt-in Types (Official)\nPython Data Types (GFG)\nPython Operators (W3S)\nImmutable vs Mutable Data Types in Python (Medium)",
    "crumbs": [
      "M02 Introducing Python"
    ]
  },
  {
    "objectID": "topics/on-data.html",
    "href": "topics/on-data.html",
    "title": "Data and Code",
    "section": "",
    "text": "Code should be simple\nAn important principle for writing effective and intelligible code is that code should be simple — to quote Einstein, as simple as possible but no simpler.",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data and Code</span>"
    ]
  },
  {
    "objectID": "topics/on-data.html#code-should-be-simple",
    "href": "topics/on-data.html#code-should-be-simple",
    "title": "Data and Code",
    "section": "",
    "text": "A contributing factor to code simplicity is how it is related to the data it is designed to process.\nThis relationship depends largely on how the data are structured.\nA program is always written with data in mind — what kind of data it is and how it is structured.",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data and Code</span>"
    ]
  },
  {
    "objectID": "topics/on-data.html#simplicity-of-code-follows-from-the-structure-of-data",
    "href": "topics/on-data.html#simplicity-of-code-follows-from-the-structure-of-data",
    "title": "Data and Code",
    "section": "Simplicity of code follows from the structure of data",
    "text": "Simplicity of code follows from the structure of data\nThere is a view among programmers which, although not orthodoxy, is commonplace.\n\nIt is the idea that the complexity of a program — its algorithms — is a function of the quality of the data structure it processes.\nIf a data structure is not well designed, algorithms may be excessively complex and hard to understand.\nHowever if a data structure is well designed, the algorithms that process them are more robust and intelligible.",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data and Code</span>"
    ]
  },
  {
    "objectID": "topics/on-data.html#supporting-references",
    "href": "topics/on-data.html#supporting-references",
    "title": "Data and Code",
    "section": "Supporting References",
    "text": "Supporting References\nConsider these quotes cited in an essay on Data Structures. by Igor Budasov, reproduced here:\nHere’s a quote from Linus Torvalds in 2006:\n\nI’m a huge proponent of designing your code around the data, rather than the other way around, and I think it’s one of the reasons git has been fairly successful . . . I will, in fact, claim that the difference between a bad programmer and a good one is whether he considers his [sic] code or his data structures more important. Bad programmers worry about the code. Good programmers worry about data structures and their relationships.\n\nWhich sounds a lot like Eric Raymond’s “Rule of Representation” from 2003:\n\nFold knowledge into data, so program logic can be stupid and robust.\n\nWhich was just his summary of ideas like this one from Rob Pike in 1989:\n\nData dominates. If you’ve chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.\n\nWhich cites Fred Brooks from 1975:\n\nRepresentation is the Essence of Programming\n\nBeyond craftsmanship lies invention, and it is here that lean, spare, fast programs are born. Almost always these are the result of strategic breakthrough rather than tactical cleverness. Sometimes the strategic breakthrough will be a new algorithm, such as the Cooley-Tukey Fast Fourier Transform or the substitution of an n log n sort for an n 2 set of comparisons.\n\n\nMuch more often, strategic breakthrough will come from redoing the representation of the data or tables. This is where the heart of your program lies. Show me your flowcharts and conceal your tables, and I shall be continued to be mystified. Show me your tables, and I won’t usually need your flowcharts; they’ll be obvious.",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data and Code</span>"
    ]
  },
  {
    "objectID": "topics/python-object-types.html",
    "href": "topics/python-object-types.html",
    "title": "Python Object Types",
    "section": "",
    "text": "Python is organized into a hierarchy of object types. Sometimes, these are just call types.\nObjects are the basic unit out of which the language is constructed.\nWe’ll learn about objects later – what they are and how to create your own – but for now just understand that they have two main things associated with them:\n\nFirst, they can contain data.\nSecond, they can have behaviors, frequently in relation to the data they contain.\n\nData types and data structures are kinds of objects.",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Python Object Types</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "",
    "text": "Python Data Types\nEverything in Python is an object.\nWhen we say ‘type,’ we mean object type.\nData types and data structures are both types of object.\nData types and structures are created by the way they are written.\nWhen we write the raw values of a data type, we call these literals, meaning their literal value.",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#integers",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#integers",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Integers",
    "text": "Integers\nAn integer is a sequence of one or more unquoted roman numerals.\n\n100\n\n100\n\n\n\n643523453323\n\n643523453323\n\n\n\n-0\n\n0",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#floats-decimals",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#floats-decimals",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Floats (decimals)",
    "text": "Floats (decimals)\nA float is a sequence of unquoted numerals with one and only one period.\n\n3.14 \n\n3.14\n\n\nNote that a period as a suffix or prefix will convert an integer to a float.\n\n1, 1., .1\n\n(1, 1.0, 0.1)\n\n\nNote also that we are separating these numbers with commas.",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#strings",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#strings",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Strings",
    "text": "Strings\nStrings are sequences of quoted characters of any kind, i.e. numbers, letters, punctuation, etc.\nQuotes may be be single ' or double\".\nThe type of quote does not matter, but they must be straight quotes, not so-called “smart quotes” that some word processors use.\n\n\"foo\" \n\n'foo'\n\n\n\n\"1\"\n\n'1'\n\n\n\n'foo'\n\n'foo'\n\n\nNote how Python’s internal representation of a string uses single quotes.\nNote also that there is no explicit character type as in Java and other languages.\nSome languages, such as Java and C, reserve a data type for single characters and create strings by putting these types into an array or some other data structure.",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#booleans",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#booleans",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Booleans",
    "text": "Booleans\nBoolean values are represented by the following unquoted reserved words:\n\nTrue, False\n\n(True, False)\n\n\nNote that these are case-sensitive. The following will not work:\n\nTRUE\n\nNameError: name 'TRUE' is not defined\n\n\n\nfalse\n\nNameError: name 'false' is not defined",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#nothing",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#nothing",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Nothing",
    "text": "Nothing\nPython has a reserved data type for situations where there is no value to represent.\nIt evaluates to nothing!\n\nNone\n\n\nprint(None)\n\nNone",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#complex-numbers",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#complex-numbers",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Complex numbers",
    "text": "Complex numbers\nComplex numbers are created by combining imaginary numbers with other numbers.\nImaginary numbers are floats or integers with a j suffix.\n\n5 + 0j\n\n(5+0j)\n\n\n\n5.0 / 100 + .1j\n\n(0.05+0.1j)\n\n\n\n5.0 ** .1j\n\n(0.9870764805873051+0.16024987198553192j)",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#int",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#int",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "int()",
    "text": "int()\nThis converts a number or string into an integer where it makes sense to do so.\nFloat to Int\n\nval = 3.8\nval, type(val)\n\n(3.8, float)\n\n\n\nval_int = int(val)\nval_int, type(val_int)\n\n(3, int)",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#float",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#float",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "float()",
    "text": "float()\nThis converts a string or integer into a float.\nString to Float\n\nval_str = '3.8'\nval_str, type(val)\n\n('3.8', str)\n\n\n\nval_int = float(val_str)\nval_int, type(val_int)\n\n(3.8, float)\n\n\nNote that converting string decimal to integer will fail.\n\nval_int = int(val_str)\nval_int, type(val_int)\n\nValueError: invalid literal for int() with base 10: '3.8'",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#ord",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#ord",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "ord()",
    "text": "ord()\nThis converts a character to it’s code point.\nA code point is the internal number associated with each character in the character set used by Python.\nThe character set is called Unicode.\n\nord('a'), ord('A')\n\n(97, 65)",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#floor-division",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#floor-division",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "floor division //",
    "text": "floor division //\nReturns the result of a divions without the remainder.\n\n5 // 2\n\n2\n\n\n\n-5 // 2\n\n-3\n\n\n\n5.5 // 2\n\n2.0\n\n\nNote the data types of the returned values.",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#modulus",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#modulus",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "modulus %",
    "text": "modulus %\nReturns the remainder\n\n5 % 2\n\n1\n\n\nodd integers % 2 = 1\neven integers % 2 = 0\nLook at this …\n\n5.5 / 2, 5.5 // 2, 5.5 % 2\n\n(2.75, 2.0, 1.5)",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#exponentiation",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#exponentiation",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "exponentiation **",
    "text": "exponentiation **\nRaises one number to the power of another.\n\n5**3\n\n125",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#concatenation",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#concatenation",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "concatenation +",
    "text": "concatenation +\nWhen used with strings, the plus operator joins strings into larger strings.\nThe plus sign is an overloaded operator in Python.\n\nmy_string = 'This: '\n\n\nmy_2nd_string = my_string + ' Hello, world!'\n\n\nmy_2nd_string\n\n'This:  Hello, world!'",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#repetition",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#repetition",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "repetition *",
    "text": "repetition *\nThis joins a string to itself as many times as specified.\n\nprint('-' * 80)\n\n--------------------------------------------------------------------------------\n\n\n\nbart_S1E3 = 'I will not skateboard in the halls'\n\n\nprint((bart_S1E3 + '\\n') * 5)\n\nI will not skateboard in the halls\nI will not skateboard in the halls\nI will not skateboard in the halls\nI will not skateboard in the halls\nI will not skateboard in the halls\n\n\n\n\n\n\nimage.png\n\n\nSee them all :-)",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#equality",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#equality",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "equality ==",
    "text": "equality ==\n\n0 == (10 % 5)\n\nTrue\n\n\n\n'Boo' == 'Hoo'\n\nFalse",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#greater-than-and-less-than",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#greater-than-and-less-than",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "greater than and less than",
    "text": "greater than and less than\n&gt;, &lt;, &gt;=, and &lt;=\n\n10 &lt; 5, 5. &lt; 100 - 90\n\n(False, True)\n\n\nNote that we can compare strings, too:\n\n'A' + 'B' == 'AB'\n\nTrue\n\n\n\n'A' &lt; 'B'\n\nTrue\n\n\nWe can compare relative magnitude because we are comparing their code points:\n\nord('A'), ord('B')\n\n(65, 66)\n\n\nWatch out when comparing floats, though!\nThis works:\n\n.5 == 1/2\n\nTrue\n\n\nBut this does not:\n\nx = 0.1 + 0.2\ny = 0.3\n\n\nx == y\n\nFalse\n\n\nThis is because the two values are represented differently internally:\n\nx, y\n\n(0.30000000000000004, 0.3)\n\n\nYou can overcome this by rounding both values, like so:\n\nround(x, 2) == round(y, 2)\n\nTrue\n\n\nBut note this fails:\n\nround(x, 20) == round(y, 20), round(x, 20), round(y, 20)\n\n(False, 0.30000000000000004, 0.3)\n\n\nThis is because of how Python (and computers in general) handle floating point numbers.\nThe best soluation is to do this:\n\nimport math\n\nmath.isclose(x, y)\n\nTrue",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#inequality",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#inequality",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "inequality !=",
    "text": "inequality !=\n\n5/9 != 0.5555\n\nTrue",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#conjunctions-and-or-not",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#conjunctions-and-or-not",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Conjunctions and, or, not",
    "text": "Conjunctions and, or, not\nNote the we group comparisons with parentheses.\n\nx = 10\n\n(x % 10 == 0) or (x &lt; -1)\n\nTrue\n\n\n\n(x % 10 == 0) and (x &lt; -1)\n\nFalse\n\n\n\nnot x == 5\n\nTrue",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#identity-is",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#identity-is",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Identity is",
    "text": "Identity is\nThe is keyword tests if two variables refer to the same object.\nDepending on object types involved, variable can sometimes point to the same object when we assign one variable to another.\nThe test returns True if the two objects are the same object and False if they are not.\nUse the == operator to test if two variables store equal values.\nis\n\nx = 'foo'\ny = 'foo'\nz = 'bar'\n\n\nx is y, x is z\n\n(True, False)",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-01-DataTypes.html#negation-not",
    "href": "notebooks/M02_BasicPython/M02-01-DataTypes.html#negation-not",
    "title": "NB: Data Types, Operators, and Expressions",
    "section": "Negation not",
    "text": "Negation not\nnot flips the value of a boolean.\n\nnot True, not False, not 0, not 1, not 1000, not None\n\n(False, True, True, False, False, True)\n\n\nis not tests if two variables do not point to the same object.\n\nx is not y, x is not z\n\n(False, True)",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>NB: Data Types, Operators, and Expressions</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html",
    "title": "NB: Numbers",
    "section": "",
    "text": "Built-in Functions\nPython has many built-in mathematical functions for numbers.",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>NB: Numbers</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#pow-power",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#pow-power",
    "title": "NB: Numbers",
    "section": "pow() Power",
    "text": "pow() Power\n\\(2\\) raised to \\(3 = 8\\)\n\npow(2,3)\n\n8",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>NB: Numbers</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#abs-absolute-value",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#abs-absolute-value",
    "title": "NB: Numbers",
    "section": "abs() Absolute value",
    "text": "abs() Absolute value\nReturns \\(2\\), the absolute value of its argument.\n\nabs(-2)\n\n2",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>NB: Numbers</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#round-round",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#round-round",
    "title": "NB: Numbers",
    "section": "round() Round",
    "text": "round() Round\nRounding up or down its argument (to closest whole number).\nRounds up to \\(3.0\\).\n\nround(2.8)\n\n3\n\n\nRounds down to \\(1.0\\).\n\nround(1.1)\n\n1\n\n\nYou can specify how many decimal places to round to as well.\n\nround(5.36958211, 2)\n\n5.37",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>NB: Numbers</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#math.sqrt-square-root",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#math.sqrt-square-root",
    "title": "NB: Numbers",
    "section": "math.sqrt() Square root",
    "text": "math.sqrt() Square root\n\nmath.sqrt(12)\n\n3.4641016151377544\n\n\n\nprint(math.floor(2.5)) # returns largest whole number less than the argument\nprint(math.floor(2.9))\nprint(math.floor(2.1))\n\n2\n2\n2",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>NB: Numbers</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#math.log",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#math.log",
    "title": "NB: Numbers",
    "section": "math.log()",
    "text": "math.log()\n\nmath.log(100, 10)\n\n2.0\n\n\n\nmath.log(256, 2)\n\n8.0",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>NB: Numbers</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#random.random",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#random.random",
    "title": "NB: Numbers",
    "section": "random.random()",
    "text": "random.random()\nUsing random() will return a number between \\(0\\) and \\(1\\).\n\nprint(random.random())\n\n0.605894272418689",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>NB: Numbers</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-02-Numbers.html#random.randint",
    "href": "notebooks/M02_BasicPython/M02-02-Numbers.html#random.randint",
    "title": "NB: Numbers",
    "section": "random.randint()",
    "text": "random.randint()\nWe may specify a range in the parentheses.\nThis will return a random integer in the range \\(1\\) to \\(100\\) inclusive.\n\nprint(random.randint(1,100))\n\n18",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>NB: Numbers</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-03-Booleans.html",
    "href": "notebooks/M02_BasicPython/M02-03-Booleans.html",
    "title": "NB: Booleans",
    "section": "",
    "text": "Programming for Data Science\nA boolean value takes one of True or False, which are built-in values\ncheck if cache is True, using if statement\nif statement using a bool evaluates to True or False\n\ncache = True\n\nif cache:\n   print('data will be cached')\n\ndata will be cached\n\n\n\nprint(type(cache))\n\n&lt;class 'bool'&gt;\n\n\nBooleans are frequently used in if/then statements.\nWe’ll cover these later.\n\ncache = True\noome = False\n\nif cache or oome:\n    print('condition met!')\nelse:\n    print(\"No dice.\")\n\nAND statements will short circuit if an early condition fails.\n\nif oome and cache:\n    print('condition met!')\n\nIn this case, since oome is False, the check on cache never happens.",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>NB&colon; Booleans</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html",
    "title": "NB: Strings",
    "section": "",
    "text": "Strings\nStrings are sequences of characters.\nCharacters are member of character sets. Python uses the Unicode character set.\nPython does not have a data type for individual characters, though, as some languages do.\nInstead, a string is an object type that is similar to a list, which we will cover soon.\nPython makes it easy to manipulate string in complex ways.\nThis is very useful for data wrangling tasks such as web scraping and converting unstructured text files into structured data sets.",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>NB&colon; Strings</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#escape-characters",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#escape-characters",
    "title": "NB: Strings",
    "section": "Escape Characters",
    "text": "Escape Characters\nPython supports special “escape characters” within quoted strings that produce effects when printed.\nThese are characters prefixed with a backslash \\.\n\\\\     Backslash (\\)\n\\'     Single quote (')\n\\\"     Double quote (\")\n\\n     Line break\n\\t     Tab\nNote that these escape characters are not unique to Python. They are part of almost all languages.\nHere is a string with the tab character \\t:\n\n\"Hello,\\tWorld! (With a tab character)\"\n\n'Hello,\\tWorld! (With a tab character)'\n\n\nHere is the string interpreted by print():\n\nprint(\"Hello,\\tWorld! (With a tab character)\")\n\nHello,  World! (With a tab character)\n\n\nHere we insert the new line character \\n:\n\nprint(\"Line one\\nLine two, with newline character\")\n\nLine one\nLine two, with newline character\n\n\nRemember that to concatenate strings, you may use the plus sign +:\n\nprint(\"Concatenation,\" + \"\\t\" + \"in strings with tab in middle\")\n\nConcatenation,  in strings with tab in middle",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>NB&colon; Strings</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#quotes-in-quotes",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#quotes-in-quotes",
    "title": "NB: Strings",
    "section": "Quotes in Quotes",
    "text": "Quotes in Quotes\nIf you wanted to print quotes in a string, you can alternate singles and doubles:\n\nprint('Printing \"quotes\" within a string')\n\nPrinting \"quotes\" within a string\n\n\n\nprint(\"Printing 'quotes' within a string\")\n\nPrinting 'quotes' within a string\n\n\nOr you can escape the qoute:\n\nprint(\"Printing \\\"quotes\\\" within a string\")\n\nPrinting \"quotes\" within a string",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>NB&colon; Strings</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#spaces",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#spaces",
    "title": "NB: Strings",
    "section": "Spaces",
    "text": "Spaces\nBy default, the print function puts spaces between strings and a newline at the end, but you can change that:\n\nprint(\"This\", \"is\", \"a\", \"sentence\")\n\nThis is a sentence\n\n\n\nprint(\"This\", \"is\", \"a\", \"sentence\", sep=\"|\")\n\nThis|is|a|sentence\n\n\n\nprint(\"This\", \"is\", \"a\", \"sentence\", end=\" -- \")\nprint(\"This\", \"is\", \"a\", \"sentence\")\n\nThis is a sentence -- This is a sentence",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>NB&colon; Strings</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#f-strings",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#f-strings",
    "title": "NB: Strings",
    "section": "f strings",
    "text": "f strings\nPrefixing a string with f (for ‘formatted’) allows variable interpolation — inplace evaluation of variables in strings.\n\npeople = 'knights'\ngreeting = 'Ni'\n\n\nprint(f'We are the {people} who say {greeting}!')\n\nWe are the knights who say Ni!\n\n\nThe brackets and characters within them (called format fields) are replaced with the passed objects.",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>NB&colon; Strings</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#r-strings",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#r-strings",
    "title": "NB: Strings",
    "section": "r strings",
    "text": "r strings\nPrefixing a string with r (for ‘raw’) causes escape characters to be uninterpreted.\n\nprint(\"Sentence one.\\nSentence two.\")\n\nSentence one.\nSentence two.\n\n\n\nprint(r\"Sentence one.\\nSentence two.\")\n\nSentence one.\\nSentence two.",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>NB&colon; Strings</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#lower-.upper",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#lower-.upper",
    "title": "NB: Strings",
    "section": ".lower(), .upper()",
    "text": ".lower(), .upper()\nThese will conver the case of a string.\n\n'BOB'.lower()\n\n'bob'\n\n\n\n'carlos'.upper()\n\n'CARLOS'",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>NB&colon; Strings</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#split",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#split",
    "title": "NB: Strings",
    "section": ".split()",
    "text": ".split()\nThis will parse a string based on a delimiter, which defaults to whitespace.\nNOTE: This does not use regular expressions.\nThis returns a list.\n\nmonty_python_quote = 'are.you.suggesting.coconuts.migrate'\n\n\nmonty_python_quote\n\n'are.you.suggesting.coconuts.migrate'\n\n\n\nmonty_python_quote.split('.') \n\n['are', 'you', 'suggesting', 'coconuts', 'migrate']\n\n\nNote that literal strings behave like objects.\n\n'are.you.suggesting.coconuts.migrate'.split('.')\n\n['are', 'you', 'suggesting', 'coconuts', 'migrate']",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>NB&colon; Strings</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#strip-.rstrip-lstrip-strip-methods",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#strip-.rstrip-lstrip-strip-methods",
    "title": "NB: Strings",
    "section": ".strip(), .rstrip(), lstrip() Strip methods",
    "text": ".strip(), .rstrip(), lstrip() Strip methods\nYou remove extra whitespace from strings using strip(), rstrip() and lstrip().\nWhitespace characters are characters that are used for spacing.\nThese include newlines, spaces, tabs, carriage returns, feed, etc.\n.strip() removes white space from anywhere in a string.\n.rstrip() only removes white space from the right-hand-side of the string.\n.lstrip() only removes white space from the left-hand-side of the string.\n\nstr1 = '  hello, world!'    # white space at the beginning\nstr2 = '  hello, world!  '  # white space at both ends\nstr3 = 'hello, world!  '    # white space at the end\n\n\nstr1, str2, str3\n\n('  hello, world!', '  hello, world!  ', 'hello, world!  ')\n\n\n\nstr1.lstrip(), str1.rstrip()\n\n('hello, world!', '  hello, world!')\n\n\n\nstr2.strip(), str2.rstrip()\n\n('hello, world!', '  hello, world!')\n\n\n\nstr2.lstrip(), str3.rstrip()\n\n('hello, world!  ', 'hello, world!')",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>NB&colon; Strings</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#startswith",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#startswith",
    "title": "NB: Strings",
    "section": ".startswith()",
    "text": ".startswith()\nThis lets you see if a string starts with a character or a string.\n\nstatus = 'success'\n\n\nstatus.startswith('a')\n\nFalse\n\n\n\nstatus.endswith('s')\n\nTrue\n\n\n\nstatus.endswith('ss')\n\nTrue",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>NB&colon; Strings</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#replace",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#replace",
    "title": "NB: Strings",
    "section": ".replace()",
    "text": ".replace()\nThis lets you swap out characters or strings.\n\n\"latina\".replace(\"a\", \"x\")\n\n'lxtinx'\n\n\n\n\"good night\".replace(\"night\", \"day\")\n\n'good day'",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>NB&colon; Strings</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#format",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#format",
    "title": "NB: Strings",
    "section": ".format()",
    "text": ".format()\nInstead of using the f string prefix, you can use the format method to embed variables in strings.\nPlace {} in the string in order from left to right. followed by .format(var1, var2, ...)`\n\nepoch = 20\nloss = 1.55\nprint('Epoch: {}, loss: {}'.format(epoch, loss))\n\nEpoch: 20, loss: 1.55\n\n\nThis breaks, as three variables are required based on number of {}\n\nprint('Epoch: {}, loop: {}, loss: {}'.format(epoch, loss))\n\nIndexError: Replacement index 2 out of range for positional args tuple",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>NB&colon; Strings</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-04-Strings.html#zfill",
    "href": "notebooks/M02_BasicPython/M02-04-Strings.html#zfill",
    "title": "NB: Strings",
    "section": ".zfill()",
    "text": ".zfill()\nUse this method to pad strings with zeros, which is useful for printing out data sets in raw text form.\n\nprint('12'.zfill(5))       \nprint('3.14'.zfill(7))    \nprint('-3.14'.zfill(7))    \nprint('3.141592'.zfill(3)) # Will not truncate\n\n00012\n0003.14\n-003.14\n3.141592",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>NB&colon; Strings</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html",
    "title": "NB: Data Structures",
    "section": "",
    "text": "Lists\nA list is an ordered sequence of items.\nEach element of a list is associated with an integer that represents the order in which the element appears.\nLists are indexed with brackets [].\nList elements are accessed by providing their order number in the brackets.\nLists are mutable, meaning you can modify them after they have been created.\nThey can contain mixed types.",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#constructors",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#constructors",
    "title": "NB: Data Structures",
    "section": "Constructors",
    "text": "Constructors\nThey can be constructed in several ways:\n\nlist1 = []\nlist2 = list()\nlist3 = \"some string\".split()\nnumbers = [1,2,3,4]",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#indexing",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#indexing",
    "title": "NB: Data Structures",
    "section": "Indexing",
    "text": "Indexing\nIndexing refers to how each element in a list is identified and addressed.\nPython has what is called zero-based indexing.\nThis means that for a list mylist,\n\nmylist[0] references the first element.\nmylist[1] references the second element, etc.\n\nFor any list of length \\(N\\):\n\nmylist[:n] will return the first \\(n\\) elements from index \\(0\\) to \\(n-1\\).\n\nmylist[-n:] will return the last \\(n\\) elements from index \\(N - n\\) to \\(N - 1\\).\n\nLet’s llok at an example.\nHere we access first element of numbers:\n\nnumbers\n\n[1, 2, 3, 4]\n\n\n\nnumbers[0]\n\n1\n\n\nAnd here we accesst the last element:\n\nnumbers[-1]\n\n4\n\n\nNote that the elements of a list are values that can be treated like individual variables:\n\nnumbers[0] + numbers[3]\n\n5\n\n\n\ntype(numbers), type(numbers[0])\n\n(list, int)",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#slicing",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#slicing",
    "title": "NB: Data Structures",
    "section": "Slicing",
    "text": "Slicing\nSlicing refers to the process of getting a sublist from a list.\nTo do this, we use a colon : like so:\n\nnumbers[0:2]\n\n[1, 2]\n\n\n\nnumbers[1:3]\n\n[2, 3]\n\n\n\nnumbers[2:]\n\n[3, 4]",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#multiply-lists-by-a-scalar",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#multiply-lists-by-a-scalar",
    "title": "NB: Data Structures",
    "section": "Multiply lists by a scalar",
    "text": "Multiply lists by a scalar\nA scalar is a single value number.\n\nnumbers * 2\n\n[1, 2, 3, 4, 1, 2, 3, 4]",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#concatenate-lists-with",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#concatenate-lists-with",
    "title": "NB: Data Structures",
    "section": "Concatenate lists with +",
    "text": "Concatenate lists with +\n\nnumbers2 = [30, 40, 50]\n\n\nnumbers + numbers2\n\n[1, 2, 3, 4, 30, 40, 50]",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-mix-types",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-mix-types",
    "title": "NB: Data Structures",
    "section": "Lists can mix types",
    "text": "Lists can mix types\n\nmyList = ['coconuts', 777, 7.25, 'Sir Robin', 80.0, True]\n\n\nmyList\n\n['coconuts', 777, 7.25, 'Sir Robin', 80.0, True]\n\n\nWhat happens if we multiply a list with strings?\n\nmyList * 2\n\n['coconuts',\n 777,\n 7.25,\n 'Sir Robin',\n 80.0,\n True,\n 'coconuts',\n 777,\n 7.25,\n 'Sir Robin',\n 80.0,\n True]",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-be-nested",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#lists-can-be-nested",
    "title": "NB: Data Structures",
    "section": "Lists can be nested",
    "text": "Lists can be nested\n\nnames = ['Darrell', 'Clayton', ['Billie', 'Arthur'], 'Samantha']\n\n\n  names[0]\n\n'Darrell'\n\n\n\nnames[2]\n\n['Billie', 'Arthur']\n\n\n\nnames[2][0]\n\n'Billie'",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#len-length",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#len-length",
    "title": "NB: Data Structures",
    "section": "len() Length",
    "text": "len() Length\nThis is built-in length funciton tells us how many characters in the string.\nIt also applys to any list-like object, including strings, lists, dicts, sets, and dataframes.\n\nmy_new_tring = 'This is a string'\n\n\nlen(my_new_tring)\n\n16",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#indexing-1",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#indexing-1",
    "title": "NB: Data Structures",
    "section": "Indexing",
    "text": "Indexing\nSince strings are sequences in Python, each character of the string has a unique position that can be indexed.\nIndexes are indicated by suffixed brackets, e.g. foo[]\nThis displays the first character of the string.\n\nmy_new_tring[0]\n\n'T'\n\n\nThis displays the last character. Negatives count backwords.\n\nmy_new_tring[-1]\n\n'g'",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#slicing-1",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#slicing-1",
    "title": "NB: Data Structures",
    "section": "Slicing",
    "text": "Slicing\nWe can used the colon to ‘slice’ strings (and lists)\nThe first four characters, i.e. index positions \\(0\\) to \\(3\\).\n\nmy_new_tring[0:4]\n\n'This'\n\n\nThe same thing; \\(0\\) is implied.\n\nmy_new_tring[:4]\n\n'This'\n\n\nThe fifth character and onwards until the end of the string.\n\nmy_new_tring[4:]\n\n' is a string'\n\n\nNote that it is not possible to re-assign elements of a string.\nThis is because Python strings are immutable.\n\nmy_new_tring[0] = 't'\n\nTypeError: 'str' object does not support item assignment",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#constructors-1",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#constructors-1",
    "title": "NB: Data Structures",
    "section": "Constructors",
    "text": "Constructors\nA list may be constructed by putting a sequence of colon-delimitted key/value pairs within a pair of braces:\n\ndict1 = {\n    'a': 1,\n    'b': 2,\n    'c': 3\n}\n\nOr we may call the dict() function:\n\ndict2 = dict(x=55, y=29, z=99)\n\nNote the absence of quotes around keys.\n\ndict2\n\n{'x': 55, 'y': 29, 'z': 99}\n\n\nHere we demonstrate the keys can be strings, numbers, or tuples:\n\ndict3 = {'A': 'foo', 99: 'bar', (1,2): 'baz'}\n\n\ndict3\n\n{'A': 'foo', 99: 'bar', (1, 2): 'baz'}\n\n\nNote that values can be anything, just like the elements of a list.\n\ndict4 = {'a': 1, 'b': dict3}\n\n\ndict4\n\n{'a': 1, 'b': {'A': 'foo', 99: 'bar', (1, 2): 'baz'}}",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#retrieving-a-value",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#retrieving-a-value",
    "title": "NB: Data Structures",
    "section": "Retrieving a value",
    "text": "Retrieving a value\nJust use a key as the index.\n\nphonelist = {'Tom':123, 'Bob':456, 'Sam':897}\n\n\nphonelist['Bob']\n\n456\n\n\nGetting a list of keys, values, or both.\nUse the .keys(), .values(), or .items() methods.\n\nphonelist.keys()\n\ndict_keys(['Tom', 'Bob', 'Sam'])\n\n\n\nphonelist.values()\n\ndict_values([123, 456, 897])\n\n\n\nphonelist.items()\n\ndict_items([('Tom', 123), ('Bob', 456), ('Sam', 897)])\n\n\n\nphonelist\n\n{'Tom': 123, 'Bob': 456, 'Sam': 897}",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#constructors-2",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#constructors-2",
    "title": "NB: Data Structures",
    "section": "Constructors",
    "text": "Constructors\nTuples may be created with comma-separated values, with or without parenthesis.\n\nletters = 'a', 'b', 'c', 'd'\n\n\nletters\n\n('a', 'b', 'c', 'd')\n\n\n\nnumbers = (1, 2, 3, 4)\n\n\nnumbers\n\n(1, 2, 3, 4)\n\n\n\nlen(numbers)\n\n4\n\n\nA single valued tuple must include a comma ,.\nOtherwise, Python will interpret it as a simple expression.\n\ntuple0 = (29)\n\n\ntuple0, type(tuple0)\n\n(29, int)\n\n\n\ntuple1 = (29,)\n\n\ntuple1, type(tuple1)\n\n((29,), tuple)\n\n\nYou can’t re-assign a value to a tuple element.\nThey are immutable.\n\ntuple1[0] = 5\n\nTypeError: 'tuple' object does not support item assignment",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#len",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#len",
    "title": "NB: Data Structures",
    "section": "len()",
    "text": "len()\n\nlen(numbers), len(tuple1), len(dict1)\n\n(4, 1, 3)",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#membership-with-in",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#membership-with-in",
    "title": "NB: Data Structures",
    "section": "Membership with in",
    "text": "Membership with in\n\n'Sam' in phonelist\n\nTrue",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#constructors-3",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#constructors-3",
    "title": "NB: Data Structures",
    "section": "Constructors",
    "text": "Constructors\nLike dictionaries, sets are constructed with braces {}, but unlike dictionaries elements are not key value pairs separated by a colon :.\n\npeanuts = {'snoopy','snoopy','woodstock'}\n\n\npeanuts\n\n{'snoopy', 'woodstock'}\n\n\nNote the set is “de-duped.”\nSets also don’t have an index. This will break:\n\npeanuts[0]\n\nTypeError: 'set' object is not subscriptable\n\n\nYou can check if a value is in the set using in:\n\n'snoopy' in peanuts\n\nTrue",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#set-operations",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#set-operations",
    "title": "NB: Data Structures",
    "section": "Set operations",
    "text": "Set operations\nTo combine two set sets is to get their union:\n\nset1 = {'python','R'}\nset2 = {'R','SQL'}\n\n\nset1.union(set2)\n\n{'R', 'SQL', 'python'}\n\n\nNote that the + operator is not overloaded in this case.\nThis fails:\n\nset1 + set2\n\nTypeError: unsupported operand type(s) for +: 'set' and 'set'\n\n\nTo get the set intersection, do this:\n\nset1.intersection(set2)\n\n{'R'}\n\n\nAnd the difference, i.e. removing from one set the shared elements in another set:\n\nset1.difference(set2)\n\n{'python'}\n\n\n\nset2.difference(set1)\n\n{'SQL'}\n\n\nInterestingly, the - operator is overloaded to compute the difference:\n\nset1 - set2\n\n{'python'}\n\n\n\nset2 - set1\n\n{'SQL'}",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#try-with-dict",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#try-with-dict",
    "title": "NB: Data Structures",
    "section": "Try with dict",
    "text": "Try with dict\n\nwords = {}\nfor word in source_data:\n    words[word] += 1\n\nKeyError: 'Lorem'",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#use-try-and-except",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#use-try-and-except",
    "title": "NB: Data Structures",
    "section": "Use try and except",
    "text": "Use try and except\nThis is how we “trap” errors.\nWe’ll cover this later in the course.\n\nfor word in source_data:\n    try:\n        words[word] += 1\n    except KeyError:\n        words[word] = 1\n\n\nprint(words)\n\n{'Lorem': 8, 'Ipsum': 6, 'is': 2, 'simply': 2, 'dummy': 4, 'text': 4, 'of': 8, 'the': 12, 'printing': 2, 'and': 6, 'typesetting': 2, 'industry.': 2, 'has': 4, 'been': 2, \"industry's\": 2, 'standard': 2, 'ever': 2, 'since': 2, '1500s,': 2, 'when': 2, 'an': 2, 'unknown': 2, 'printer': 2, 'took': 2, 'a': 4, 'galley': 2, 'type': 4, 'scrambled': 2, 'it': 2, 'to': 2, 'make': 2, 'specimen': 2, 'book.': 2, 'It': 4, 'survived': 2, 'not': 2, 'only': 2, 'five': 2, 'centuries,': 2, 'but': 2, 'also': 2, 'leap': 2, 'into': 2, 'electronic': 2, 'typesetting,': 2, 'remaining': 2, 'essentially': 2, 'unchanged.': 2, 'was': 2, 'popularised': 2, 'in': 2, '1960s': 2, 'with': 4, 'release': 2, 'Letraset': 2, 'sheets': 2, 'containing': 2, 'passages,': 2, 'more': 2, 'recently': 2, 'desktop': 2, 'publishing': 2, 'software': 2, 'like': 2, 'Aldus': 2, 'PageMaker': 2, 'including': 2, 'versions': 2, 'Ipsum.': 2}",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#use-.get",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#use-.get",
    "title": "NB: Data Structures",
    "section": "Use .get()",
    "text": "Use .get()\n\nfor word in source_data:\n    words[word] = words.get(word, 0) + 1",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M02_BasicPython/M02-05-Structures.html#use-collections.defaultdict",
    "href": "notebooks/M02_BasicPython/M02-05-Structures.html#use-collections.defaultdict",
    "title": "NB: Data Structures",
    "section": "Use collections.defaultdict",
    "text": "Use collections.defaultdict\n\nfrom collections import defaultdict\n\n\nwords2 = defaultdict(int) # Note the data type must be set\n\n\nfor word in source_data:\n    words2[word] += 1\n\n\nprint(words2)\n\ndefaultdict(&lt;class 'int'&gt;, {'Lorem': 4, 'Ipsum': 3, 'is': 1, 'simply': 1, 'dummy': 2, 'text': 2, 'of': 4, 'the': 6, 'printing': 1, 'and': 3, 'typesetting': 1, 'industry.': 1, 'has': 2, 'been': 1, \"industry's\": 1, 'standard': 1, 'ever': 1, 'since': 1, '1500s,': 1, 'when': 1, 'an': 1, 'unknown': 1, 'printer': 1, 'took': 1, 'a': 2, 'galley': 1, 'type': 2, 'scrambled': 1, 'it': 1, 'to': 1, 'make': 1, 'specimen': 1, 'book.': 1, 'It': 2, 'survived': 1, 'not': 1, 'only': 1, 'five': 1, 'centuries,': 1, 'but': 1, 'also': 1, 'leap': 1, 'into': 1, 'electronic': 1, 'typesetting,': 1, 'remaining': 1, 'essentially': 1, 'unchanged.': 1, 'was': 1, 'popularised': 1, 'in': 1, '1960s': 1, 'with': 2, 'release': 1, 'Letraset': 1, 'sheets': 1, 'containing': 1, 'passages,': 1, 'more': 1, 'recently': 1, 'desktop': 1, 'publishing': 1, 'software': 1, 'like': 1, 'Aldus': 1, 'PageMaker': 1, 'including': 1, 'versions': 1, 'Ipsum.': 1})",
    "crumbs": [
      "M02 Introducing Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>NB&colon; Data Structures</span>"
    ]
  },
  {
    "objectID": "modules/m03/m03-intro.html",
    "href": "modules/m03/m03-intro.html",
    "title": "M03 Control Structures",
    "section": "",
    "text": "Topics",
    "crumbs": [
      "M03 Control Structures"
    ]
  },
  {
    "objectID": "modules/m03/m03-intro.html#topics",
    "href": "modules/m03/m03-intro.html#topics",
    "title": "M03 Control Structures",
    "section": "",
    "text": "More on Statements and Syntax\nControl Structures and Loops\nConditional Logic\nIterators\nComprehensions",
    "crumbs": [
      "M03 Control Structures"
    ]
  },
  {
    "objectID": "modules/m03/m03-intro.html#readings",
    "href": "modules/m03/m03-intro.html#readings",
    "title": "M03 Control Structures",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\nLutz, 2019, Part III, Chapter 10. Introducing Python Statements\nLutz, 2019, Part III, Chapter 11. Assignments, Expressions, and Prints\n\nRead only up to and including “The Python 3.X print Function.”\n\nLutz, 2019, Part III, Chapter 12. if Tests and Syntax Rules\nLutz, 2019, Part III, Chapter 13. while and for Loops\nLutz, 2019, Part III, Chapter 14. Iterations and Comprehensions\nLutz, 2019, Part III, Chapter 15: The Documentations Interlude\n\n\n\nOptional\n\nVariables, Expressions, Statements, Types (Python Notes)\nMore Control Flow Tools (Python Docs)\nIf … Then (W3S)\nIterators (GFG)",
    "crumbs": [
      "M03 Control Structures"
    ]
  },
  {
    "objectID": "topics/vals-vars-expressions-statements.html",
    "href": "topics/vals-vars-expressions-statements.html",
    "title": "Values, Variables, Expressions, and Statements",
    "section": "",
    "text": "Definitions",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Values, Variables, Expressions, and Statements</span>"
    ]
  },
  {
    "objectID": "topics/vals-vars-expressions-statements.html#definitions",
    "href": "topics/vals-vars-expressions-statements.html#definitions",
    "title": "Values, Variables, Expressions, and Statements",
    "section": "",
    "text": "Values: Raw data elements represented in a program, e.g. numbers and strings.\nVariables: Names to which values are assigned.\nExpressions: Combinations of values, variables, operators, functions, and other expressions that evaluate to a value.\nStatements: Groupings of expressions that produce some result. Statements do things.\nBlocks: Groupings of statements into functional chunks of code, such as a control block or a function.",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Values, Variables, Expressions, and Statements</span>"
    ]
  },
  {
    "objectID": "topics/vals-vars-expressions-statements.html#statement-types",
    "href": "topics/vals-vars-expressions-statements.html#statement-types",
    "title": "Values, Variables, Expressions, and Statements",
    "section": "Statement Types",
    "text": "Statement Types\nSee Statement Types in Lutz.",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Values, Variables, Expressions, and Statements</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html",
    "href": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html",
    "title": "NB: Control Structures",
    "section": "",
    "text": "Introducing Control Structures\nPython includes structures to control the flow of data in a program.\nThese structures are made of code blocks that provide looping and branching capabilities to your code, based on boolean conditions.\nControl structures are fundamental to creating algorithms that can process and respond to data as it flows through and is transformed by a program.",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>NB: Control Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#conditions",
    "href": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#conditions",
    "title": "NB: Control Structures",
    "section": "Conditions",
    "text": "Conditions\nConditions are boolean checkpoints in a program, switching a process based on wheter some condition is true or not.\nThe if and else keywords can be used to create branches in your code based on conditions.\nThis is called conditional processing.\nHere is a very simple example.\n\nval = -2\n\nif val &gt;= 0:\n    print(val)\nelse:\n    print(-val)\n\n2\n\n\n\nA Note about Indentation\nNote the indenation pattern in the code:\nif val &gt;= 0:\n    print(val)\nelse:\n    print(-val)\nThis is where Python differs from most languages.\nTo define control structures, and functional blocks of code in general, most languages use either characters like braces { and } or key words like IF ... END IF.\nFor example, here is how this control structure might look in other languages:\n\nif (val &lt;= 0) {\n    print(val);\n} \nelse {\n    print(-val);\n}\nOr:\nIF val &lt;= 0\n    PRINT val\nELSE\n    PRINT -val\nEND IF\nPython uses tabs — spaces, actually — to signify logical blocks off code.\nIt is therefore imperative to understand and get a feel for indentation.\n\n\n\nelif\nelif is reached when the previous statements are not.\nNote that if one succeeds, those that follow are not processed.\nThis is unlike a series of if statements.\n\nval = -2\n\nif -10 &lt; val &lt; -5:\n    print('bucket 1')\nelif -5 &lt;= val &lt; -2:\n    print('bucket 2')\nelif val == -2:\n    print('bucket 3')\n\nbucket 3\n\n\n\n\nelse\nelse can be used as a catch-all for situation when no condition is met.\n\nval = 5\n\nif -10 &lt; val &lt; -5:\n    print('bucket 1')\nelif -5 &lt;= val &lt; -2:\n    print('bucket 2')\nelif val == -2:\n    print('bucket 3')\nelse:\n    print('bucket 4')\n\nbucket 4\n\n\nIt’s a good practice to include an else statement.\n\n\nif and else as one-liners\nPython provides a short-hand way of defining if statements.\n\nx = 3\n\nprint('odd') if x % 2 == 1 else print('even')\n\nodd\n\n\nThe general form:\nACTION1 if CONDITION else ACTION2\nBoth if and else are required. This breaks:\n\nprint('odd') if x % 2 == 1\n\nSyntaxError: expected 'else' after 'if' expression (471325368.py, line 1)\n\n\nEssentially, then, this is an either/or construct.\n\n\nUsing multiple conditions\nIf statements can be complex combinations of expressions. Use parentheses to keep order of operations correct.\nCorrect:\n\nprint(1) if (-2 &lt; val &lt; 2) or (val &gt; 10) else print(2)\n\n2\n\n\nIncorrect:\n\nprint(1) if (-2 &lt; val) &lt; 2 or val &gt; 10 else print(2)\n\n1\n\n\nThe problem is that the condition line is interpreted as True &lt; 2, where True is cast to integer value \\(1\\).",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>NB: Control Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#loops",
    "href": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#loops",
    "title": "NB: Control Structures",
    "section": "Loops",
    "text": "Loops\nLoops are fundamental constructs in programming.\nThey allow for the repeated application of a set of operations on a series of values to compute a result.\nThe repetition of a process as the data changes is called iteration.\nA loop is an algorithmic pattern designed to process data stored in a seqeuence of some kind, such as provided by a list or range.\nLoops exemplify a premise of this course that data structures imply algorithms. Using the term ‘list’ broadly, we may say that Lists imply loops.\nThere are two main kinds of loops in Python: while and for.\n\nwhile loops\nWhile loops iterate while some condition is true. It stops when the condition is false.\nHere is a simple example:\n\nix = 1\nix_list = []\nwhile ix &lt; 10:\n    ix *= 2\n    ix_list.append(ix)\nprint(ix)\nprint(ix_list)\nprint(ix_list[-1])\n\n16\n[2, 4, 8, 16]\n16\n\n\nNote that it is possible for while loops to be unending.\nFor example:\nwhile 1:\n    print(\"This is so annoying\")\nThis is why it is important to make sure that your looping condition can be met.\nYou may also break out of a loop by other means.\n\n\nbreak\nSometimes you want to quit the loop early, if some condition is met.\nTo do this, put break in an if statement.\n\nix = 1\nwhile ix &lt; 10:\n    ix = ix * 2\n    if ix == 4:\n        break\nprint(ix)\n\n4\n\n\nThe break causes the loop to end early\n\n\ncontinue\nSometimes you want to introduce skipping behavior in the loop.\nTo do this, put continue in an if statement.\n\nix = 1\nwhile ix &lt; 10:\n    ix = ix * 2\n    if ix == 4:\n        print('skipping 4...')\n        continue\n    print(ix)\n\n2\nskipping 4...\n8\n16\n\n\nSee how continue causes the loop to skip printing \\(4\\).\n\n\nfor\nIn contrast to while loops, for loops iterate over an iterable data structure, such as a list.\nThey stop when the list is finished.\n\ncities = ['Charlottesville','New York','SF','BOS','LA']\n\nfor city in cities:\n    print(f'\"{city.lower()}\"', end=' ')\n\n\"charlottesville\" \"new york\" \"sf\" \"bos\" \"la\" \n\n\nConditions can be used inside of if statements to skip within or stop the loop.\nQuit early if SF reached, using break:\n\ncities = ['Charlottesville','New York','SF','BOS','LA']\n\nfor city in cities:  \n    if city == 'SF':\n        break\n    print(f'\"{city.lower()}\"', end=' ')\n\n\"charlottesville\" \"new york\" \n\n\nSkip over SF if reached, using continue:\n\ncities = ['Charlottesville','New York','SF','BOS','LA']\n\nfor city in cities:\n    if city == 'SF':\n        continue\n    print(f'\"{city.lower()}\"', end=' ')        \n\n\"charlottesville\" \"new york\" \"bos\" \"la\"",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>NB: Control Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#while-vs-for",
    "href": "notebooks/M03_ControlStructures/M03-01-ControlStructures.html#while-vs-for",
    "title": "NB: Control Structures",
    "section": "while vs for",
    "text": "while vs for\nWhen choosing between for and while loops, consider this:\n\nfor loops are used to loop through a list of values or an operation in which the number of iterations is known in advance.\nwhile loops are when you don’t know how many interations it will take — you are depending on some condition to be met.\n\nThe former is often used when processing data, the latter when performing algorithmic modeling tasks, such as optimization and convergence.",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>NB: Control Structures</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html",
    "title": "NB: Iterables and Iterators",
    "section": "",
    "text": "Iterables and Iteration\nWe have seen that sequential data structures like lists and tuples have a natural affinity to loops.\nSequences imply loops and loops expect sequences.\nIn Python, this relationship is captured by the resonance between the words iteration and iterables.\nIterable data structures that can be iterated over, meaning they can return their elements one at a time.\nExamples of iterable objects include lists, tuples, sets, dictionaries, and strings.\nTypically we iterate over iterables using for loops, as we saw when reviewed control structures.",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>NB: Iterables and Iterators</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#lists",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#lists",
    "title": "NB: Iterables and Iterators",
    "section": "Lists",
    "text": "Lists",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>NB: Iterables and Iterators</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-using-for",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-using-for",
    "title": "NB: Iterables and Iterators",
    "section": "iterating using for",
    "text": "iterating using for\nFirst, let’s review iteration by means of a for loop.\n\ntokens = ['living room', 'was', 'quite', 'large']\nfor tok in tokens:\n    print(tok)\n\nliving room\nwas\nquite\nlarge",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>NB: Iterables and Iterators</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterators",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterators",
    "title": "NB: Iterables and Iterators",
    "section": "Iterators",
    "text": "Iterators\nPython introduces a kind of object call an iterator designed to make iteration — sequence processing — fast and efficient.\nAn iterator is a specific object that represents an interable stream of data.\nIt is used to iterate over iterable objects by removing one element at a time from the iterables.",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>NB: Iterables and Iterators</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-with-iterators",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-with-iterators",
    "title": "NB: Iterables and Iterators",
    "section": "Iterating with Iterators",
    "text": "Iterating with Iterators\nAn iterator works by popping out and removing a value at each iteration.\nThis means than when iterating through an iterable object you empty it as you go, leaving an empty data structure at the end.\nThis is useful in situations where you want to save memory.\nMany functions in Python return iterables so it’s helpful to understand them even if you don’t create any yourself.\n\nUsing iter() and next()\nTo use an iterator, you convert a sequence to an iterator object using iter().\nThen you use next() to get the next item from the iterator.\n\ntokens = ['living room','was','quite','large']\nmyit = iter(tokens)\nprint(next(myit)) \nprint(next(myit)) \nprint(next(myit)) \nprint(next(myit)) \n\nliving room\nwas\nquite\nlarge\n\n\nCalling next() when the iterator has reached the end of the list produces an exception:\n\nnext(myit)\n\nStopIteration: \n\n\nNote that when used with an iterable created by iter(), for implicitly executes next() on each loop iteration.\n\nmyit = iter(tokens) # Reset the iterator\nfor next_it in myit:\n    print(next_it)\n\nliving room\nwas\nquite\nlarge",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>NB: Iterables and Iterators</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#sequences-and-collections",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#sequences-and-collections",
    "title": "NB: Iterables and Iterators",
    "section": "Sequences and Collections",
    "text": "Sequences and Collections\nSo far, we iterated over a list.\nNow let’s look at sets, strings, tuples, dictionaries, and ranges.\nLists, tuples, and strings are sequences. Sequences are designed so that elements come out of them in the same order they were put in.\nSets and dictionaries are not sequences per se, since they the order of their elements is not as important as their names. They are called collections.\nNote that prior to Python 3.7, the order of elements in sets and dictionaries was arbitrary. Now, dictionaries preserve the order in which they were populated, and sets are sorted.",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>NB: Iterables and Iterators</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#sets",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#sets",
    "title": "NB: Iterables and Iterators",
    "section": "Sets",
    "text": "Sets\nIterating using for:\n\nprincesses = {'belle', 'cinderella', 'rapunzel'}\nfor princess in princesses:\n    print(princess)\n\nrapunzel\nbelle\ncinderella\n\n\nIterating using iter() and next():\n\nprincesses_i = iter(princesses)\nprint(next(princesses_i))\nprint(next(princesses_i))\nprint(next(princesses_i))\n\nrapunzel\nbelle\ncinderella\n\n\n\ntype(princesses_i)\n\nset_iterator",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>NB: Iterables and Iterators</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#strings",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#strings",
    "title": "NB: Iterables and Iterators",
    "section": "Strings",
    "text": "Strings\nIterating using for:\n\nstr1 = 'data'\nfor my_char in str1:\n    print(my_char)\n\nd\na\nt\na\n\n\nIterating using iter() and next():\n\nstr1_i = iter(str1)\nprint(next(str1_i))\nprint(next(str1_i))\nprint(next(str1_i))\nprint(next(str1_i))\n\nd\na\nt\na\n\n\n\ntype(str1_i)\n\nstr_ascii_iterator",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>NB: Iterables and Iterators</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#tuples",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#tuples",
    "title": "NB: Iterables and Iterators",
    "section": "Tuples",
    "text": "Tuples\nIterating using for:\n\nmetrics = ('auc','recall','precision','support')\nfor met in metrics:\n    print(met)\n\nauc\nrecall\nprecision\nsupport\n\n\nIterating using iter() and next():\n\nmetrics = ('auc','recall','precision','support')\nmetrics_i = iter(metrics)\nprint(next(metrics_i))\nprint(next(metrics_i))\nprint(next(metrics_i))\nprint(next(metrics_i))\n\nauc\nrecall\nprecision\nsupport\n\n\n\ntype(metrics_i)\n\ntuple_iterator",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>NB: Iterables and Iterators</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#dictionaries",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#dictionaries",
    "title": "NB: Iterables and Iterators",
    "section": "Dictionaries",
    "text": "Dictionaries\nIterating using for:\n\ncourses = {'fall': ['regression','python'], 'spring': ['capstone','pyspark','nlp']}\n\n\nfor k in courses:\n    print(k)\n\nfall\nspring\n\n\n\nfor k in courses.keys():\n    print(k)\n\nfall\nspring\n\n\n\nfor v in courses.values():\n    print(v)\n\n['regression', 'python']\n['capstone', 'pyspark', 'nlp']\n\n\n\nfor k, v in courses.items():\n    print(f\"{k.upper()}:\\t{', '.join(v)}\")\n\nFALL:   regression, python\nSPRING: capstone, pyspark, nlp\n\n\n\nfor k in courses.keys():\n    print(f\"{k.upper()}:\\t{', '.join(courses[k])}\") # index into the dict with the key\n\nFALL:   regression, python\nSPRING: capstone, pyspark, nlp",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>NB: Iterables and Iterators</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#ranges",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#ranges",
    "title": "NB: Iterables and Iterators",
    "section": "Ranges",
    "text": "Ranges\nIterating using for:\n\nfor i in range(10):\n    print(str(i+1).zfill(2), (i+1)**2 * '|')\n\n01 |\n02 ||||\n03 |||||||||\n04 ||||||||||||||||\n05 |||||||||||||||||||||||||\n06 ||||||||||||||||||||||||||||||||||||\n07 |||||||||||||||||||||||||||||||||||||||||||||||||\n08 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n09 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n10 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>NB: Iterables and Iterators</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#get-iteration-number-with-enumerate",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#get-iteration-number-with-enumerate",
    "title": "NB: Iterables and Iterators",
    "section": "Get iteration number with enumerate()",
    "text": "Get iteration number with enumerate()\nVery often you will want to know iteration number you are on in a loop.\nThis can be used to name files or dict keys, for example.\nenumerate() will return the index and key for each iteration.\n\ncourses\n\n{'fall': ['regression', 'python'], 'spring': ['capstone', 'pyspark', 'nlp']}\n\n\n\nfor i, semester in enumerate(courses):\n    course_name = f\"{str(i).zfill(2)}_{semester}:\\t{'-'.join(courses[semester])}\"\n    print(course_name)\n\n00_fall:    regression-python\n01_spring:  capstone-pyspark-nlp",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>NB: Iterables and Iterators</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#nested-loops",
    "href": "notebooks/M03_ControlStructures/M03-02-IterablesAndIterators.html#nested-loops",
    "title": "NB: Iterables and Iterators",
    "section": "Nested Loops",
    "text": "Nested Loops\nIterations can be nested — this is very powerful.\nThis works well with nested data structures, like dictionaries within dictionaries.\nThis is basically how JSON files are handled, BTW.\nBe careful, though – these can get deep and complicated.\n\nfor i, semester in enumerate(courses):\n    print(f\"{i+1}. {semester.upper()}:\")\n    for j, course in enumerate(courses[semester]):\n        print(f\"\\t{i+1}.{j+1}. {course}\")\n\n1. FALL:\n    1.1. regression\n    1.2. python\n2. SPRING:\n    2.1. capstone\n    2.2. pyspark\n    2.3. nlp\n\n\nUsed nested loops to get the cartesian product.\n\ndie = range(1,7)\ndie_rolls = []\nfor face1 in die:\n    for face2 in die:\n        die_rolls.append((face1, face2))\nprint(die_rolls)\n\n[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6)]\n\n\nNow get the frequency of die roll sums.\n\ndie_roll_sums = {}\n\n\nfor my_die_roll in die_rolls:\n    my_die_roll_sum = sum(my_die_roll)\n    die_roll_sums[my_die_roll_sum] = die_roll_sums.get(my_die_roll_sum, 0) + 1\n\n\nfor k, v in die_roll_sums.items():\n    print(str(k).zfill(2), v, '|' * v)\n\n02 1 |\n03 2 ||\n04 3 |||\n05 4 ||||\n06 5 |||||\n07 6 ||||||\n08 5 |||||\n09 4 ||||\n10 3 |||\n11 2 ||\n12 1 |",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>NB: Iterables and Iterators</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html",
    "href": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html",
    "title": "NB: Comprehensions",
    "section": "",
    "text": "List Comprehensions\nConsider the following task.\nCheck if each integer in a list is odd and save the results (true or false) in a list.\nWith a standard for loop, you could do this:\nvals = [1,5,6,8,12,15]\nis_odd = []\nfor val in vals:   \n    if val % 2:\n        is_odd.append(True)\n    else:       \n        is_odd.append(False)\nis_odd\n\n[True, True, False, False, False, True]\nNow let’s do the same thing with a list comprehension:\nis_odd_comp = [val % 2 == 1 for val in vals]\nis_odd_comp\n\n[True, True, False, False, False, True]\nMuch shorter, and if you understand the syntax, quicker to interpet.\nHere’s how you might save all the even numbers in a list:\nodd_vals = [val for val in vals if val % 2 == 1]\nodd_vals\n\n[1, 5, 15]\nThis introduces how comprehensions may include a boolean condition to filter what gets included in the result.",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>NB: Comprehensions</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#removing-stopwords",
    "href": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#removing-stopwords",
    "title": "NB: Comprehensions",
    "section": "Removing Stopwords",
    "text": "Removing Stopwords\nDefine a sentence and a list of stop words.\nFilter out the stop words (considered not important).\n\nsentence = \"I am not a fan of this film\"\nstop_words = ['a','am','an','i','the','of']\n\n\nclean_words = [word for word in sentence.split() if word.lower() not in stop_words]\nclean_words\n\n['not', 'fan', 'this', 'film']\n\n\nHere is a color-coded version of the list comprehension to show its parts:\n[word   for word in sentence.split()  if word not in stop_words]\nSide note: This task can also be done with sets, if you are not concerned with mulitple instances of the same word:\n\ns1 = set(stop_words)\ns2 = set(sentence.lower().split())\ns3 = s2 - s1\n\n\ns3\n\n{'fan', 'film', 'not', 'this'}",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>NB: Comprehensions</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#selecting-tokens-containing-units",
    "href": "notebooks/M03_ControlStructures/M03-03-Comprehensions.html#selecting-tokens-containing-units",
    "title": "NB: Comprehensions",
    "section": "Selecting Tokens Containing Units",
    "text": "Selecting Tokens Containing Units\nGiven a list of measurements, retain elements containing \\(mmHg\\) (millimeters of mercury)\n\nunits = 'mmHg'\nmeasures = ['20', '115mmHg', '5mg', '10 mg', '7.5dl', '120 mmHg']\nmeasures_mmhg = [measure for measure in measures if units in measure]\n\n\nmeasures_mmhg   \n\n['115mmHg', '120 mmHg']\n\n\nFiltering on two conditions\n\nunits1 = 'mmHg'\nunits2 = 'dl'\nmeas_mmhg_dl = [meas for meas in measures if units1 in meas or units2 in meas]\n\n\nmeas_mmhg_dl\n\n['115mmHg', '7.5dl', '120 mmHg']\n\n\nThis can be written differently for clarity:\n\n[meas \n for meas in measures \n if units1 in meas \n or units2 in meas]\n\n['115mmHg', '7.5dl', '120 mmHg']",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>NB: Comprehensions</span>"
    ]
  },
  {
    "objectID": "notebooks/M03_ControlStructures/M03-04-NestedComprehensions.html",
    "href": "notebooks/M03_ControlStructures/M03-04-NestedComprehensions.html",
    "title": "Nested Comprehensions",
    "section": "",
    "text": "Programming for Data Science\nRecall that nested loops are the algorithmic complement to nested data structures.\nJust as we can nest loops using for loops, we can do so with comprehensions.\nHere are some examples.\nThis notebook is adapted from GeeksForGeeks.\n\n\nExample 1: Creating a Matrix\nHere is how we can make a matrix — a two-dimensional data structure where each element is of the same data type — using plain old for loops.\n\nmatrix1 = [] # Matrix created\nfor i in range(5):\n    matrix1.append([]) # Row created\n    for j in range(5):\n        matrix1[i].append(j) # Cell populated\n\n\nmatrix1\n\n[[0, 1, 2, 3, 4],\n [0, 1, 2, 3, 4],\n [0, 1, 2, 3, 4],\n [0, 1, 2, 3, 4],\n [0, 1, 2, 3, 4]]\n\n\nHere’s how we can do this with a nested list comprehension:\n\nmatrix2 = [[j for j in range(5)] for i in range(5)]\n\n\nmatrix2\n\n[[0, 1, 2, 3, 4],\n [0, 1, 2, 3, 4],\n [0, 1, 2, 3, 4],\n [0, 1, 2, 3, 4],\n [0, 1, 2, 3, 4]]\n\n\nWe replace five lines of code with one.\n\n\nExample 2: Filtering a Nested List\nLet create a filter to extract some things we want from a matrix.\nIn this case, we want to pull out all of the odd numbers and save them as a list.\n\nmatrix3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nodd_numbers1 = []\nfor row in matrix3:\n    for element in row:\n        if element % 2 != 0:\n            odd_numbers1.append(element)\n\n\nodd_numbers1\n\n[1, 3, 5, 7, 9]\n\n\n\nodd_numbers2 = [element for row in matrix3 for element in row if element % 2 != 0]\n\n\nodd_numbers2\n\n[1, 3, 5, 7, 9]\n\n\nHere’s a closer look at how nesting is represented in a comprehension compared to the traditional way.\nTraditional for loop:\nfor row in matrix3:\n    for element in row:\n        if element % 2 != 0:\n            odd_numbers1.append(element) # This is hoised to the top\n                                         # and implicitly appended\nComprehension (inside []):\nelement                        \n    for row in matrix3 \n        for element in row \n            if element % 2 != 0\nSee how they are the same, except that the kernel operation — appending filtered values to a result list — is hoisted to the top in the case of the comprehension.\n\n\nExample 3: Flattening Nested Sub-Lists\nHere we take a nested structure and flatten it out.\n\nnested_list = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\nflat_list1 = []\nfor sub_list in nested_list:\n    for val in sub_list:\n        flat_list1.append(val)\n\n\nflat_list1\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nflat_list2 = [val for sub_list in nested_list for val in sub_list]\n\n\nflat_list2\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\nExample 4: Manipulating Matrix Values\nFinally, we demonstrate how to manipulate each value in a matrix of words.\nIn this case, we simply capitalize each string.\n\nmatrix4 = [[\"apple\", \"banana\", \"cherry\"],\n        [\"date\", \"fig\", \"grape\"],\n        [\"kiwi\", \"lemon\", \"mango\"]]\nmodified_matrix1 = []\nfor row in matrix4:\n    modified_row = []\n    for fruit in row:\n        modified_row.append(fruit.capitalize())\n    modified_matrix1.append(modified_row)\n\n\nmodified_matrix1\n\n[['Apple', 'Banana', 'Cherry'],\n ['Date', 'Fig', 'Grape'],\n ['Kiwi', 'Lemon', 'Mango']]\n\n\n\nmodified_matrix2 = [[fruit.capitalize() for fruit in row] for row in matrix4]\n\n\nmodified_matrix2\n\n[['Apple', 'Banana', 'Cherry'],\n ['Date', 'Fig', 'Grape'],\n ['Kiwi', 'Lemon', 'Mango']]",
    "crumbs": [
      "M03 Control Structures",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Nested Comprehensions</span>"
    ]
  },
  {
    "objectID": "modules/m04/m04-intro.html",
    "href": "modules/m04/m04-intro.html",
    "title": "M04 Functions",
    "section": "",
    "text": "Topics",
    "crumbs": [
      "M04 Functions"
    ]
  },
  {
    "objectID": "modules/m04/m04-intro.html#topics",
    "href": "modules/m04/m04-intro.html#topics",
    "title": "M04 Functions",
    "section": "",
    "text": "Built-in functions\nUser-defined functions\nVariable scope\nLambda functions\nDesign of functions\nRecursion",
    "crumbs": [
      "M04 Functions"
    ]
  },
  {
    "objectID": "modules/m04/m04-intro.html#readings",
    "href": "modules/m04/m04-intro.html#readings",
    "title": "M04 Functions",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\nLutz 2019, Part IV, Chapter 16: Function Basics\nLutz 2019, Part IV, Chapter 17: Scopes\n\nNon-local is for advanced users.\n\nLutz 2019, Part IV, Chapter 18. Arguments\nLutz 2019, Part IV, Chapter 19: Advanced Function Topics\n\n\n\nOptional\n\nMcKinney, 2023, Python for Data Analysis, “3.2: Functions”\nFunctions (W3S)\nGlobal and Local Variables (GFG)\nLambda Functions (Real Python)",
    "crumbs": [
      "M04 Functions"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Functions.html",
    "href": "notebooks/M04_PythonFunctions/M04-01-Functions.html",
    "title": "NB: Introduction to Functions",
    "section": "",
    "text": "Introduction\nA function is piece of code, separate fom the larger program, that performs a specific task.\nThis piece of code is given a name and can be called from the main program.\nFunctions are the verbs of a programming language. They signify action, and take subjects and objects (as it were).\nFunctions take input and produce output.\nFunctions are always written with parentheses at the end of their names, e.g.\nlen(some_list)\nInternally, they contain a block of code to do their work.\nOften the producte a transformation … from simple to complex.\nWhen you use a function, we say you call a function. Programmers speak of “function calls” and “callbacks”.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>NB: Introduction to Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Functions.html#introduction",
    "href": "notebooks/M04_PythonFunctions/M04-01-Functions.html#introduction",
    "title": "NB: Introduction to Functions",
    "section": "",
    "text": "Function inputs are called both parameters and arguments.\nOutputs are called return values",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>NB: Introduction to Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Functions.html#benefits",
    "href": "notebooks/M04_PythonFunctions/M04-01-Functions.html#benefits",
    "title": "NB: Introduction to Functions",
    "section": "Benefits",
    "text": "Benefits\nReduce complex tasks into simpler tasks.\nEliminate duplicate code – no need to re-write, reuse function as needed.\nMake code reusable. Once function is written, you can reuse it in any other program.\nDistribute tasks to multiple programmers. For example, each function can be written by someone.\nHide implementation details, i.e. abstraction.\nIncrease code readability.\nImprove debugging by improving traceability. Things are easier to follow; you can jump from function to function.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>NB: Introduction to Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Functions.html#built-in-functions",
    "href": "notebooks/M04_PythonFunctions/M04-01-Functions.html#built-in-functions",
    "title": "NB: Introduction to Functions",
    "section": "Built-in Functions",
    "text": "Built-in Functions\nPython provides many built-in functions. See Python built-in functions.\nWe’ve looked at many of these already.\nThese are functions that are available to use any time your are running Python.\nTo take one simple example, this is a built-in function: bool().\nTakes an argument \\(x\\) and returns a boolean value, i.e. True or False.\n\nbool(0), bool(500)",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>NB: Introduction to Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Functions.html#imported-functions",
    "href": "notebooks/M04_PythonFunctions/M04-01-Functions.html#imported-functions",
    "title": "NB: Introduction to Functions",
    "section": "Imported Functions",
    "text": "Imported Functions\nPython is meant to be a highly modular language.\nIt is not designed to have a lot of special purpose functions built into it.\nThese keeps it light and highly customizable.\nMany functions (and other stuff) can be imported into a program to add to the functions that you can call in a script.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>NB: Introduction to Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Functions.html#user-defined-functions",
    "href": "notebooks/M04_PythonFunctions/M04-01-Functions.html#user-defined-functions",
    "title": "NB: Introduction to Functions",
    "section": "User-Defined Functions",
    "text": "User-Defined Functions\nPython makes it easy for you to write your own functions. These are called user-defined functions.\nLet’s write a function to compare the list against a threshold.\n\ndef vals_greater_than_or_equal_to_threshold(vals, thresh):\n    '''\n    This is the \"docstring\" of a function. It is optional but expected. It describes it's \n    purpose and the nature of the input and return values, as well as a sense of what it does.\n    More elaborate information should appear in external documentation packages with the function.\n    \n    PURPOSE: Given a list of values, compare each value against a threshold\n    \n    INPUTS\n    vals    list of ints or floats\n    thresh  int or float\n    \n    OUTPUT\n    bools  list of booleans\n    '''\n    \n    bools = [val &gt;= thresh for val in vals]\n    \n    return bools\n\nLet’s break down the components\nThe function definition starts with def, followed by name, one or more arguments in parenthesis, and then a colon.\nNext comes a docstring to provide information to users about how and why to use the function.\nThe function body follows.\n:astly is a return statement\nThe function call allows for the function to be used.\nIt consists of function name and required arguments:\nvals_greater_than_or_equal_to_threshold(arg1, arg2) where arg1, arg2 are arbitrary names.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>NB: Introduction to Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Functions.html#about-the-docstring",
    "href": "notebooks/M04_PythonFunctions/M04-01-Functions.html#about-the-docstring",
    "title": "NB: Introduction to Functions",
    "section": "About the docstring",
    "text": "About the docstring\nA docstring m occurs as first statement in module, function, class, or method definition\nInternally, it is saved in __doc__ attribute of the function object.\nIt needs to be indented.\nIt can be a single line or a multi-line string.\n\nUsers can print the docstring\n\nprint(vals_greater_than_or_equal_to_threshold.__doc__)\n\n\n    This is the \"docstring\" of a function. It is optional but expected. It describes it's \n    purpose and the nature of the input and return values, as well as a sense of what it does.\n    More elaborate information should appear in external documentation packages with the function.\n    \n    PURPOSE: Given a list of values, compare each value against a threshold\n    \n    INPUTS\n    vals    list of ints or floats\n    thresh  int or float\n    \n    OUTPUT\n    bools  list of booleans\n    \n\n\nPrint the docstring using help():\n\nhelp(vals_greater_than_or_equal_to_threshold)\n\nHelp on function vals_greater_than_or_equal_to_threshold in module __main__:\n\nvals_greater_than_or_equal_to_threshold(vals, thresh)\n    This is the \"docstring\" of a function. It is optional but expected. It describes it's \n    purpose and the nature of the input and return values, as well as a sense of what it does.\n    More elaborate information should appear in external documentation packages with the function.\n    \n    PURPOSE: Given a list of values, compare each value against a threshold\n    \n    INPUTS\n    vals    list of ints or floats\n    thresh  int or float\n    \n    OUTPUT\n    bools  list of booleans\n\n\n\nOr, use the ? prefix:\n\n?vals_greater_than_or_equal_to_threshold\n\n\nSignature: vals_greater_than_or_equal_to_threshold(vals, thresh)\nDocstring:\nThis is the \"docstring\" of a function. It is optional but expected. It describes it's \npurpose and the nature of the input and return values, as well as a sense of what it does.\nMore elaborate information should appear in external documentation packages with the function.\nPURPOSE: Given a list of values, compare each value against a threshold\nINPUTS\nvals    list of ints or floats\nthresh  int or float\nOUTPUT\nbools  list of booleans\nFile:      /tmp/ipykernel_835366/2026213090.py\nType:      function",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>NB: Introduction to Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Functions.html#lets-try-out-our-function",
    "href": "notebooks/M04_PythonFunctions/M04-01-Functions.html#lets-try-out-our-function",
    "title": "NB: Introduction to Functions",
    "section": "Let’s try out our function",
    "text": "Let’s try out our function\nThe function body used a list comprehension for the comparison:\n[val &gt;= thresh for val in vals]\nValidate that it works for integers:\n\nx = [3, 4]\nthr = 4\n\nvals_greater_than_or_equal_to_threshold(x, thr)\n\n[False, True]\n\n\nValidate that it works for floats:\n\nx = [3.0, 4.2]\nthr = 4.2\n\nvals_greater_than_or_equal_to_threshold(x, thr)\n\n[False, True]\n\n\nThis gives correct results and does exactly what we want.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>NB: Introduction to Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Functions.html#passing-parameters",
    "href": "notebooks/M04_PythonFunctions/M04-01-Functions.html#passing-parameters",
    "title": "NB: Introduction to Functions",
    "section": "Passing Parameters",
    "text": "Passing Parameters\nAll functions may take \\(0\\) or more arguments, also called parameters.\nFunctions need to be called with correct number of parameters.\nThis function requires two params, but the function call includes only one param.\n\ndef func_with_args(x, y):\n    return x + y\n\n\nfunc_with_args(10)\n\nTypeError: func_with_args() missing 1 required positional argument: 'y'\n\n\n\nParameter Order\nWhen calling a function, parameter order matters.\n\ndef fcn_swapped_args(x, y):\n    out = 5 * x + y\n    return out\n\n\nx = 1\ny = 2\n\n\nfcn_swapped_args(x, y)\n\n7\n\n\n\nfcn_swapped_args(y, x)\n\n11",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>NB: Introduction to Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Functions.html#named-parameters",
    "href": "notebooks/M04_PythonFunctions/M04-01-Functions.html#named-parameters",
    "title": "NB: Introduction to Functions",
    "section": "Named Parameters",
    "text": "Named Parameters\nGenerally it’s best to keep parameters in order.\nHowever, You can swap the order by putting the parameter names in the function call.\n\nfcn_swapped_args(y=y, x=x)\n\n\nWeirdness Alert\nNote that the same name can be used for the parameter names and the variables passed to them.\nThe names themselves have nothng to do with each other!\nIn other words, just because a function names an argument foo,\nthe variables passed to it don’t have to name foo or anything like it.\nThey can even be named the same thing—it does not matter.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>NB: Introduction to Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Functions.html#unpacking-list-likes-with-args",
    "href": "notebooks/M04_PythonFunctions/M04-01-Functions.html#unpacking-list-likes-with-args",
    "title": "NB: Introduction to Functions",
    "section": "Unpacking List-likes with *args",
    "text": "Unpacking List-likes with *args\nThe * prefix operator can be passed to avoid specifying the arguments individually.\n\ndef show_arg_expansion(*models):\n    \n    print(\"models          :\", models)\n    print(\"input arg type  :\",  type(models))\n    print(\"input arg length:\", len(models))\n    print(\"-----------------------------\")\n    \n    for mod in models:\n        print(mod)    \n\nWe can pass a tuple of values to the function …\n\nshow_arg_expansion(\"logreg\", \"naive_bayes\", \"gbm\")\n\nmodels          : ('logreg', 'naive_bayes', 'gbm')\ninput arg type  : &lt;class 'tuple'&gt;\ninput arg length: 3\n-----------------------------\nlogreg\nnaive_bayes\ngbm\n\n\nYou can also pass a list to the function.\nIf you want the elements unpacked, put * before the list.\n\nmodels = [\"logreg\", \"naive_bayes\", \"gbm\"]\nshow_arg_expansion(*models)\n\nmodels          : ('logreg', 'naive_bayes', 'gbm')\ninput arg type  : &lt;class 'tuple'&gt;\ninput arg length: 3\n-----------------------------\nlogreg\nnaive_bayes\ngbm\n\n\nThis approach allows your function to accept an arbitrary number of arguments.\n\nshow_arg_expansion('a b c d e f g'.split())\n\nmodels          : (['a', 'b', 'c', 'd', 'e', 'f', 'g'],)\ninput arg type  : &lt;class 'tuple'&gt;\ninput arg length: 1\n-----------------------------\n['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\n\nThe reverse is true, too.\nYou can use the * prefix to pass list-like objects to a function that specifies its arguments.\n\ndef arg_expansion_example(x, y):\n    return x**y\n\n\nmy_args = [2, 8]\narg_expansion_example(*my_args)\n\n256\n\n\nBut, the passed object must be the right length.\n\nmy_args2 = [2, 8, 5]\narg_expansion_example(*my_args2)\n\nTypeError: arg_expansion_example() takes 2 positional arguments but 3 were given",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>NB: Introduction to Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Functions.html#default-arguments",
    "href": "notebooks/M04_PythonFunctions/M04-01-Functions.html#default-arguments",
    "title": "NB: Introduction to Functions",
    "section": "Default Arguments",
    "text": "Default Arguments\nUse default arguments to set the value of arguments when left unspecified.\n\ndef show_results(precision, printing=True):\n    precision = round(precision, 2)\n    if printing:\n      print('precision =', precision)\n    return precision\n\n\npr = 0.912\nres = show_results(pr)\n\nprecision = 0.91\n\n\n\nfoo = show_results(pr, False)\n\nThe function call didn’t specify printing, so it defaulted to True.\nNOTE: Default arguments must follow non-default arguments. This causes trouble:\n\ndef show_results(precision, printing=True, uhoh):\n    precision = round(precision, 2)\n    if printing:\n      print('precision =', precision)\n    return precision\n\nSyntaxError: non-default argument follows default argument (830346004.py, line 1)",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>NB: Introduction to Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Functions.html#returning-values",
    "href": "notebooks/M04_PythonFunctions/M04-01-Functions.html#returning-values",
    "title": "NB: Introduction to Functions",
    "section": "Returning Values",
    "text": "Returning Values\nFunctions are not required to have return statement.\nIf there is no return statement, a function returns None.\nFunctions can return no value (None), one value, or many.\nMany values are returned as a tuple.\nAny Python object can be returned.\n\n## returns None, and prints.\n\ndef fcn_nothing_to_return(x, y):\n    out = 'nothing to see here!'\n    print(out)\n\n\nfcn_nothing_to_return(x, y)\n\nnothing to see here!\n\n\n\nr = fcn_nothing_to_return(1, 1)\nprint(r)\n\nnothing to see here!\nNone\n\n\n\n## returns three values\n\ndef negate_coords(x, y, z):\n    return -x, -y, -z \n\n\na, b, c = negate_coords(10, 20, 30)\nprint('a =', a)\nprint('b =', b)\nprint('c =', c)\n\na = -10\nb = -20\nc = -30\n\n\n\nfoo = negate_coords(10, 20, 30)\n\n\nfoo, len(foo)\n\n((-10, -20, -30), 3)\n\n\nIf you don’t need an output, use the dummy variable _\n\nd, e, _ = negate_coords(10,20,30)\nprint('d =', d)\nprint('e =', e)\n\nd = -10\ne = -20\n\n\nNote: It’s generally a good idea to include return statements, even if not returning a value.\nThis shows that you did not forget to consider the return value.\nYou can use return or return None.\nFunctions can contain multiple return statements.\nThese may be used under different logical conditions.\n\ndef absolute_value(num):\n    if num &gt;= 0:\n        return num\n    return -num\n\n\nabsolute_value(-4)\n\n4\n\n\n\nabsolute_value(4)\n\n4\n\n\nFor non-negative values, the first return is reached.\nFor negative values, the second return is reached.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>NB: Introduction to Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-01-Functions.html#function-design",
    "href": "notebooks/M04_PythonFunctions/M04-01-Functions.html#function-design",
    "title": "NB: Introduction to Functions",
    "section": "Function Design",
    "text": "Function Design\nA function is not just a bag of code!\nSome good practices for creating and using functions:\n\ndesign a function to do one thing\n\nMake them as simple as possible, which makes them:\n\nmore comprehensible\neasier to maintain\nreusable\n\nThis helps avoid situations where a team has 20 variations of similar functions.\nGive your function a good name.\n\nIt should reflect the action it performs.\nBe consistent in your naming conventions.\nA name like compute_variances_sort_save_print suggests the function is overworked!\n\nIf the function compute_variances also produces plots and updates variables, it will cause confusion.\nAlways give your function a docstring - Particularly important since indicating data types is not required.\n- As a side note, you can include this information by using type annotation.\nFinally, at some point you may be interested to learn some of the formatting languages that have been developed to write docstrings. See Lutz 2019 and this web page about Documenting Python Code for more info.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>NB: Introduction to Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Importing.html",
    "href": "notebooks/M04_PythonFunctions/M04-02-Importing.html",
    "title": "NB: Importing Functions",
    "section": "",
    "text": "Importing\nCalling a function from the math library is straightforward:\nFor example:\nPut all of your import statements at the very top of your code, before anything else, other than any header comments (which you should have).\nHere are some example math functions:\nimport math # Typically best to put this line of code at the TOP of the file\nmath.sqrt(12)\n\n3.4641016151377544\nmath.floor(2.5) # returns largest whole number less than the argument\n\n2\nHere’s an example using the random library (a class).\nimport random # Typically best to put this line of code at the TOP of the file\nrandom.random()# will return a number between 0 and 1 \n\n0.3599068479674543\nrandom.randint(1, 100) # this will return a random integer in the range 1-100\n\n18",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NB: Importing Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Importing.html#importing",
    "href": "notebooks/M04_PythonFunctions/M04-02-Importing.html#importing",
    "title": "NB: Importing Functions",
    "section": "",
    "text": "Import Python’s Math library with the command import math\nCall methods from the imported math object using “dot” notation, that is, .(any parameters).\n\n\nmath.sqrt(12)",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NB: Importing Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Importing.html#importing-specific-functions",
    "href": "notebooks/M04_PythonFunctions/M04-02-Importing.html#importing-specific-functions",
    "title": "NB: Importing Functions",
    "section": "Importing Specific Functions",
    "text": "Importing Specific Functions\nIf you know what specifics function you are going to use from a library, you can import them directly, like so:\nfrom math import sqrt\nThis has two effects: 1. It reduces the memory used by the library in your program. 2. It allows you to call the function directly, with the object dot notation.\n\nfrom math import sqrt\n\n\nsqrt(99)\n\n9.9498743710662",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NB: Importing Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-02-Importing.html#aliasing",
    "href": "notebooks/M04_PythonFunctions/M04-02-Importing.html#aliasing",
    "title": "NB: Importing Functions",
    "section": "Aliasing",
    "text": "Aliasing\nTo avoid having the function name conflict with an existing function in your program,\nyou can alias the imported function like so:\n\nfrom math import sqrt as SquareRoot\n\n\nSquareRoot(65000)\n\n254.95097567963924",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>NB: Importing Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html",
    "href": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html",
    "title": "NB: Lambda Functions",
    "section": "",
    "text": "Introduction\nPython lambda functions are small, informal functions. They don’t get a name.\nThe are “anonymous.”\nFrom Lutz 2019:\nThe general form of a lambda function is:\nlambda x: x\n\n&lt;function __main__.&lt;lambda&gt;(x)&gt;\nYou can call the function like this:\n(lambda x: x)(2)\n\n2\nincrement x\n(lambda x: x+1)(5)\n\n6\nsum two variables\nlambda x, y: x + y\n\n&lt;function __main__.&lt;lambda&gt;(x, y)&gt;",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>NB: Lambda Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#introduction",
    "href": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#introduction",
    "title": "NB: Lambda Functions",
    "section": "",
    "text": "Besides the def statement, Python also provides an expression form that generates function objects. Because of its similarity to a tool in the Lisp language, it’s called lambda. Like def, this expression creates a function to be called later, but it returns the function instead of assigning it to a name. This is why lambdas are sometimes known as anonymous (i.e., unnamed) functions. In practice, they are often used as a way to inline a function definition, or to defer execution of a piece of code.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>NB: Lambda Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#assigned-to-a-variable",
    "href": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#assigned-to-a-variable",
    "title": "NB: Lambda Functions",
    "section": "Assigned to a Variable",
    "text": "Assigned to a Variable\nEven though they don’t get a name, they can be assigned to variables.\nHere, a lambda function gets assigned to sum_two_vars.\n\nsum_two_vars = lambda x, y: x + y\n\n\nsum_two_vars(2,4)\n\n6\n\n\nCheck if a value is non-negative\n\nis_non_negative = lambda x: x &gt;= 0\n\n\nis_non_negative(-9)\n\nFalse\n\n\n\nis_non_negative(0)\n\nTrue\n\n\nPackage first element and all data into tuple\n\npack_first_all = lambda x: (x[0], x)\n\n\ncasado = ('rice','beans','salad','plaintain','chicken') # a typical Costa Rican dish\n\npack_first_all(casado)\n\n('rice', ('rice', 'beans', 'salad', 'plaintain', 'chicken'))\n\n\nCheck for keyword “dirty”\n\nis_dirty = lambda txt: 'dirty' in txt\n\n\nkitchen_inspection = 'dirty dishes'\nis_dirty(kitchen_inspection)\n\nTrue\n\n\n\nkitchen_inspection = 'pretty clean!'\nis_dirty(kitchen_inspection)\n\nFalse\n\n\n**pass *args for unspecified number of arguments**\n\n(lambda *args: sum(args))(1,2,3)\n\nSyntaxError: invalid syntax (1364996940.py, line 1)",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>NB: Lambda Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#using-lambda",
    "href": "notebooks/M04_PythonFunctions/M04-03-LambdaFunctions.html#using-lambda",
    "title": "NB: Lambda Functions",
    "section": "Using Lambda",
    "text": "Using Lambda\nLambda functions are often used in Pandas.\nWe will discuss there use in more detail when we get to that topic.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>NB: Lambda Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html",
    "title": "NB: Recursion",
    "section": "",
    "text": "Introduction\nA recursive function is a function that calls itself.\nThis is weird, since it does not seem possible. How can a definition refer to itself?\nIn philosophy, this is expressed in the Barber’s Paradox:\nFormally, it is a type of self-reference, like This sentence is false.\nA Cute Definition\nrecursion - the art of defining something (at least partly) in terms of itself, which is a naughty no-no in dictionaries but often works out okay in computer programs if you’re careful not to recurse forever (which is like an infinite loop with more spectacular failure modes).\nSource: PerlDoc",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>NB: Recursion</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#introduction",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#introduction",
    "title": "NB: Recursion",
    "section": "",
    "text": "The barber is the one who shaves all those, and those only, who do not shave themselves. Does the barber shave himself?",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>NB: Recursion</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#a-formal-definition",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#a-formal-definition",
    "title": "NB: Recursion",
    "section": "A Formal Definition",
    "text": "A Formal Definition\nIn mathematics and computer science, a class of objects or methods exhibits recursive behavior when it can be defined by two properties:\nA simple base case (or cases): a terminating scenario that does not use recursion to produce an answer.\nA recursive step: a set of rules that reduces all successive cases toward the base case.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>NB: Recursion</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#as-seen-in-nature",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#as-seen-in-nature",
    "title": "NB: Recursion",
    "section": "As Seen in Nature",
    "text": "As Seen in Nature\nRecursion occurs naturally when a process applies a rule to itself successively.\nWe see this in fractals.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>NB: Recursion</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#infinite-loops-and-stack-overflows",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#infinite-loops-and-stack-overflows",
    "title": "NB: Recursion",
    "section": "Infinite Loops and Stack Overflows",
    "text": "Infinite Loops and Stack Overflows\nEvery recursive function must have a base condition that stops the recursion or else the function calls itself infinitely.\nThe Python interpreter limits the depths of recursion to help avoid infinite recursions, resulting in stack overflows.\nThe call stack is where information is stored relating to the active subroutines in a program.\nThe call stack has a limited amount of available memory. When excessive memory consumption occurs on the call stack, it results in a stack overflow error.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>NB: Recursion</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#a-note-of-caution",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#a-note-of-caution",
    "title": "NB: Recursion",
    "section": "A Note of Caution",
    "text": "A Note of Caution\nSo, Recursion is cool, but is expensive and complicated.\nRecursive functions can usually be implemented by traditional loops.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>NB: Recursion</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#example-computing-factorials",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#example-computing-factorials",
    "title": "NB: Recursion",
    "section": "Example: Computing Factorials",
    "text": "Example: Computing Factorials\nSource\nThe factorial of a number \\(n\\) is the product of all the integers from \\(1\\) to \\(n\\).\nFor example, the factorial of \\(5\\) (denoted as \\(5!\\)) is \\(1\\times2\\times3\\times4\\times5 = 120\\).\nLet’s implement this in code using a recursive function.\n\ndef factorial(x):\n    \"Finds the factorial of an integer using recursion\"\n    if x == 1: # Base condition\n        return 1\n    else:\n        return x * factorial(x-1)\n\n\nn = 5\n\n\n%time factorial(n)\n\nCPU times: user 4 µs, sys: 0 ns, total: 4 µs\nWall time: 5.96 µs\n\n\n120\n\n\nAs a while loop\n\ndef factorial_while(x):\n    \"Finds the factorial of an integer using a while loop\"\n    f = x\n    while x &gt; 1:\n        x -= 1\n        f *= x\n    return f\n\n\n%time factorial_while(n)\n\nCPU times: user 4 µs, sys: 0 ns, total: 4 µs\nWall time: 7.15 µs\n\n\n120\n\n\nAs a for loop\n\ndef factorial_for(x):\n    \"Finds the factorial of an integer using a for loop\"\n    f = x\n    for i in range(1, x):\n        x -= 1\n        f *= x\n    return f\n\n\n%time factorial_for(n)\n\nCPU times: user 3 µs, sys: 0 ns, total: 3 µs\nWall time: 5.25 µs\n\n\n120\n\n\n\nCompare functions as \\(n\\) increases\nIncrease \\(n\\) to \\(50\\)\n\nn = 50\n%time factorial(n)\n\nCPU times: user 5 µs, sys: 2 µs, total: 7 µs\nWall time: 11 µs\n\n\n30414093201713378043612608166064768844377641568960512000000000000\n\n\n\n%time factorial_while(n)\n\nCPU times: user 5 µs, sys: 1 µs, total: 6 µs\nWall time: 8.11 µs\n\n\n30414093201713378043612608166064768844377641568960512000000000000\n\n\n\n%time factorial_for(n)\n\nCPU times: user 7 µs, sys: 0 ns, total: 7 µs\nWall time: 8.58 µs\n\n\n30414093201713378043612608166064768844377641568960512000000000000\n\n\nIncrease \\(n\\) to \\(500\\)\n\nn = 500\n\n\n%time factorial(n)\n\nCPU times: user 117 µs, sys: 0 ns, total: 117 µs\nWall time: 124 µs\n\n\nn\n\n\n%time factorial_while(n)\n\nCPU times: user 62 µs, sys: 21 µs, total: 83 µs\nWall time: 84.6 µs\n\n\nn\n\n\n%time factorial_for(n)\n\nCPU times: user 69 µs, sys: 0 ns, total: 69 µs\nWall time: 71 µs\n\n\nn\n\nIncrease \\(n\\) to \\(1000\\)\n\nn = 1000\n\n\n%time factorial(n)\n\nCPU times: user 228 µs, sys: 77 µs, total: 305 µs\nWall time: 307 µs\n\n\nn\n\n\n%time factorial_while(n)\n\nCPU times: user 237 µs, sys: 0 ns, total: 237 µs\nWall time: 238 µs\n\n\nn\n\n\n%time factorial_for(n)\n\nCPU times: user 164 µs, sys: 54 µs, total: 218 µs\nWall time: 220 µs\n\n\n
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>NB: Recursion</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#example-the-fibonacci-sequence",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#example-the-fibonacci-sequence",
    "title": "NB: Recursion",
    "section": "Example: The Fibonacci sequence",
    "text": "Example: The Fibonacci sequence\n\\(Fib(0) = 0\\) (base case 1)\n\\(Fib(1) = 1\\) (base case 2)\nFor all integers \\(n &gt; 1\\), \\(Fib(n) = Fib(n − 1) + Fib(n − 2)\\)\nwhere \\(n\\) is the index of the number in the series.\nBasically, each number in the is the addition of the previous two numbers.\n\n\n\n\\(n\\)\n0\n1\n2\n3\n4\n5\n6\n7\n\n\n\n\n\\(f(n)\\)\n0\n1\n1\n2\n3\n5\n8\n13\n\n\n\n\ndef Fibonacci(n):\n    \"Compute a Fibonacci Sequence using recursion\"\n\n    # If n is negative\n    if n &lt; 0:\n        print(\"Incorrect input. Value must be 0 or greater.\")\n\n    # If n is 0\n    elif n == 0:\n        return 0\n\n    # If n is 1\n    elif n == 1:\n        return 1\n\n    else:\n        return Fibonacci(n - 1) + Fibonacci(n - 2)\n\n\nn = 9\n\n\nFibonacci(9)\n\n34\n\n\n\nfor n in range(20):\n    print(Fibonacci(n), end=\" \")\n\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 \n\n\n\nAs a for loop\n\ndef fibber(r:int = 10):\n    \"\"\"\n    Computes a Fibonacci Sequence using a for loop. \n    Returns a string as a comma-limited series.\n    \"\"\"\n    seq = [0,1] \n    for n in range(2, r):\n        seq.append(seq[n-1] + seq[n-2])\n    print(*seq)\n\n\nfibber(20)\n\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>NB: Recursion</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#aside-a-general-sequence-function",
    "href": "notebooks/M04_PythonFunctions/M04-04-RecursiveFunctions.html#aside-a-general-sequence-function",
    "title": "NB: Recursion",
    "section": "Aside: A General Sequence Function",
    "text": "Aside: A General Sequence Function\nRecursive functions are often used to produce mathematical sequences, but since they have limits on depth, they are of limited use for this purpose.\nHere is a function that can combine many sequences using two sequence parameters: * The initial state of the sequence, represented as the list seq. * For example, in the Fibonacci sequence, seq is [1, 1, 2] * The function to apply to the sequence at each iteration, represneted as a lambda function with the arguments x and i for the the sequence list seq and the iteration number respectively. * For example, in the Fibonacci sequence the kernel function is lambda x, i: x[i-1] + x[i-2]\n\ndef sequencer(n:int = 10, seq=[1, 1, 2], kernel=lambda x, i: x[i-1] + x[i-2]):\n    \"\"\"\n    Computes a Sequence using a for loop. \n    \n    Parameter n in integer which must be &gt; 3. Defaults to 10.\n    Parameter seq is as list in the initial state of the sequence. Must have at least one value. Defaults to Fibonacci [1,1,2]\n    Parameter kernel is the kernel function applied to the series at each iteration. x stands for the seq list, i to the iteration number. Defaults to lambda x, i: x[i-1] + x[i-2]\n    \n    Returns a string as a comma-limited series.\n    \"\"\"\n    \n    for i in range(len(seq), n): seq.append(kernel(seq, i))\n    return ', '.join([str(x) for x in seq])\n\n\nn = 8\n\n\n%time sequencer(n, [0], lambda x, i: i)\n\nCPU times: user 10 µs, sys: 0 ns, total: 10 µs\nWall time: 12.2 µs\n\n\n'0, 1, 2, 3, 4, 5, 6, 7'\n\n\nThe series of positive integers\n\nsequencer(n, [1], lambda x, i: x[i-1] + 1)\n\n'1, 2, 3, 4, 5, 6, 7, 8'\n\n\nThe series of even numbers\n\nsequencer(n, [2], lambda x, i: x[i-1] + 2)\n\n'2, 4, 6, 8, 10, 12, 14, 16'\n\n\nThe series of odd numbers\n\nsequencer(n, [1], lambda x, i: x[i-1] + 2)\n\n'1, 3, 5, 7, 9, 11, 13, 15'\n\n\nThe series of Fibonacci numbers\n\nsequencer(n, [1,1,2], lambda x, i: x[i-1] + x[i-2])\n\n'1, 1, 2, 3, 5, 8, 13, 21'\n\n\nThe series of Squares\n\nsequencer(n, [2], lambda x, i: x[i-1]**2)\n\n'2, 4, 16, 256, 65536, 4294967296, 18446744073709551616, 340282366920938463463374607431768211456'",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>NB: Recursion</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html",
    "title": "NB: Variable Scope",
    "section": "",
    "text": "Overview\nA variable’s scope is the part of a program where it is visible.\nWhen a variable is defined inside of a function, it is not visible outside of the function. * We say such variables are local to the function. * They are also removed from memory when the function completes.\nWhen a variable is defined outside of any function in a script, it is visible to any function inside of the script * We say such variables are global to the functions in the file or context in which the variables are defined. * A function can replace a global variable with local variable by defining that variable. In this case, a variable can have global and local versions in the same program.\nSometimes variable scope is called lexical scope.\nIt is helpful to have a good understanding of scope to avoid surprises and confusion.\nThe concept is easier than it may look in the abstract. Let’s look at some examples where we vary the use of local and global definitions of x.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>NB: Variable Scope</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#overview",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#overview",
    "title": "NB: Variable Scope",
    "section": "",
    "text": "Scope refers to the coding region, such as a function block, from which a particular Python object is accessible.\nVisible means available or usable to the code block in question.\nIf a variable is in scope to a function, it is visible the function.\nIf it is out of scope to a function, it is not visible the function.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>NB: Variable Scope</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#lutz-on-scoping",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#lutz-on-scoping",
    "title": "NB: Variable Scope",
    "section": "Lutz on Scoping",
    "text": "Lutz on Scoping\nHere’s an excerpt from Lutz, Chapter 17. Please read the whole thing.\nThe enclosing module is a global scope. Each module is a global scope—that is, a namespace in which variables created (assigned) at the top level of the module file live. Global variables become attributes of a module object to the outside world after imports but can also be used as simple variables within the module file itself.\nThe global scope spans a single file only. Don’t be fooled by the word “global” here—names at the top level of a file are global to code within that single file only. There is really no notion of a single, all-encompassing global file-based scope in Python. Instead, names are partitioned into modules, and you must always import a module explicitly if you want to be able to use the names its file defines. When you hear “global” in Python, think “module.”\nAssigned names are local unless declared global or nonlocal. By default, all the names assigned inside a function definition are put in the local scope (the namespace associated with the function call). If you need to assign a name that lives at the top level of the module enclosing the function, you can do so by declaring it in a global statement inside the function. If you need to assign a name that lives in an enclosing def, as of Python 3.X you can do so by declaring it in a nonlocal statement.\nAll other names are enclosing function locals, globals, or built-ins. Names not assigned a value in the function definition are assumed to be enclosing scope locals, defined in a physically surrounding def statement; globals that live in the enclosing module’s namespace; or built-ins in the predefined built-ins module Python provides.\nEach call to a function creates a new local scope. Every time you call a function, you create a new local scope—that is, a namespace in which the names created inside that function will usually live. You can think of each def statement (and lambda expression) as defining a new local scope, but the local scope actually corresponds to a function call. Because Python allows functions to call themselves to loop—an advanced technique known as recursion and noted briefly in Chapter 9 when we explored comparisons—each active call receives its own copy of the function’s local variables. Recursion is useful in functions we write as well, to process structures whose shapes can’t be predicted ahead of time; we’ll explore it more fully in Chapter 19.\nAnd here is a nice visualization of scopes:\n\n\n\nCar with tinted glass\n\n\nPlease read Lutz, Chapter 17 for a good overview of scoping.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>NB: Variable Scope</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#the-tinted-glass-metaphor",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#the-tinted-glass-metaphor",
    "title": "NB: Variable Scope",
    "section": "The Tinted Glass Metaphor",
    "text": "The Tinted Glass Metaphor\n\nSo, code regions within a program are like vehicles with tinted glass: * Passengers can see outside, but outsiders can’t see inside. * Passengers in a vehicle can let outsiders look in by lowering the window.\nOr something. Lile models, all metaphors are wrong, but some are useful. :-)",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>NB: Variable Scope</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-1",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-1",
    "title": "NB: Variable Scope",
    "section": "Example 1",
    "text": "Example 1\nx defined outside a function but used inside of it\nIn the code below: * x is global and seen from inside the function.\n* a is local to the function. trying to print outside function throws error.\nNote that arguments are essentially locally defined variables.\n\nx = 10\n\ndef scope_func1(a):\n    out = x + a\n    return out\n\nThe following works because x is global and functions can access globals so long as they don’t reassign the variable name.\n\ny = scope_func1(6)\nprint(y)\n\n16\n\n\nThe following fails because a local and not visible outside the function.\n\nprint(a)\n\nNameError: name 'a' is not defined",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>NB: Variable Scope</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-2",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-2",
    "title": "NB: Variable Scope",
    "section": "Example 2",
    "text": "Example 2\nx defined both outside and inside function, and used inside the function\nThis function reassigns x, so it becomes local.\nNote that a variable becomes local once it is used in an assignment statement within a function, or if it the name of an argument.\n\nx = 10 # Global\n\ndef scope_func2(a):\n\n    x = 20 # Local\n    print('x from inside:', x)\n    \n    out = x + a\n    \n    return out\n\n\ny = scope_func2(6)\nprint(y)\nprint('x from outside:', x)\n\nx from inside: 20\n26\nx from outside: 10",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>NB: Variable Scope</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-2a",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-2a",
    "title": "NB: Variable Scope",
    "section": "Example 2a",
    "text": "Example 2a\nHere we define x as an argument.\nThis has the same effect as defining it in the body of the function.\n\nx = 10 # Global\n\ndef scope_func2a(a, x=20): # Argment variables are local\n\n    print('x from inside:', x)\n    \n    out = x + a\n    \n    return out\n\n\nprint('x from outside before function:', x)\ny = scope_func2a(6)\nprint(y)\nprint('x from outside before function:', x)\n\nx from outside before function: 10\nx from inside: 20\n26\nx from outside before function: 10\n\n\nAs an argument, though, it can be assigned the value of the global.\nNevertheless, only the value is being passed between the global and local versions of x.\n\nx = 10 # Global\n\ndef scope_func2a(a, x=20):\n\n    print('x from inside before incremenet:', x)\n    x += 10\n    print('x from inside after incremenet:', x)\n    \n    out = x + a\n    \n    return out\n\n\nprint('x from outside before function:', x)\ny = scope_func2a(6, x)\nprint(y)\nprint('x from outside after function:', x)\n\nx from outside before function: 10\nx from inside before incremenet: 10\nx from inside after incremenet: 20\n26\nx from outside after function: 10",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>NB: Variable Scope</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-3",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#example-3",
    "title": "NB: Variable Scope",
    "section": "Example 3",
    "text": "Example 3\nx defined both outside and inside function, and used inside the function in both global and local modes\nThis one is interesting. It fails, but it’s not clear why at first.\n\nx = 10\n\ndef scope_func3(a):\n    print('x from fcn, before local definition:', x) # Global use of x\n    x = 20 # Local use of x\n    print('x from fcn, after local definition:', x)\n    out = x + a\n    return out\n\n\nprint('x from outside before local definition:', x)\nscope_func3(6)\nprint('x from outside after local definition:', x)\n\nx from outside before local definition: 10\n\n\nUnboundLocalError: local variable 'x' referenced before assignment\n\n\n\nx = 10\n\ndef scope_func3a(a):\n    print('x from fcn, before local definition:', x) # Global use of x\n    # x = 20 # Local use of x\n    # print('x from fcn, after local definition:', x)\n    out = x + a\n    return out\n\n\nprint('x from outside before local definition:', x)\nscope_func3a(6)\nprint('x from outside after local definition:', x)\n\nx from outside before local definition: 10\nx from fcn, before local definition: 10\nx from outside after local definition: 10\n\n\nThe error can be fixed by referencing x as global inside function.\n\nx = 10\n\ndef scope_func4(a):\n    global x\n    \n    print('x from inside, before local definition:', x)\n    x = 20\n    print('x from inside, after local definition:', x)\n    \n    out = x + a\n    return out\n\n\nprint('x from outside, before local definition:', x)\ny = scope_func4(6)\nprint(y)\nprint('x from outside, after local definition:', x)\n\nx from outside, before local definition: 10\nx from inside, before local definition: 10\nx from inside, after local definition: 20\n26\nx from outside, after local definition: 20\n\n\nNote that the two instances of the variable z coexist in the same script because of the rules of scoping.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>NB: Variable Scope</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#local-global-conflicts",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#local-global-conflicts",
    "title": "NB: Variable Scope",
    "section": "Local / global conflicts",
    "text": "Local / global conflicts\nWhat will calling guess() do?\nHint: “If you assign a name in any way within a def, it will become a local to that function by default.” (Lutz)\n\nx = 10\n\ndef guess():\n    x += 10 \n    print(x)\n\n\nguess()\n\nUnboundLocalError: local variable 'x' referenced before assignment\n\n\nConsider the following expression, which is the same as the unary operation inside of the function guess().\n\nx = x + 10\n\nThe x on the left is local, since it is being defined inside the function.\nHowever, the x on the right is assumed to already be defined, and so is global.\nIn effect, Python is presented with a contradiction and so throws an error.\nWe will see that R does not do this; it just goes with the global.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>NB: Variable Scope</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#nonlocal",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#nonlocal",
    "title": "NB: Variable Scope",
    "section": "Nonlocal",
    "text": "Nonlocal\nIf a variable is assigned in an enclosing def, it is nonlocal to nested functions.\nThe nonlocal keyword is similar to global, except that it refers to the scope of the enclosing function, not the script that contains the funtions.\n\nx = 10 # Global\ndef func1(): # Enclosing function\n    x = 20 # Local to function; \"Nonlocal\" to nested function\n    def func1a():\n        x = 30 # Local to nested function\n        print(x)\n    func1a()\n    print(x)\n\n\nprint(x)\nfunc1()\nprint(x)\n\n10\n30\n20\n10\n\n\n\nx = 10\ndef func2():\n    x = 20\n    def func2a():\n        nonlocal x\n        x = 30\n        print(x)\n    func2a()\n    print(x)\n\n\nprint(x) # 1\nfunc2()\nprint(x) # 4\n\n10\n30\n30\n10\n\n\n\nx = 10\ndef func3():\n    x = 20\n    def func3a():\n        global x\n        x = 30\n        print(x)\n    func3a()\n    print(x)\n\n\nprint(x)\nfunc3()\nprint(x)\n\n10\n30\n20\n30",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>NB: Variable Scope</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#namespaces",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#namespaces",
    "title": "NB: Variable Scope",
    "section": "Namespaces",
    "text": "Namespaces\nDefinitions of scope make reference to namespaces. Scope and namespaces are closely intertwined concepts. Sometimes it is assumed that the reader knows what this means.\nIf you’ve never heard of namespaces, or are unsure of what they are, here’s a brief explanation.\nA namespace is a system that allows for a unique name to associated with each and every object in a Python program. * Remember that an object can be anything in Python, not just variable, e.g. a function or a class. * Python maintains namespaces internally as dictionaries.\nA good analogy to a namespace system is the file system on a computer. You can have files of the same name so long as they are in different folders. The complete name of the file is actually the filename and the names of its parent folders, i.e. the path to the file in the file system.\nAnother anology is in human names – personal names and family names, i.e. first and last names in European countries. These in turn might be contained by larger social groupings.\nFinally, another analogy is home addresses – house numbers and street names can be reused based on their “path” in the tree of geographic entities that include cities, states, nations, etc.\nSimilarly, Python understands what exact method or variable one is trying to point to in the code, depending upon the namespace.\nNote that in each of these cases, the data structure is a directed acyclic graph (DAG), which is universal structure for organizing unique names.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>NB: Variable Scope</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-05-Scope.html#some-visualizations",
    "href": "notebooks/M04_PythonFunctions/M04-05-Scope.html#some-visualizations",
    "title": "NB: Variable Scope",
    "section": "Some Visualizations",
    "text": "Some Visualizations\n\nThe same object name can be present in multiple namespaces as isolation between the same name is maintained by their namespace.\n\nSource: “Namespaces and Scope in Python” (GFG).",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>NB: Variable Scope</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html",
    "title": "NB: Functions Calling Functions",
    "section": "",
    "text": "Basic Insight\nFunctions contain any code, so they can contain functions. * Functions can call other functions * Functions can define new functions\nWe create functions that call functions in order to break a complex process into components. * Some functions focus on simple component processes * Other functions combine these into higher order processes * Some functions may be focused on computation, while others may be focused on interacting with users or data sources * We can think of this a division of labor, or “separation of concerns,” among functions\nWhen you create groups of functions, they often form natural groups that associated with a common process or task. * These function groups often share variables in addition to calling each ohter\nLet’s look at some examples to illustrate these points.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>NB: Functions Calling Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-1-converting-temperatures",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-1-converting-temperatures",
    "title": "NB: Functions Calling Functions",
    "section": "Example 1: Converting Temperatures",
    "text": "Example 1: Converting Temperatures\nHere are three functions that work together to make a temperature converter.\nNotice how the last function integrates the first two.\n\ndef f_to_c(temp):  \n    \"\"\"\n    Converts F to C and returns a rounded result.\n    Expects an integer and returns an integer.\n    \"\"\"\n    return round((temp - 32) * (5/9))\n    \ndef c_to_f(temp):  \n    \"\"\"\n    Converts C to F and returns a rounded result.\n    Expects an integer and returns an integer.\n    \"\"\"\n    return round(temp * (9/5) + 32)\n    \ndef convert(temp, scale): \n    \"\"\"\n    Combines conversion functions into a two-way converter.\n    Expects a souce temp (int) and a target scale ('f' or 'c').\n    \"\"\"\n    if scale.lower() == \"c\":\n        return f_to_c(temp)  # function call to f_to_c\n    else:\n        return c_to_f(temp)  # function call to c_to_f\n\nNow, here is function that combines the above functions into a user-facing interface to the other functions.\n\ndef convert_app():\n    \"\"\"\n    Provides a user-interface to the the conversion functions.\n    \"\"\"\n    \n    # Get user input\n    temp = int(input(\"Enter a temperature: \"))                \n    scale = input(\"Enter the scale to convert to: (c or f) \")[0].lower()\n    \n    # Infer source scale, to be used in the output message\n    if scale == 'c':\n        current_scale = 'f'\n    else:\n        current_scale = 'c'\n    \n    # Do the conversion\n    converted = convert(temp, scale)\n    \n    # Print results for user\n    print(f\"{temp}{current_scale.upper()} is equal to {converted}{scale.upper()}.\")\n\n\nconvert_app()\n\nEnter a temperature:  45\nEnter the scale to convert to: (c or f)  f\n\n\n45C is equal to 113F.\n\n\n\nA More Pythonic Solution\nWe replace if/then statements with dictionary logic.\n\n## Put your logic in the data structure\nconverters = {\n    'c': lambda t: (t - 32) * (5/9),\n    'f': lambda t: t * (9/5) + 32\n}\n\n\ndef convert_app2():\n    \n    # Input from user\n    source_temp  = int(input(\"Enter a temperature: \"))                \n    target_scale = input(\"Enter the scale to convert to: (c or f) \")\n    \n    # Internal computations\n    target_temp  = converters[target_scale](source_temp)\n    # source_scale = list(set(converters.keys()) - set(target_scale))[0]\n    source_scale = (set(converters.keys()) - set(target_scale)).pop()\n    \n    # Output to user\n    print(source_temp, source_scale, \"converted becomes:\" , round(target_temp), target_scale)\n\n\nconvert_app2()\n\nEnter a temperature:  45\nEnter the scale to convert to: (c or f)  f\n\n\n45 c converted becomes: 113 f",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>NB: Functions Calling Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-2-counting-vowels",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-2-counting-vowels",
    "title": "NB: Functions Calling Functions",
    "section": "Example 2: Counting Vowels",
    "text": "Example 2: Counting Vowels\n\n## Predicate functions - often used as helper functions that return True or False\n\ndef is_vowel(l):\n    if l == \"a\" or l == \"e\" or l == \"i\" or l == \"o\" or l == \"u\":\n        return True  # if the letter is a vowel, return True\n    else:\n        return False # else, return False\n        \ndef num_vowels(my_string):\n    my_string = my_string.lower()\n    count = 0\n    for i in range(len(my_string)): # for each character\n        if is_vowel(my_string[i]):  # call function above\n            count += 1              # increment count if true\n    return count\n    \ndef vcounter():\n    my_str = input(\"Enter a string: \")\n    vcount = num_vowels(my_str)\n    print(f\"There are {vcount} vowels in the string.\")\n\n\nvcounter()\n\nEnter a string:  This is a test.\n\n\nThere are 4 vowels in the string.\n\n\n\nA More Pythonic Solution\nWe can use a lambda function with a comprehension to replace the fisrt two functions above.\n\nvowel_count = lambda x: len([char for char in x.lower() if char in \"aeiou\"])\n\n\ntest_str = \"Whatever it is, it is what it is.\"\n\n\nvowel_count(test_str)\n\n10",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>NB: Functions Calling Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-3-calculating-tax",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#example-3-calculating-tax",
    "title": "NB: Functions Calling Functions",
    "section": "Example 3: Calculating Tax",
    "text": "Example 3: Calculating Tax\nWe write two related functions: * One to compute the tax based on a gross pay and a tax rate. * One to compute the net pay using the previous function.\nIn addition, we want to write some functions that use these functions to interact with a user. * One to get the input value of the gross pay and print the tax. * One to print the net pay based on the previous function.\nNote the division of labor, or “separation of concerns”, in these functions: * Some do calculative work * Some do interactive work\nTo compute tax, we have these data:\ngross_pay    tax_rate\n---------------------\n0   - 240    0%\n241 - 480    15%\n481 - more   28% \n\n\n\n\n\n\nThis time, we want to create a group of functions that expect some global variables to exist and use these instead of return statements.\n\n\nIn the code below, we globalize any variables that are assigned in our functions.\n\n\nThis allows them to be shared by all the other functions.\n\n\nNote that this is effective when our global environment – the containing script – contains only these functions.\n\n\nLater in this course, we will look at mechanisms to segment our code in this way.\n\n\n\n\ndef compute_tax():\n    \"\"\"\n    Computes tax rate and applies to gross pay to get tax.\n    Expects gross_apy to be defined globally.\n    Adds tax_rate and tax to globals for use by other functins.\n    \"\"\"\n\n    global tax_rate, tax\n\n    # Get rate by lower bound\n    if gross_pay &gt; 480:\n        tax_rate = .28\n    elif gross_pay &gt; 240:\n        tax_rate = .15\n    else:\n        tax_rate = 0\n        \n    tax = gross_pay * tax_rate\n            \ndef compute_net_pay():\n    \"\"\"\n    Computes net pay based on globals produced by compute_tax().\n    Expects gross_pay and tax to be defined globally.\n    Adds net_pay to to globals.\n    \"\"\"\n    \n    global net_pay\n    \n    net_pay = gross_pay - tax\n\ndef get_tax():   \n    \"\"\"\n    Computes and prints tax based on user input.\n    Essentially a wrapper around compute_tax().\n    Adds gross_pay to globals.\n    \"\"\"\n    \n    global gross_pay\n    \n    gross_pay = int(input(\"Enter your gross pay in dollars: \"))                            \n    \n    compute_tax()\n    \n    print(f\"Based on a tax rate of {round(tax_rate * 100)}%, the tax you owe on ${gross_pay} is ${round(tax)}.\")\n    \ndef get_net_pay():\n    \"\"\"\n    Computes and prints net pay based on globals.\n    \"\"\"\n    \n    compute_net_pay()\n    \n    print(f\"Your take home (net) pay is ${round(net_pay)}.\")\n    \ndef do_all():\n    \"Runs both user-facing functions.\"\n    get_tax()\n    get_net_pay()\n\n\nget_tax()\n\nEnter your gross pay in dollars:  50000\n\n\nBased on a tax rate of 28%, the tax you owe on $50000 is $14000.\n\n\n\nget_net_pay()\n\nYour take home (net) pay is $36000.\n\n\n\ndo_all()\n\nEnter your gross pay in dollars:  100000\n\n\nBased on a tax rate of 28%, the tax you owe on $100000 is $28000.\nYour take home (net) pay is $72000.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>NB: Functions Calling Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#concluding-observations",
    "href": "notebooks/M04_PythonFunctions/M04-06-FunctionsCallingFunctions.html#concluding-observations",
    "title": "NB: Functions Calling Functions",
    "section": "Concluding Observations",
    "text": "Concluding Observations\n\nNotice how each example has functions that build on each other.\nThese functions share both data and a general goal.\nThe fact that data and functions go together is the motivation for creating classes.",
    "crumbs": [
      "M04 Functions",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>NB: Functions Calling Functions</span>"
    ]
  },
  {
    "objectID": "modules/m05/m05-intro.html",
    "href": "modules/m05/m05-intro.html",
    "title": "M05 NumPy",
    "section": "",
    "text": "Topics",
    "crumbs": [
      "M05 NumPy"
    ]
  },
  {
    "objectID": "modules/m05/m05-intro.html#topics",
    "href": "modules/m05/m05-intro.html#topics",
    "title": "M05 NumPy",
    "section": "",
    "text": "Numpy and its role in the Python data science ecosystem\nNumpy Arrays\nArray indexing, slicing, and broadcasting\nAggregation\nTiming the difference between NumPy and plain old Python",
    "crumbs": [
      "M05 NumPy"
    ]
  },
  {
    "objectID": "modules/m05/m05-intro.html#readings",
    "href": "modules/m05/m05-intro.html#readings",
    "title": "M05 NumPy",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\nMcKinney 2023, Chapter 4: Numpy Basics\n\n\n\nOptional\n\nMcKinney 2023, Appendix A. Advanced NumPy: A.3 Broadcasting\nNumPy for Beginners (Official)",
    "crumbs": [
      "M05 NumPy"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html",
    "title": "NB: NumPy First Steps",
    "section": "",
    "text": "NumPy\nA new data structure\nEssentially, NumPy introduces a new data structure to Python — the n-dimensional array.\nAlong with it, it introduces a collection of functions and methods that take advantage of this data structure.\nThe data structure is designed to support the use of numerical methods: algorithmic approximations to the problems of mathematical analysis.\nNew Functions\nIt also provides a new way of applying functions to data made possible by the data structure – vectorized functions.\nVectorized functions replace the use of loops and comprehensions to apply a function to a set of data.\nIn addition, given the data structure, it provides a library of linear algebra functions.\nNew Data Types\nNumPy also introduces a bunch of new data types.\nPython for Science\nNumPy stands for “Numerical Python”.\nBecause numerical methods are so important to so many sciences, NumPy is the basis of what is called the scientific “stack” in Python, which consists of SciPy, Matplotlib, SciKitLearn, and Pandas.\nAll of these assume that you have some knowledge of NumPy.\nLet’s take a look at it.",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>NB: NumPy First Steps</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#importing-the-library",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#importing-the-library",
    "title": "NB: NumPy First Steps",
    "section": "Importing the Library",
    "text": "Importing the Library\n\nimport numpy as np\n\nNumPy is by widespread convention aliased as np.",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>NB: NumPy First Steps</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#the-ndarray",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#the-ndarray",
    "title": "NB: NumPy First Steps",
    "section": "The ndarray",
    "text": "The ndarray\nThe ndarray is a multidimensional array object.\nLet’s explore it some.\nFirst, let’s generate some fake data using NumPy’s built-a random number generator.\nNote that np.random.randn() samples from the “standard normal” distribution.\n\n# np.random.randn?\n\n\ndata = np.random.randn(2, 3)\n\n\ndata\n\narray([[ 0.51609076,  0.02200193,  0.28980768],\n       [ 0.52792978, -0.13494062,  1.8213642 ]])\n\n\n\ndata * 10\n\narray([[ 5.16090755,  0.22001927,  2.89807681],\n       [ 5.27929783, -1.34940618, 18.21364201]])\n\n\n\ndata + data\n\narray([[ 1.03218151,  0.04400385,  0.57961536],\n       [ 1.05585957, -0.26988124,  3.6427284 ]])\n\n\n\ndata.shape\n\n(2, 3)\n\n\n\ndata.dtype\n\ndtype('float64')",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>NB: NumPy First Steps</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#about-dimensions",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#about-dimensions",
    "title": "NB: NumPy First Steps",
    "section": "About Dimensions",
    "text": "About Dimensions\nThe term “dimension” is ambiguous.\n\nSometimes refers to the dimensions of things in the world, such as space and time.\nSometimes refers to the dimensions of a data structure, independent of what it represents in the world.\n\nNumPy dimensions are the latter, although they can be used to represent the former, as physicists do.\nThe dimensions of data structures are sometimes called axes.\nConsider this: Three-dimensional space can be represented as three columns in a two-dimensional table OR as three axes in a data cube.",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>NB: NumPy First Steps</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#creating-ndarrays",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#creating-ndarrays",
    "title": "NB: NumPy First Steps",
    "section": "Creating ndarrays",
    "text": "Creating ndarrays\nFrom a list:\n\ndata1 = [6, 7.5, 8, 0, 1]\narr1 = np.array(data1)\narr1\n\narray([6. , 7.5, 8. , 0. , 1. ])\n\n\nFrom a list of lists:\n\ndata2 = [[1, 2, 3, 4], [5, 6, 7, 8]]\narr2 = np.array(data2)\narr2\n\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n\n\n\narr2.ndim\n\n2\n\n\n\narr2.shape\n\n(2, 4)\n\n\n\narr1.dtype\n\ndtype('float64')\n\n\n\narr2.dtype\n\ndtype('int64')\n\n\nInitializing with \\(0\\)s using a convenience function:\n\nnp.zeros(10)\n\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n\n\n\nnp.zeros((3, 6))\n\narray([[0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0.]])\n\n\n\nnp.empty((2, 3, 2))\n\narray([[[0., 0.],\n        [0., 0.],\n        [0., 0.]],\n\n       [[0., 0.],\n        [0., 0.],\n        [0., 0.]]])\n\n\nUsing .arange() (instead of range())\n\nnp.arange(15)\n\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>NB: NumPy First Steps</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#data-types-for-ndarrays",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#data-types-for-ndarrays",
    "title": "NB: NumPy First Steps",
    "section": "Data Types for ndarrays",
    "text": "Data Types for ndarrays\nUnlike any of the previous data structures we have seen in Python, ndarrays must have a single data type associated with them.\nHere we initialize a series of arrays as different data types (aka dtypes).\n\narr1 = np.array([1, 2, 3], dtype=np.float64)\narr1.dtype\n\ndtype('float64')\n\n\nNote that dtypes are defined by some constants attached to the NumPy object.\nWe can also refer to them as strings in some contexts.\nIn other words, in the context of the dtype argument, 'float64' can substitute for np.float64.\n\nnp.array([1, 2, 3], dtype='float64')\n\narray([1., 2., 3.])\n\n\n\narr2 = np.array([1, 2, 3], dtype=np.int32)\narr2.dtype\n\ndtype('int32')\n\n\nInteger arrays default to int64:\n\narr = np.array([1, 2, 3, 4, 5])\narr.dtype\n\ndtype('int64')\n\n\nSo you may want in use a more capacious type:\n\nfloat_arr = arr.astype(np.float64)\nfloat_arr.dtype\n\ndtype('float64')\n\n\nArrays can be cast:\n\narr = np.array([3.7, -1.2, -2.6, 0.5, 12.9, 10.1])\narr\n\narray([ 3.7, -1.2, -2.6,  0.5, 12.9, 10.1])\n\n\nFrom floats to ints:\n\narr.astype(np.int32)\n\narray([ 3, -1, -2,  0, 12, 10], dtype=int32)\n\n\nFrom strings to floats:\n\nnumeric_strings = np.array(['1.25', '-9.6', '42'], dtype=np.string_)\nnumeric_strings.astype(float)\n\narray([ 1.25, -9.6 , 42.  ])\n\n\nNote that NumPy converts data types to make the array uniform:\n\nnon_uniform = np.array([1.25, -9.6, 42])\nnon_uniform, non_uniform.dtype\n\n(array([ 1.25, -9.6 , 42.  ]), dtype('float64'))\n\n\nRanges default to integers:\n\nint_array = np.arange(10)\n\n\nint_array\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\nWe can use the dtype on one array to cast another:\n\ncalibers = np.array([.22, .270, .357, .380, .44, .50], dtype=np.float64)\nint_array.astype(calibers.dtype)\n\narray([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])\n\n\nAnd here is an empty array of unsigned integers:\n\nempty_uint32 = np.empty(8, dtype='u4')\nempty_uint32\n\narray([         0, 1075314688,          0, 1075707904,          0,\n       1075838976,          0, 1072693248], dtype=uint32)\n\n\nNumPy Data Types\ni - integer\nb - boolean\nu - unsigned integer\nf - float\nc - complex float\nm - timedelta\nM - datetime\nO - object\nS - string\nU - unicode string\nV - fixed chunk of memory for other type ( void )\nData Type Hierarchy\nNumPy introduces 24 new fundamental Python types to describe different types of scalars.\nThese derive from the C programming language with which NumPy is built.\n\nSee the NumPy docs.",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>NB: NumPy First Steps</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#element-wise-arithmetic",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#element-wise-arithmetic",
    "title": "NB: NumPy First Steps",
    "section": "Element-wise Arithmetic",
    "text": "Element-wise Arithmetic\nNumPy arrays can be transformed with with arithmetic operations.\nThese are all element-wise operations.\nLet’s start with a 2D array.\n\narr = np.array([[1., 2., 3.], [4., 5., 6.]])\narr\n\narray([[1., 2., 3.],\n       [4., 5., 6.]])\n\n\n\narr.shape\n\n(2, 3)\n\n\n\narr * arr\n\narray([[ 1.,  4.,  9.],\n       [16., 25., 36.]])\n\n\n\narr - arr\n\narray([[0., 0., 0.],\n       [0., 0., 0.]])\n\n\n\n1 / arr\n\narray([[1.        , 0.5       , 0.33333333],\n       [0.25      , 0.2       , 0.16666667]])\n\n\n\narr ** 0.5\n\narray([[1.        , 1.41421356, 1.73205081],\n       [2.        , 2.23606798, 2.44948974]])\n\n\nNow let’s compare two arrays.\n\narr2 = np.array([[0., 4., 1.], [7., 2., 12.]])\narr2\n\narray([[ 0.,  4.,  1.],\n       [ 7.,  2., 12.]])\n\n\n\narr2 &gt; arr\n\narray([[False,  True, False],\n       [ True, False,  True]])\n\n\nBoolean arrays will prove to be very useful …",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>NB: NumPy First Steps</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#indexing-and-slicing",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#indexing-and-slicing",
    "title": "NB: NumPy First Steps",
    "section": "Indexing and Slicing",
    "text": "Indexing and Slicing\nExample 1\n→ Editor’s Note, this jumps ahead to multi-dimensional indexing.\n\nfoo = np.random.randn(3,5)\n\n\nfoo\n\narray([[ 0.62543484, -0.96229943,  0.95196573, -0.51305197, -0.1115699 ],\n       [ 0.11019503, -0.10980058,  0.28150877, -0.51208741, -0.75206119],\n       [ 1.69514313, -1.08493512,  0.1422037 , -0.8920906 , -0.71471137]])\n\n\n\nfoo.shape\n\n(3, 5)\n\n\n\nfoo[1:, :2]\n\narray([[ 0.11019503, -0.10980058],\n       [ 1.69514313, -1.08493512]])\n\n\n\nfoo[1:, :2].shape\n\n(2, 2)\n\n\nWhy is this different?\n\nfoo[1:][:2]\n\narray([[ 0.11019503, -0.10980058,  0.28150877, -0.51208741, -0.75206119],\n       [ 1.69514313, -1.08493512,  0.1422037 , -0.8920906 , -0.71471137]])\n\n\nBecause it operations in sequence, not simultaneously.\n\na = foo[1:]\na\n\narray([[ 0.11019503, -0.10980058,  0.28150877, -0.51208741, -0.75206119],\n       [ 1.69514313, -1.08493512,  0.1422037 , -0.8920906 , -0.71471137]])\n\n\n\na[:2]\n\narray([[ 0.11019503, -0.10980058,  0.28150877, -0.51208741, -0.75206119],\n       [ 1.69514313, -1.08493512,  0.1422037 , -0.8920906 , -0.71471137]])\n\n\nExample 2\n\narr = np.arange(10)\narr\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\narr[5]\n\n5\n\n\n\narr[5:8]\n\narray([5, 6, 7])\n\n\nSlices can be used to set values as well.\n\narr[5:8] = 12\n\n\narr\n\narray([ 0,  1,  2,  3,  4, 12, 12, 12,  8,  9])",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>NB: NumPy First Steps</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#views-and-copies",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#views-and-copies",
    "title": "NB: NumPy First Steps",
    "section": "Views and Copies",
    "text": "Views and Copies\nNotice that if we assign a scalar to a slice, all of the elements of the slice get that value.\nThis is called broadcasting. We’ll look at this more later.\nAlso, notice that changes to slices are changes to the arrays they are slices of.\nThey are views, not copies. This is crucial.\nSee what happens when we change a view:\n\narr_slice = arr[5:8]\narr_slice\n\narray([12, 12, 12])\n\n\n\narr_slice[1] = 12345\narr\n\narray([    0,     1,     2,     3,     4,    12, 12345,    12,     8,\n           9])\n\n\n\narr_slice[:] = 64\n\n\narr_slice\n\narray([64, 64, 64])\n\n\n\narr\n\narray([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])\n\n\nNumPy defaults to views rather than copies because copies are expensive and NumPy is designed with large data use cases in mind.\nIf you want a copy of a slice of an ndarray instead of a view, use .copy().\nHere’s an example:\n\narr_slice_copy = arr[5:8].copy()\n\n\narr_slice_copy\n\narray([64, 64, 64])\n\n\n\narr_slice_copy[:] = 99\n\n\narr_slice_copy\n\narray([99, 99, 99])\n\n\nNote how the original array is unchanged:\n\narr\n\narray([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>NB: NumPy First Steps</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#higher-dimensional-arrays",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#higher-dimensional-arrays",
    "title": "NB: NumPy First Steps",
    "section": "Higher Dimensional Arrays",
    "text": "Higher Dimensional Arrays\nNumPy can create arrays in N dimensions.\nHere is a 2D array initialized from a list of lists.\n\narr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nIndexing into a dimension produces lower-order arrays.\n\narr2d[2]\n\narray([7, 8, 9])\n\n\n\narr2d[0][2]\n\n3\n\n\nSimplified notation: NumPy offers an elegant way to specify multidimensional indices and slices.\nInstead of x[a][b][c] you can write x[a,b,c].\n\narr2d[0, 2]\n\n3\n\n\nA nice visual of a 2D array\n\nTwo-Demensional Array Slicing\n\n3D arrays\n\narr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\n\n\narr3d.shape\n\n(2, 2, 3)\n\n\n\narr3d\n\narray([[[ 1,  2,  3],\n        [ 4,  5,  6]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\n\n\nI find NumPy’s way of show the data a bit difficult to parse visually.\nHere is a way to visualize 3 and higher dimensional data:\n[ # AXIS 0                     AXIS 1 CONTAINS 2 ELEMENTS (arrays)\n    [ # AXIS 1                 EACH MEMBER OF AXIS 2 CONTAINS 2 ELEMENTS (arrays)\n        [1, 2, 3], # AXIS 2    EACH MEMBER OF AXIS 3 CONTAINS 3 ELEMENTS (integers)\n        [4, 5, 6]  # AXIS 2\n    ],  \n    [ # AXIS 1\n        [7, 8, 9], \n        [10, 11, 12]\n    ]\n]\nEach axis is a level in the nested hierarchy, i.e. a tree or DAG (directed-acyclic graph).\n\nEach axis is a container.\nThere is only one top container.\nOnly the bottom containers have data.\n\nOmit lower indices\nIn multidimensional arrays, if you omit later indices, the returned object will be a lower-dimensional ndarray consisting of all the data contained by the higher indexed dimension.\nSo in the 2 × 2 × 3 array arr3d:\n\narr3d[0] # The elements contained by the first row\n\narray([[1, 2, 3],\n       [4, 5, 6]])\n\n\nSaving data before modifying an array.\nYou can work with these lower dimensional arrays using views and copies.\n\nold_values = arr3d[0].copy() # Make a copy\narr3d[0] = 42                # Use a view to alter the original\narr3d                        # See result\n\narray([[[42, 42, 42],\n        [42, 42, 42]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\n\n\nPutting the data back.\n\narr3d[0] = old_values\narr3d\n\narray([[[ 1,  2,  3],\n        [ 4,  5,  6]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\n\n\nSimilarly, arr3d[1, 0] gives you all of the values whose indices start with (1, 0), forming a 1-dimensional array:\n\narr3d[1, 0]\n\narray([7, 8, 9])\n\n\n\nx = arr3d[1]\nx\n\narray([[ 7,  8,  9],\n       [10, 11, 12]])\n\n\n\nx[0]\n\narray([7, 8, 9])",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>NB: NumPy First Steps</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#indexing-2d-arrays-with-slices",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#indexing-2d-arrays-with-slices",
    "title": "NB: NumPy First Steps",
    "section": "Indexing 2D arrays with slices",
    "text": "Indexing 2D arrays with slices\nWe demonstrate indexing in 2D arrays.\n\narr\n\narray([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])\n\n\n\narr[1:6]\n\narray([ 1,  2,  3,  4, 64])\n\n\n\narr2d\n\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n\n\narr2d[:2]\n\narray([[1, 2, 3],\n       [4, 5, 6]])\n\n\n\narr2d[:2, 1:]\n\narray([[2, 3],\n       [5, 6]])\n\n\n\narr2d[1, :2]\n\narray([4, 5])\n\n\n\narr2d[:2, 2]\n\narray([3, 6])\n\n\n\narr2d[:, :1]\n\narray([[1],\n       [4],\n       [7]])\n\n\n\narr2d[:2, 1:] = 0\narr2d\n\narray([[1, 0, 0],\n       [4, 0, 0],\n       [7, 8, 9]])",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>NB: NumPy First Steps</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#boolean-indexing",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#boolean-indexing",
    "title": "NB: NumPy First Steps",
    "section": "Boolean Indexing",
    "text": "Boolean Indexing\nThis a crucial topic – it applies to Pandas and R.\nYou can pass a boolean representation of an array to the array indexer (i.e. the [] suffix) and it will return only those cells that are True.\nLet’s assume that we have two related arrays: * names which holds the names associated with the data in each row, or observations, of a table. * data which holds the data associated with each feature of a table.\nThere are \\(7\\) observations and \\(4\\) features.\n\nnames = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])\nnames\n\narray(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'], dtype='&lt;U4')\n\n\n\ndata = np.random.randn(7, 4)\ndata\n\narray([[-0.02296517,  0.13474624, -1.68950219,  0.38049711],\n       [ 0.26840002,  1.04588115, -0.27682064,  1.34172096],\n       [ 0.5600871 ,  0.40689673, -1.01778694, -1.26397703],\n       [-0.30857368,  0.13819812, -0.51737801, -0.25058465],\n       [-0.41433972, -0.31894006,  0.13259035, -0.78374819],\n       [ 0.25037425, -0.09460502, -0.08853394, -1.96423597],\n       [ 1.20040478, -0.03586405, -0.85179925,  0.02612226]])\n\n\n\nnames.shape, data.shape\n\n((7,), (7, 4))\n\n\nA comparison operation for an array returns an array of booleans.\nLet’s see which names are 'Bob':\n\nnames == 'Bob'\n\narray([ True, False, False,  True, False, False, False])\n\n\nNow, this boolean expression can be passed to an array indexer to the data:\n\ndata[names == 'Bob']\n\narray([[-0.02296517,  0.13474624, -1.68950219,  0.38049711],\n       [-0.30857368,  0.13819812, -0.51737801, -0.25058465]])\n\n\nAlong the second axis, we can use a slice to select data.\n\ndata[names == 'Bob', 2:]\n\narray([[-1.68950219,  0.38049711],\n       [-0.51737801, -0.25058465]])\n\n\n\ndata[names == 'Bob', 3]\n\narray([ 0.38049711, -0.25058465])\n\n\nIf you know SQL, this is like the query:\nSELECT col3, col4 FROM data WHERE name = 'Bob'",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>NB: NumPy First Steps</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#negation",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#negation",
    "title": "NB: NumPy First Steps",
    "section": "Negation",
    "text": "Negation\nHere are some examples of negated boolean operations being applied.\n\nbix = names != 'Bob'\nbix\n\narray([False,  True,  True, False,  True,  True,  True])\n\n\n\ndata[bix]\n\narray([[ 0.26840002,  1.04588115, -0.27682064,  1.34172096],\n       [ 0.5600871 ,  0.40689673, -1.01778694, -1.26397703],\n       [-0.41433972, -0.31894006,  0.13259035, -0.78374819],\n       [ 0.25037425, -0.09460502, -0.08853394, -1.96423597],\n       [ 1.20040478, -0.03586405, -0.85179925,  0.02612226]])\n\n\n\ndata[~bix] # Back to Bob\n\narray([[-0.02296517,  0.13474624, -1.68950219,  0.38049711],\n       [-0.30857368,  0.13819812, -0.51737801, -0.25058465]])\n\n\n\ndata[~(names == 'Bob')]\n\narray([[ 0.26840002,  1.04588115, -0.27682064,  1.34172096],\n       [ 0.5600871 ,  0.40689673, -1.01778694, -1.26397703],\n       [-0.41433972, -0.31894006,  0.13259035, -0.78374819],\n       [ 0.25037425, -0.09460502, -0.08853394, -1.96423597],\n       [ 1.20040478, -0.03586405, -0.85179925,  0.02612226]])\n\n\nNote that we don’t use not but instead the tilde ~ sign to negate (flip) a value.\nNor do we use and and or; instead we use & and |.\nAlso, expressions join by these operators need to be in parentheses.\n\nmask = (names == 'Bob') | (names == 'Will')\nmask\ndata[mask]\n\narray([[-0.02296517,  0.13474624, -1.68950219,  0.38049711],\n       [ 0.5600871 ,  0.40689673, -1.01778694, -1.26397703],\n       [-0.30857368,  0.13819812, -0.51737801, -0.25058465],\n       [-0.41433972, -0.31894006,  0.13259035, -0.78374819]])\n\n\n\ndata[data &lt; 0] = 0\ndata\n\narray([[0.        , 0.13474624, 0.        , 0.38049711],\n       [0.26840002, 1.04588115, 0.        , 1.34172096],\n       [0.5600871 , 0.40689673, 0.        , 0.        ],\n       [0.        , 0.13819812, 0.        , 0.        ],\n       [0.        , 0.        , 0.13259035, 0.        ],\n       [0.25037425, 0.        , 0.        , 0.        ],\n       [1.20040478, 0.        , 0.        , 0.02612226]])\n\n\n\ndata[names != 'Joe'] = 7\ndata\n\narray([[7.        , 7.        , 7.        , 7.        ],\n       [0.26840002, 1.04588115, 0.        , 1.34172096],\n       [7.        , 7.        , 7.        , 7.        ],\n       [7.        , 7.        , 7.        , 7.        ],\n       [7.        , 7.        , 7.        , 7.        ],\n       [0.25037425, 0.        , 0.        , 0.        ],\n       [1.20040478, 0.        , 0.        , 0.02612226]])",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>NB: NumPy First Steps</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#fancy-indexing",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#fancy-indexing",
    "title": "NB: NumPy First Steps",
    "section": "Fancy Indexing",
    "text": "Fancy Indexing\nIn so-call fancy indexing, we use array index numbers to access data.\nThis can be used to sub-select and re-order data from an array.\nWe pass a list of item numbers, instead of an integer or integer range with :, to the indexer.\n\narr = np.empty((8, 4))\nfor i in range(8):\n    arr[i] = i\narr\n\narray([[0., 0., 0., 0.],\n       [1., 1., 1., 1.],\n       [2., 2., 2., 2.],\n       [3., 3., 3., 3.],\n       [4., 4., 4., 4.],\n       [5., 5., 5., 5.],\n       [6., 6., 6., 6.],\n       [7., 7., 7., 7.]])\n\n\nThe following says Select rows 4, 3, 0, and 6, in that order.\n\narr[[4, 3, 0, 6]]\n\narray([[4., 4., 4., 4.],\n       [3., 3., 3., 3.],\n       [0., 0., 0., 0.],\n       [6., 6., 6., 6.]])\n\n\nAnd we can go backwards.\n\narr[[-3, -5, -7]]\n\narray([[5., 5., 5., 5.],\n       [3., 3., 3., 3.],\n       [1., 1., 1., 1.]])\n\n\nWe can use lists to perform some complex indexing.\n\narr = np.arange(32).reshape((8, 4))\narr\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15],\n       [16, 17, 18, 19],\n       [20, 21, 22, 23],\n       [24, 25, 26, 27],\n       [28, 29, 30, 31]])\n\n\n\narr[[1, 5, 7, 2], [0, 3, 1, 2]]  # Grab rows, then select columns from each row\n\narray([ 4, 23, 29, 10])\n\n\n\narr[[1, 5, 7, 2]][:, [0, 3, 1, 2]] # Grab rows, then reorder columns \n\narray([[ 4,  7,  5,  6],\n       [20, 23, 21, 22],\n       [28, 31, 29, 30],\n       [ 8, 11,  9, 10]])",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>NB: NumPy First Steps</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#transposing-arrays-and-swapping-axes",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#transposing-arrays-and-swapping-axes",
    "title": "NB: NumPy First Steps",
    "section": "Transposing Arrays and Swapping Axes",
    "text": "Transposing Arrays and Swapping Axes\nTransposing is a special form of reshaping which similarly returns a view on the underlying data without copying anything.\nArrays have the transpose method and also the special T attribute:\n\narr = np.arange(15).reshape((3, 5))\narr\n\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])\n\n\n\narr.T\n\narray([[ 0,  5, 10],\n       [ 1,  6, 11],\n       [ 2,  7, 12],\n       [ 3,  8, 13],\n       [ 4,  9, 14]])\n\n\nTransposing is often used when computing the dot product between two arrays.\nHere’s an example.\n\narr = np.random.randn(6, 3)\narr\n\narray([[ 0.13663893,  1.00187709, -0.49963842],\n       [-0.36045802,  0.11501271,  0.39756581],\n       [ 0.14672184, -0.2152224 ,  2.09433159],\n       [-1.6139847 ,  0.74614412, -2.0898423 ],\n       [ 0.12286791,  0.57296788, -0.18656951],\n       [ 1.16320932,  0.97720159,  2.05399248]])\n\n\n\nnp.dot(arr.T, arr)\n\narray([[ 4.14322653,  0.0666845 ,  5.83498162],\n       [ 0.0666845 ,  2.90325249, -0.5646554 ],\n       [ 5.83498162, -0.5646554 , 13.41505604]])\n\n\nFor higher dimensional arrays, transpose will accept a tuple of axis numbers to permute the axes.\nWarning – this can get confusing to conceptualize and visualize!\n\narr = np.arange(16).reshape((2, 2, 4))\narr\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7]],\n\n       [[ 8,  9, 10, 11],\n        [12, 13, 14, 15]]])\n\n\n\narr.transpose((1, 0, 2))\n\narray([[[ 0,  1,  2,  3],\n        [ 8,  9, 10, 11]],\n\n       [[ 4,  5,  6,  7],\n        [12, 13, 14, 15]]])\n\n\nSimple transposing with .T is just a special case of swapping axes. ndarray has the method swapaxes which takes a pair of axis numbers:\n\narr\n\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7]],\n\n       [[ 8,  9, 10, 11],\n        [12, 13, 14, 15]]])\n\n\n\narr.swapaxes(1, 2)\n\narray([[[ 0,  4],\n        [ 1,  5],\n        [ 2,  6],\n        [ 3,  7]],\n\n       [[ 8, 12],\n        [ 9, 13],\n        [10, 14],\n        [11, 15]]])",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>NB: NumPy First Steps</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#universal-functions",
    "href": "notebooks/M05_NumPy/M05-02-NumpyBasics.html#universal-functions",
    "title": "NB: NumPy First Steps",
    "section": "Universal Functions",
    "text": "Universal Functions\nA universal function, or ufunc, is a function that performs elementwise operations on data in ndarrays. You can think of them as fast vectorized wrappers for simple functions that take one or more scalar values and produce one or more scalar results.\nMany ufuncs are simple elementwise transformations, like sqrt or exp:\n\narr = np.arange(10)\narr\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\nnp.sqrt(arr)\n\narray([0.        , 1.        , 1.41421356, 1.73205081, 2.        ,\n       2.23606798, 2.44948974, 2.64575131, 2.82842712, 3.        ])\n\n\n\nnp.exp(arr)\n\narray([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01,\n       5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03,\n       2.98095799e+03, 8.10308393e+03])\n\n\n\nx = np.random.randn(8)\nx\n\narray([-1.21162715,  1.6337135 , -1.31514057, -0.5011741 , -0.32977931,\n       -0.98463553, -1.69646137, -1.26292282])\n\n\n\ny = np.random.randn(8)\ny\n\narray([-0.39375855, -0.29120602, -0.0876911 ,  1.52726809, -1.3897972 ,\n        0.50625101, -0.19356104, -0.84859896])\n\n\n\nnp.maximum(x, y)\n\narray([-0.39375855,  1.6337135 , -0.0876911 ,  1.52726809, -0.32977931,\n        0.50625101, -0.19356104, -0.84859896])\n\n\n\narr = np.random.randn(7) * 5\narr\n\narray([ -1.17483839,  -0.24073258,  -2.0693242 ,  -4.78731354,\n         0.68248984,   9.1717787 , -11.70612985])\n\n\n\nremainder, whole_part = np.modf(arr)\nremainder\n\narray([-0.17483839, -0.24073258, -0.0693242 , -0.78731354,  0.68248984,\n        0.1717787 , -0.70612985])\n\n\n\nwhole_part\n\narray([ -1.,  -0.,  -2.,  -4.,   0.,   9., -11.])\n\n\n\narr\n\narray([ -1.17483839,  -0.24073258,  -2.0693242 ,  -4.78731354,\n         0.68248984,   9.1717787 , -11.70612985])\n\n\n\nnp.sqrt(arr)\n\n/var/folders/14/rnyfspnx2q131jp_752t9fc80000gn/T/ipykernel_58994/2296558006.py:1: RuntimeWarning: invalid value encountered in sqrt\n  np.sqrt(arr)\n\n\narray([       nan,        nan,        nan,        nan, 0.82612943,\n       3.02849446,        nan])\n\n\nnan is a special value in NumPy.",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>NB: NumPy First Steps</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html",
    "title": "NB: NumPy Continued",
    "section": "",
    "text": "Quick Refresher on Shape\nThe shape of an array is represented a tuple, e.g. (n, m) for a 2D array.\nConsider the array foo:\nimport numpy as np\nfoo = np.ones((6,4))\nfoo\n\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])\nIt was created with the \\(2\\) dimensions. * The first dimension, axis 0, has \\(6\\) elements. In this case, these elements are arrays. * The second dimension, axis 1, has \\(4\\) elements. Its elements are scalars (numbers in this case).\nThe shape of foo[0] is \\(4\\). It contains \\(1\\) axis with \\(4\\) elements.\nfoo[0], foo[0].shape\n\n(array([1., 1., 1., 1.]), (4,))\nIt has a shape of \\(1\\) and not \\(4 \\times 1\\) because it is a vector, not a matrix.\nSO, there is a difference between a vector and a 1-column matrix.",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NB: NumPy Continued</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#quick-refresher-on-shape",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#quick-refresher-on-shape",
    "title": "NB: NumPy Continued",
    "section": "",
    "text": "The length of the tuple is number of dimensions (i.e. axes).\nThe values of the tuple are the number of elements in each dimension (axis).\n\n\n\n\n\n\n\n\n\n\n\nReshaping\nIf we want to make it into a 1-column matrix, we need to reshape it using np.reshape().\nNote that the first value of the shape argument is \\(-1\\). This means use the length of the vector that is passed to it.\n\n## np.reshape?\n\n\nfoo2 = np.reshape(foo[0], (-1, 1))\n\n\nfoo2, foo2.shape\n\n(array([[1.],\n        [1.],\n        [1.],\n        [1.]]),\n (4, 1))\n\n\nWhen indexing an array, think of the positions of the comma-delimitted tuple as the axis.\nThe values are the element offsets in the containing array. The\n\nfoo[2:, 2:]\n##   ^   ^ \n##   0   1  &lt;- AXIS NUMBER\n\narray([[1., 1.],\n       [1., 1.],\n       [1., 1.],\n       [1., 1.]])\n\n\n\n\nExample: The Normal Equation\nSometimes, you need to convert vectors into 1-column matrices to make certain linear algebraic functions work.\nConsider two random variables, \\(x\\) and \\(y\\).\n\nx = np.random.randn(100)\ny = np.random.randn(100)\n\nWe can fit a regression line using the normal equation, which appears in this week’s homework.\n\\(\\begin{aligned} \\hat\\beta_i=(x^Tx)^{−1}x^Ty \\end{aligned}\\)\nHere is a standward way of expressing it in NumPy:\n\nget_beta1 = lambda x, y: (np.linalg.inv(x.T.dot(x))) * (x.T.dot(y))\n\nHowever, it will fail if we pass it our two variables, x and y.\nThe reason is that it expects x to be a matrix, since it is designed to handle n-dimension predictor variables, usually represented as \\(\\textbf{X}\\).\n\nget_beta1(x, y)\n\nLinAlgError: 0-dimensional array given. Array must be at least two-dimensional\n\n\nThe revised function will work with a vector as x:\n\\(\\hat\\beta_i = \\large\\frac{1}{x^Tx} \\small(x^Ty)\\)\n\nget_beta2 = lambda x, y: (1 / x.T.dot(x)) * (x.T.dot(y))\n\n\nget_beta2(x, y)\n\n0.11041207961950944\n\n\nWe can fix the problem in the general case by converting our vector into a matrix using np.reshape().\n\nx_as_matrix = np.reshape(x, (-1, 1))\n\n\nget_beta1(x_as_matrix, y)\n\narray([[0.11041208]])\n\n\n\nget_beta1(x_as_matrix, y)[0][0]\n\n0.11041207961950944\n\n\n\nget_beta1(x_as_matrix, y)[0][0] == get_beta2(x, y)\n\nTrue\n\n\nOne take-away here is that there is a difference betweek a scalar value and a 1 x 1 array.",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NB: NumPy Continued</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#broadcasting",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#broadcasting",
    "title": "NB: NumPy Continued",
    "section": "Broadcasting",
    "text": "Broadcasting\nWhat happens when you try to perform an element-wise operation on two arrays of different shape?\nNumPy will convert a low-dimensional array into a high-dimensional array to allow the operation to take place.\nThis is called broadcasting.\nLet’s look at at our array foo:\n\nfoo\n\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])\n\n\nIf we multiply it by 5, the scalar is converted into an array of the same shape as foo with the value 5 broadcast to populate the entire array.\n\nfoo * 5\n\narray([[5., 5., 5., 5.],\n       [5., 5., 5., 5.],\n       [5., 5., 5., 5.],\n       [5., 5., 5., 5.],\n       [5., 5., 5., 5.],\n       [5., 5., 5., 5.]])\n\n\nIf we want to multiply an array by a vector, the vector is broadcast to become a 2D array.\n\nfoo * np.array([5, 10, 6, 8])\n\narray([[ 5., 10.,  6.,  8.],\n       [ 5., 10.,  6.,  8.],\n       [ 5., 10.,  6.,  8.],\n       [ 5., 10.,  6.,  8.],\n       [ 5., 10.,  6.,  8.],\n       [ 5., 10.,  6.,  8.]])\n\n\nNote that NumPy can’t always make the adjustment:\n\nfoo * np.array([5, 10])\n\nValueError: operands could not be broadcast together with shapes (6,4) (2,)",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NB: NumPy Continued</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#array-oriented-programming",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#array-oriented-programming",
    "title": "NB: NumPy Continued",
    "section": "Array-Oriented Programming",
    "text": "Array-Oriented Programming\nUsing NumPy arrays enables you to express many kinds of data processing tasks as concise array expressions without writing loops.\nThis practice of replacing explicit loops with array expressions is referred to by some people as vectorization.\nVectorized array operations are often significantly faster than their pure Python equivalents.\nThey are also visually concise and elegant, although loops have the virtue of visualizing what’s under the hood in an algorithm.",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NB: NumPy Continued</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#expressing-conditional-logic-as-array-operations",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#expressing-conditional-logic-as-array-operations",
    "title": "NB: NumPy Continued",
    "section": "Expressing Conditional Logic as Array Operations",
    "text": "Expressing Conditional Logic as Array Operations\n\nnp.where()\nThe np.where function is a vectorized version of the ternary expression x if condition else y.\nSuppose we had a boolean array and two arrays of values:\n\nxarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5])\nyarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5])\ncond = np.array([True, False, True, True, False])\n\n\nresult = [(x if c else y) for x, y, c in zip(xarr, yarr, cond)]\n\n\nresult\n\n[1.1, 2.2, 1.3, 1.4, 2.5]\n\n\nHere is the vectorized version:\n\nresult = np.where(cond, xarr, yarr)\n\n\nresult\n\narray([1.1, 2.2, 1.3, 1.4, 2.5])\n\n\n\narr = np.random.randn(4, 4)\n\n\narr\n\narray([[-0.88630252, -0.4316629 ,  0.91857064,  1.54427479],\n       [ 1.23012002, -0.5420457 ,  1.11781845,  0.74700946],\n       [-0.38446538,  1.50870904,  1.22148745,  1.23121864],\n       [-1.60047673,  0.51294354, -1.21148778, -0.46633731]])\n\n\n\narr &gt; 0\n\narray([[False, False,  True,  True],\n       [ True, False,  True,  True],\n       [False,  True,  True,  True],\n       [False,  True, False, False]])\n\n\n\nnp.where(arr &gt; 0, 2, -2)\n\narray([[-2, -2,  2,  2],\n       [ 2, -2,  2,  2],\n       [-2,  2,  2,  2],\n       [-2,  2, -2, -2]])\n\n\n\nnp.where(arr &gt; 0, 2, arr) # set only positive values to 2\n\narray([[-0.88630252, -0.4316629 ,  2.        ,  2.        ],\n       [ 2.        , -0.5420457 ,  2.        ,  2.        ],\n       [-0.38446538,  2.        ,  2.        ,  2.        ],\n       [-1.60047673,  2.        , -1.21148778, -0.46633731]])",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NB: NumPy Continued</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#mathematical-and-statistical-methods",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#mathematical-and-statistical-methods",
    "title": "NB: NumPy Continued",
    "section": "Mathematical and Statistical Methods",
    "text": "Mathematical and Statistical Methods\nStatistical computations are aggregate functions apply to vectors within an array.\nIn a 2D array, they can be applied to rows or columns, i.e. axis \\(0\\) or axis \\(1\\).\nLet’s create an array of random values. We can think of it is a table of observations and random variables.\n\narr = np.random.randn(5, 4)\n\n\narr\n\narray([[-0.56379909,  0.63920648,  0.87248354, -0.02845294],\n       [-0.63524983,  1.08505079,  0.75671762,  0.50280784],\n       [-0.0142165 ,  2.35391876,  0.70430055, -0.43817457],\n       [-1.55291148, -0.54403408, -0.70309266, -1.28928976],\n       [ 0.5977512 , -0.10197554, -0.3362719 ,  0.66716004]])\n\n\n\n.mean()\n\narr.mean()\n\n0.09859642340859656\n\n\n\nnp.mean(arr)\n\n0.09859642340859656\n\n\n\narr.mean(axis=1)\n\narray([ 0.2298595 ,  0.4273316 ,  0.65145706, -1.02233199,  0.20666595])\n\n\n\narr.mean(axis=0)\n\narray([-0.43368514,  0.68643328,  0.25882743, -0.11718988])\n\n\n\n\n.sum()\n\narr.sum()\n\n1.9719284681719313\n\n\nRow wise aggregration\n\narr.sum(axis=0)\n\narray([-2.1684257 ,  3.4321664 ,  1.29413716, -0.58594939])\n\n\n\narr.mean(axis=1)\n\narray([ 0.2298595 ,  0.4273316 ,  0.65145706, -1.02233199,  0.20666595])\n\n\nColumn-wise aggregration\n\n\n.cumsum()\n\narr = np.array([0, 1, 2, 3, 4, 5, 6, 7])\n\n\narr.cumsum()\n\narray([ 0,  1,  3,  6, 10, 15, 21, 28])\n\n\n\narr = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\n\n\narr\n\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n\n\n\narr.cumsum(axis=0)\n\narray([[ 0,  1,  2],\n       [ 3,  5,  7],\n       [ 9, 12, 15]])\n\n\n\narr.cumprod(axis=1)\n\narray([[  0,   0,   0],\n       [  3,  12,  60],\n       [  6,  42, 336]])",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NB: NumPy Continued</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#methods-for-boolean-arrays",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#methods-for-boolean-arrays",
    "title": "NB: NumPy Continued",
    "section": "Methods for Boolean Arrays",
    "text": "Methods for Boolean Arrays\n\n.sum()\nSince booleans are \\(0\\)s and \\(1\\), we can sum them to get a total truth count.\n\narr = np.random.randn(100)\n(arr &gt; 0).sum() # Number of positive values\n\n53\n\n\n\nbools = np.array([False, False, True, False])\n\n\n\n.any()\n\nbools.any()\n\nTrue\n\n\n\n\n.all()\n\nbools.all()\n\nFalse",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NB: NumPy Continued</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#sorting",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#sorting",
    "title": "NB: NumPy Continued",
    "section": "Sorting",
    "text": "Sorting\n\n.sort()\n\narr = np.random.randn(6)\n\n\narr\n\narray([-0.34100777, -0.47902669, -0.04914749, -0.2118817 ,  0.33189994,\n        0.44421597])\n\n\n\narr.sort()\n\n\narr\n\narray([-0.47902669, -0.34100777, -0.2118817 , -0.04914749,  0.33189994,\n        0.44421597])\n\n\n\narr = np.random.randn(5, 3)\n\n\narr\n\narray([[-0.22477078, -0.2655815 ,  1.61483759],\n       [ 1.85270888,  0.75707369,  0.79857461],\n       [ 0.37555699,  0.53462432, -1.04191359],\n       [-0.49741696, -0.10138164, -0.02289091],\n       [ 0.54096651, -0.16458838, -1.56101135]])\n\n\n\narr.sort(1)\n\n\narr\n\narray([[-0.2655815 , -0.22477078,  1.61483759],\n       [ 0.75707369,  0.79857461,  1.85270888],\n       [-1.04191359,  0.37555699,  0.53462432],\n       [-0.49741696, -0.10138164, -0.02289091],\n       [-1.56101135, -0.16458838,  0.54096651]])\n\n\n\nlarge_arr = np.random.randn(1000)\nlarge_arr.sort()\nlarge_arr[int(0.05 * len(large_arr))] # 5% quantile\n\n-1.6010598458046106\n\n\n\n0.05 * len(large_arr)\n\n50.0",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NB: NumPy Continued</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#unique-and-other-set-logic",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#unique-and-other-set-logic",
    "title": "NB: NumPy Continued",
    "section": "Unique and Other Set Logic",
    "text": "Unique and Other Set Logic\n\nnp.unique()\n\nnames = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])\nnp.unique(names)\n\narray(['Bob', 'Joe', 'Will'], dtype='&lt;U4')\n\n\n\nsorted(set(names))\n\n['Bob', 'Joe', 'Will']\n\n\n\nints = np.array([3, 3, 3, 2, 2, 1, 1, 4, 4])\nnp.unique(ints)\n\narray([1, 2, 3, 4])\n\n\n\n\nnp.in1d()\nTests whether each element of a 1-D array is also present in a second array.\n\nvalues = np.array([6, 0, 0, 3, 2, 5, 6])\nnp.in1d(values, [2, 3, 6])\n\narray([ True, False, False,  True,  True, False,  True])",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NB: NumPy Continued</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#file-input-and-output-with-arrays",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#file-input-and-output-with-arrays",
    "title": "NB: NumPy Continued",
    "section": "File Input and Output with Arrays",
    "text": "File Input and Output with Arrays\n\nnp.save()\nSave an array to a binary file in NumPy .npy format.\nAutomatically adds the .npy file extension.\n\narr = np.arange(10)\nnp.save('some_array', arr)\n\n\n\nnp.load()\n\nnp.load('some_array.npy')\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\n\nnp.savetxt()\nSave an array to a text file.\n\n## np.savetxt?\n\n\nnp.savetxt('some_array.txt', arr)\n\n\n## !more some_array.txt\n\n\n\nnp.savez()\nSave several arrays into a single file in uncompressed .npz format.\n\nnp.savez('array_archive.npz', a=arr, b=arr)\n\n\narch = np.load('array_archive.npz')\narch['b']\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\nnp.savez_compressed('arrays_compressed.npz', a=arr, b=arr)\n\nClean up …\n\n!rm some_array.npy\n!rm some_array.txt\n!rm array_archive.npz\n!rm arrays_compressed.npz",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NB: NumPy Continued</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#linear-algebra",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#linear-algebra",
    "title": "NB: NumPy Continued",
    "section": "Linear Algebra",
    "text": "Linear Algebra\n\n.dot()\nDot product of two arrays. Specifically, - If both a and b are 1-D arrays, it is inner product of vectors (without complex conjugation). - If both a and b are 2-D arrays, it is matrix multiplication, but using matmul() or a @ b is preferred. - If either a or b is 0-D (scalar), it is equivalent to multiply() and using numpy.multiply(a, b) or a * b is preferred. - If a is an N-D array and b is a 1-D array, it is a sum product over the last axis of a and b. - If a is an N-D array and b is an M-D array (where M&gt;=2), it is a sum product over the last axis of a and the second-to-last axis of b:\n    dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m])\n\nx = np.array([[1., 2., 3.], [4., 5., 6.]])\ny = np.array([[6., 23.], [-1, 7], [8, 9]])\n\n\nx, y\n\n(array([[1., 2., 3.],\n        [4., 5., 6.]]),\n array([[ 6., 23.],\n        [-1.,  7.],\n        [ 8.,  9.]]))\n\n\n\ny\n\narray([[ 6., 23.],\n       [-1.,  7.],\n       [ 8.,  9.]])\n\n\n\nx.dot(y)\n\narray([[ 28.,  64.],\n       [ 67., 181.]])\n\n\n\nnp.dot(x, y)\n\narray([[ 28.,  64.],\n       [ 67., 181.]])\n\n\n\nnp.dot(x, np.ones(3))\n\narray([ 6., 15.])\n\n\nIn NumPy, the @ operator means matrix multiplication.\n\nx @ np.ones(3)\n\narray([ 6., 15.])\n\n\n\n\nnp.linalg.inv()\n\nfrom numpy.linalg import inv, qr\nX = np.random.randn(5, 5)\nmat = X.T.dot(X)\ninv(mat)\n\narray([[ 0.28589415,  0.01354928,  0.05104531,  0.10897255, -0.24099955],\n       [ 0.01354928,  0.57348664, -0.75620929,  0.39037647,  0.05308586],\n       [ 0.05104531, -0.75620929,  1.26083704, -0.63901115, -0.32228738],\n       [ 0.10897255,  0.39037647, -0.63901115,  0.59380515,  0.2750746 ],\n       [-0.24099955,  0.05308586, -0.32228738,  0.2750746 ,  1.73940389]])\n\n\n\nmat.dot(inv(mat))\nq, r = qr(mat)\n\n\nr\n\narray([[ -7.46075356,   3.45484673,   5.55222932,   6.40262089,\n         -1.19957391],\n       [  0.        , -10.63504229,  -6.77474252,   0.46167086,\n         -1.06575636],\n       [  0.        ,   0.        ,  -2.09192461,  -3.350628  ,\n          0.0985176 ],\n       [  0.        ,   0.        ,   0.        ,  -1.1296096 ,\n          0.29129928],\n       [  0.        ,   0.        ,   0.        ,   0.        ,\n          0.55334319]])",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NB: NumPy Continued</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#pseudorandom-number-generation",
    "href": "notebooks/M05_NumPy/M05-03-NumpyBasicsContinued.html#pseudorandom-number-generation",
    "title": "NB: NumPy Continued",
    "section": "Pseudorandom Number Generation",
    "text": "Pseudorandom Number Generation\n\nnp.random.normal()\n\nsamples = np.random.normal(size=(4, 4))\nsamples\n\narray([[ 0.28326902, -0.69810988, -0.28288633,  0.52776027],\n       [ 0.32479475, -0.56073919, -1.76436199,  0.59315203],\n       [-2.46989275,  1.45445243, -0.00357062,  1.36447415],\n       [-0.21189878, -0.40942508,  0.33629503, -0.69962928]])\n\n\n\nfrom random import normalvariate\n\nN = 1000000\n%timeit samples = [normalvariate(0, 1) for _ in range(N)]\n%timeit np.random.normal(size=N)\n\n899 ms ± 17.3 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n37.9 ms ± 402 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\n\n\nnp.random.seed(1234)\n\n\nrng = np.random.RandomState(1234)\n\n\nrng.randn(10)\n\narray([ 0.47143516, -1.19097569,  1.43270697, -0.3126519 , -0.72058873,\n        0.88716294,  0.85958841, -0.6365235 ,  0.01569637, -2.24268495])\n\n\n\n\nExample: Random Walks\nLet simulate a random walk. The walk will be represented as a vector.\nWe’ll do it first as loop, then with vectorization.\nLoops\n\nimport random\nposition = 0\nwalk = [position] # initialize the walk\nsteps = 1000\nfor i in range(steps):\n    step = 1 if random.randint(0, 1) else -1  # Coin toss\n    position += step\n    walk.append(position)\n\n\nimport matplotlib.pyplot as plt\n\n\nplt.figure()\nplt.plot(walk[:100]);\n\n\n\n\n\n\n\n\nVectors\n\nnp.random.seed(12345)\n\n\nnsteps = 1000\ndraws = np.random.randint(0, 2, size=nsteps)\nsteps = np.where(draws &gt; 0, 1, -1)\nwalk2 = steps.cumsum()\n\n\nplt.plot(walk[:100]);\n\n\n\n\n\n\n\n\n\nwalk2.min(), walk2.max()\n\n(-3, 31)\n\n\n\n\nSimulating Many Random Walks at Once\n\nnwalks = 5000\nnsteps = 1000\n\n\ndraws = np.random.randint(0, 2, size=(nwalks, nsteps)) # 0 or 1\nsteps = np.where(draws &gt; 0, 1, -1)\nwalks = steps.cumsum(1)\n\n\ndraws\n\narray([[1, 0, 1, ..., 1, 0, 1],\n       [1, 0, 0, ..., 0, 0, 0],\n       [1, 0, 0, ..., 1, 1, 0],\n       ...,\n       [1, 1, 0, ..., 0, 1, 1],\n       [1, 1, 1, ..., 0, 0, 1],\n       [0, 0, 0, ..., 0, 1, 1]])\n\n\n\nwalks\n\narray([[  1,   0,   1, ...,   8,   7,   8],\n       [  1,   0,  -1, ...,  34,  33,  32],\n       [  1,   0,  -1, ...,   4,   5,   4],\n       ...,\n       [  1,   2,   1, ...,  24,  25,  26],\n       [  1,   2,   3, ...,  14,  13,  14],\n       [ -1,  -2,  -3, ..., -24, -23, -22]])\n\n\n\nwalks.max(), walks.min()\n\n(138, -133)\n\n\n\nhits30 = (np.abs(walks) &gt;= 30).any(1)\nhits30\n\narray([False,  True, False, ..., False,  True, False])\n\n\n\nhits30.sum() # Number that hit 30 or -30\n\n3410\n\n\n\ncrossing_times = (np.abs(walks[hits30]) &gt;= 30).argmax(1)\ncrossing_times.mean()\n\n498.8897360703812\n\n\n\nsteps = np.random.normal(loc=0, scale=0.25, size=(nwalks, nsteps))\n\nFeel free to experiment with other distributions for the steps other than equal-sized coin flips. You need only use a different random generator method, like standard_normal to generate normally distributed steps with some mean and standard deviation:\n\ndraws = 0.25 * rng.standard_normal((nwalks, nsteps)) # Walks: observations, Steps: features\n\n\nsample_walk = np.random.choice(len(draws))\nplt.plot(draws[sample_walk])\nplt.title(f\"Walk #{sample_walk}\");",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>NB: NumPy Continued</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-00-Time.html",
    "href": "notebooks/M05_NumPy/M05-00-Time.html",
    "title": "NB: Python Timing Experiment",
    "section": "",
    "text": "Using time\nOne way to get the runtime of a code block is to use the time module.\nAbout time\nThe time module provides a number of functions to get and compute time.\nThe simplest function is time(), which just returns the number of seconds elapsed since the Epoch.\nThe Epoch is 00:00:00 UTC on 1 January 1970, excluding leapseconds.\nIt corresponds roughly to when Unix was invented.\nfrom time import time\nt0 = time()\n\nfor i in range(10):\n    print(i, end=' ')\n\nt1 = time()\n\ndelta_t = t1 - t0\n\n0 1 2 3 4 5 6 7 8 9\nprint('t0 =', t0)\nprint('t1 =', t1)\nprint('runtime:', delta_t)\n\nt0 = 1663428793.540521\nt1 = 1663428793.541329\nruntime: 0.0008080005645751953",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>NB: Python Timing Experiment</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-00-Time.html#using-timeit",
    "href": "notebooks/M05_NumPy/M05-00-Time.html#using-timeit",
    "title": "NB: Python Timing Experiment",
    "section": "Using timeit",
    "text": "Using timeit\nTo get a better measure of runtime, we can use timeit, which measures timing across many runs.\nNote that timeit() will return the runtime across ALL runs. To get the mean runtime, you need to divide by the number of runs.\ntimeit() works by evaluating code blocks written as strings.\n\nfrom timeit import timeit\n  \nNUM_RUNS = 100\n\nDefine code blocks to compare.\n\nloop_code = ''' \nvals = []\nfor i in range(1, 100001):\n    if i % 2 == 1:\n        i *= -1\n    vals.append(i)\n'''\n\nlistcomp_code = ''' \nvals = [i*-1 for i in range(1,100001) if i % 2 == 1 ]\n'''\n\nPass code block strings to timeit functions.\n\nloop_mean_time = timeit(stmt = loop_code, number = NUM_RUNS) / NUM_RUNS\nlistcomp_mean_time = timeit(stmt = listcomp_code, number = NUM_RUNS) / NUM_RUNS\n\nPrint the results\n\nt_diff = loop_mean_time / listcomp_mean_time\nprint('loop =', loop_mean_time)\nprint('comp =', listcomp_mean_time)\nprint('loop/list =', t_diff)\nprint('list/loop =', 1/t_diff)\n\nloop = 0.011182495189999885\ncomp = 0.00927148506000009\nloop/list = 1.2061169400190757\nlist/loop = 0.8291070018336566",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>NB: Python Timing Experiment</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-00-Time.html#using-magic",
    "href": "notebooks/M05_NumPy/M05-00-Time.html#using-magic",
    "title": "NB: Python Timing Experiment",
    "section": "Using Magic",
    "text": "Using Magic\nInstead of calling time and timeit directly, we can use the so-called magic commands.\nMagic commands are % or %% prefixed commands that work in Jupyter notebooks and other IPython environments.\n% commands apply to single lines; they go at the beginning of the line.\n%% commands apply to cell blocks; they go at the top of the cell.\nMagic commands can take arguments. For more info, see * Chapter 3 in Wes McKinney’s Python for Data Analysis. * The official documentation\nPlacing %%timeit or %%time at the top of a cell will appy these functions to the cell block.\nPlacing %timeit or %time as the first item on a line of code will apply the to a single line.\nTypes of Time\n\nWall clock time measures how much time has passed, as if you were looking at the clock on your wall.\nCPU time refers to how many seconds the CPU was actually busy.\n\n\nimax = 10000\n\nUsing time to compare loop and comprehension\n\n%%time\n\nvals = []\nfor i in range(1, imax+1):\n    if i % 2 == 1:\n        i *= -1\n    vals.append(i)\n\nCPU times: user 1.69 ms, sys: 35 µs, total: 1.72 ms\nWall time: 1.73 ms\n\n\n\n%time vals = [i*-1 if i % 2 == 1 else i for i in range(1,imax+1)] \n\nCPU times: user 940 µs, sys: 32 µs, total: 972 µs\nWall time: 975 µs\n\n\nUsing timeit to compare loop and comprehension\n\n%%timeit\n\nvals = []\nimax = 10000\nfor i in range(1, imax+1):\n    if i % 2 == 1:\n        i *= -1\n    vals.append(i)\n\n1.08 ms ± 88 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n\n\n\nvals[:10]\n\n[-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]\n\n\n\n%timeit vals = [i*-1 if i % 2 == 1 else i for i in range(1,imax+1)] \n\n749 µs ± 3.32 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>NB: Python Timing Experiment</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html",
    "title": "NB: Basic File I/O",
    "section": "",
    "text": "Open Files with open()\nLet’s open a sample CSV file, biostats.csv.\nsrc_file_name = \"./sample_data_files/biostats.csv\"\nWe call the open() function and pass it two parameters: * The name of the file we want to open. * The mode in which the file is opened. It defaults to r which means open for reading in text mode. Other common values are: * w for writing (truncating the file if it already exists) * x for creating and writing to a new file * a for appending\nThe returns a file object whose type depends on the mode and through which the standard file operations such as reading and writing are performed. So, to read from the file, you need to have specified type r and to write you need to have specified w.\nThe file object is an iterator.\nFor more info, check out the Python docs or run open? from a code cell.\nNote, we sometimes call the file object a file “handle.”\n## open?\nfile_handle = open(src_file_name, 'r')\n.read() reads in the file as one long string.\nfile_as_big_string = file_handle.read()\nfile_as_big_string[:1000]\nSince the file object is an iterator, we can’t get the string again from the object.\nfile_as_big_string = file_handle.read() # Try reading from the handle again\nfile_as_big_string[:1000] # Nothing there since the iterator is exhausted\nSo, let’s create a new handle, read in the contents again, and then parse our string by newlines using .split(\"\\n\").\nfile_handle = open(\"./sample_data_files/biostats.csv\", 'r')\nfile_as_big_string = file_handle.read()\nfile_as_big_string.split(\"\\n\")\nA short-cut to this process is to call the .readlines() method, which returns a pre-made list of lines.\nNote that the newlines are preserved in this case.\nfile_handle = open(src_file_name, 'r')\nfile_as_list_of_strings = file_handle.readlines()\nfile_as_list_of_strings\nFile objects should be closed when you are done with them.\nfile_handle.close()",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>NB: Basic File I/O</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#open-files-with-open",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#open-files-with-open",
    "title": "NB: Basic File I/O",
    "section": "",
    "text": "This has some biometric statistics for a group of office workers.\nThere are 18 records, recording Name, Sex, Age, Height, Weight\nThere is an initial header line.\nThis file was downloaded from https://people.sc.fsu.edu/~jburkardt/data/csv/csv.html and modified slightly.",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>NB: Basic File I/O</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#use-a-with-block",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#use-a-with-block",
    "title": "NB: Basic File I/O",
    "section": "Use a with block",
    "text": "Use a with block\n… to automatically open and close the file i/o object\nThere is a better way to handle objects that need to be closed.\nOther examples of such objects are database handles.\nwith will automatically open and close the file handle.\n\nwith open(src_file_name, 'r') as infile:\n    file_as_list = infile.readlines()\n\n\nfile_as_list",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>NB: Basic File I/O</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#convert-into-a-2d-list",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#convert-into-a-2d-list",
    "title": "NB: Basic File I/O",
    "section": "Convert into a 2D list",
    "text": "Convert into a 2D list\nLet’s covert our list of strings to a list of lists, the former being the rows of data table and the latter the cells.\n\n## %%time\nlist_2d = []\nwith open(src_file_name, 'r') as infile:\n    for line in infile.readlines():\n        row = line.rstrip().split(\",\") # Note the use of rstrip()\n        list_2d.append(row)\n\n\nlist_2d\n\nNote that we now have do something with the column names and handle formating and casting each cell.",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>NB: Basic File I/O</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#using-a-list-comprehension",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#using-a-list-comprehension",
    "title": "NB: Basic File I/O",
    "section": "Using a list comprehension",
    "text": "Using a list comprehension\nWe can replace the entire code block above nested list comprehensions.\nRemember, you can put any expression into the first part of a comprehension, even another comprehension.\n\nlist_2d = [[cell.strip() for cell in line.rstrip().replace('\"', '').split(\",\")] \n        for line in open(src_file_name, 'r').readlines()]\n\n\nlist_2d",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>NB: Basic File I/O</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#converting-to-numpy",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#converting-to-numpy",
    "title": "NB: Basic File I/O",
    "section": "Converting to Numpy",
    "text": "Converting to Numpy\n\nimport numpy as np\n\nNumpy arrays must be of the same data types, and it also has no concept of column names, so we remove this row from our data.\n\ncol_names = list_2d[0]\n\n\ncol_names\n\n\nnp_matrix = np.array(list_2d[1:])\n\n\nnp_matrix\n\nHere we demonstrate slicing along both dimensions.",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>NB: Basic File I/O</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#array-slices",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#array-slices",
    "title": "NB: Basic File I/O",
    "section": "Array Slices",
    "text": "Array Slices\n\nnp_matrix[:2, :2]",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>NB: Basic File I/O</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#converting-data-types",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#converting-data-types",
    "title": "NB: Basic File I/O",
    "section": "Converting Data Types",
    "text": "Converting Data Types\nLet’s try to convert the data types of the numeric columns from strings to integers. One thing we might do is the following:\n\nnp_matrix[:, 2:5].astype(int)\n\nWe see that the strings are converted to integers.\nSo, let’s try to save the conversion results to the original array:\n\nnp_matrix[:, 2:5] = np_matrix[:, 2:5].astype(int)\n\n\nnp_matrix\n\nWhat happened?",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>NB: Basic File I/O</span>"
    ]
  },
  {
    "objectID": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#some-difficulties",
    "href": "notebooks/M05_NumPy/M05-01-BasicFileIO.html#some-difficulties",
    "title": "NB: Basic File I/O",
    "section": "Some Difficulties",
    "text": "Some Difficulties\nIt is pretty easy to import CSV files this way, but there are many difficulties you are likely to encounter if you use this as your default pattern for importing data. Here are just a few: - Not all sources are well-formed. They may have delimitters that are complex to parse, and the the data themselve may be hard to parse. - You have to keep the column names in a separate list or vector and then associate them with the data if and when necessary. - You have to convert each column vector into its appropriate data type yourself. Or, you have to create separate 2D arrays for each collection of columns with a common data type. This process also invovles human inspection of the file, as opposed to have a program try to figure it out for you.\nFor these reasons, other tools such as Pandas were created to make the work of a data scientist a bit easier and more productive.",
    "crumbs": [
      "M05 NumPy",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>NB: Basic File I/O</span>"
    ]
  },
  {
    "objectID": "modules/m06/m06-intro.html",
    "href": "modules/m06/m06-intro.html",
    "title": "M06 Pandas",
    "section": "",
    "text": "Topics",
    "crumbs": [
      "M06 Pandas"
    ]
  },
  {
    "objectID": "modules/m06/m06-intro.html#topics",
    "href": "modules/m06/m06-intro.html#topics",
    "title": "M06 Pandas",
    "section": "",
    "text": "Introduce Pandas and its relationship to NumPy\nUnderstand difference between Series and DataFrames\nUnderstand role of indexes in Pandas\nReview fundamental methods in Pandas",
    "crumbs": [
      "M06 Pandas"
    ]
  },
  {
    "objectID": "modules/m06/m06-intro.html#readings",
    "href": "modules/m06/m06-intro.html#readings",
    "title": "M06 Pandas",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\nMcKinney 2023, Chapter 5: Getting Started with Pandas\nGetting Started in Pandas (Official)",
    "crumbs": [
      "M06 Pandas"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html",
    "title": "NB: Introducting Pandas",
    "section": "",
    "text": "What is Pandas?\nPandas is a Python library designed to work with dataframes.\nEssentially, it adds a ton of usability features to NumPy.\nIt has become a standard library in data science.",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#pandas-data-frames",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#pandas-data-frames",
    "title": "NB: Introducting Pandas",
    "section": "Pandas Data Frames",
    "text": "Pandas Data Frames\nJust as NumPy introduces the n-dimensional array as a new data structure to Python, so Pandas introduces two:\nThe Series: a 1-dimensional labeled array capable of holding any data type.\nThe DataFrame: a 2-dimensional labeled array with columns of potentially different types.\n\n\n\n\n\n\nNote\n\n\n\nNote: Pandas used to have a 3-dimensional structure called a panel, but it has been removed from the library.\nIronically, the name “pandas” was partly derived the word “panel”: \\(pan(el)-da(ta)-s\\).\nTo handle higher dimensional data, the Pandas team suggests using XArray, which also build on NumPy arrays.\n\n\nBy far, the most important data structure in Pandas is the dataframe (sometimes spelled “data frame”), with the series playing a supporting – but crucial – role.\nIn fact, dataframe objects are built out of series objects.\nSo, to understand what a dataframe is and how it behaves, you need to understand what is series is and how it is constructed.\nBefore going into that, here are two quick observations about dataframes:\nFirst, dataframes are inspired by the R structure of the same name.\nThey have many similarities, but there are fundamental differences between the two that go beyond mere language differences.\nMost important is the Pandas dataframes have indexes, whereas R dataframes do not.\nSecond, it is helpful to think of Pandas as wrapper around NumPy and Matplotlib that makes it much easier to perform common operations, like select data by column name or visualizing plots.\nBut this comes at a cost – Pandas is slower than NumPy.\nThis represents the classic trade-off between ease-of-use for humnas and machine performance.",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#series-objects",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#series-objects",
    "title": "NB: Introducting Pandas",
    "section": "Series Objects",
    "text": "Series Objects\n\nAxis Labels (Indexes)\nA series is at heart a one-dimensional array with labels along its axis.\n\nLabels are essentially names that, ideally, uniquely identify each row (observation).\nIts data must be of a single type, like NumPy arrays (which they are internally).\nThe axis labels are collectively referred to as the index.\n\nThink of the index as a separate data structure that is attached to the array. * The array holds the data. * The index holds the names of the observations or things that the data are about.\nWhy have an index?\n\nIndexes provide a way to access elements of the array by name.\nThey allows series objects that share index labels to be combined.\nMany other things …\n\nIn fact, a dataframe is a collection of series with a common index.\nTo this collection of series, the dataframe also adds a set of labels along the horizontal axis. * The row index is axis 0. * The column index is called axis 1.\n\n\n\n\n\n\nThe row index is usually just called the index, while the column index is just called the columns.\n\n\n\nNote that both index and column labels can be multidimensional.\n\nThe are called Hierarchical Indexes and go the technical name of MultiIndexes.\nAs an example, consider that a table of text data might have a two-column index: (book_id, chap_id)\nSee the Pandas documentation.\n\nIt is crucial to understand the difference between the index of a dataframe and its data in order to understand how dataframes work.\nMany a headache is caused by not understanding this difference :-)\nIndexes are powerful and controversial. * They allow for all kinds of magic to take place when combining and accessing data. * But they are expensive and sometimes hard to work with (especially multiindexes). * They are especially difficult if you are coming from R and expecting dataframes to behave a certain way.\n\n\nSome visuals to help\n\n\nBut enough introduction.\nLet’s dive into how Pandas objects work in practice.",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#importing",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#importing",
    "title": "NB: Introducting Pandas",
    "section": "Importing",
    "text": "Importing\nWe import pandas like this, using the alias pd by convention:\n\nimport pandas as pd\n\nWe almost always import NumPy, too, since we use many of its functions with Pandas.\n\nimport numpy as np",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#data-frame-constructors",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#data-frame-constructors",
    "title": "NB: Introducting Pandas",
    "section": "Data Frame Constructors",
    "text": "Data Frame Constructors\nThere are several ways to create pandas data frames.\nPassing a dictionary of lists:\n\ndf = pd.DataFrame({\n    'x': [0, 2, 1, 5], \n    'y': [1, 1, 0, 0], \n    'z': [True, False, False, False]\n})\n\n\ndf\n\n\n\n\n\n\n\n\n\nx\ny\nz\n\n\n\n\n0\n0\n1\nTrue\n\n\n1\n2\n1\nFalse\n\n\n2\n1\n0\nFalse\n\n\n3\n5\n0\nFalse\n\n\n\n\n\n\n\n\n\ndf.index\n\nRangeIndex(start=0, stop=4, step=1)\n\n\n\nlist(df.index)\n\n[0, 1, 2, 3]\n\n\n\ndf.columns\n\nIndex(['x', 'y', 'z'], dtype='object')\n\n\n\nlist(df.columns)\n\n['x', 'y', 'z']\n\n\n\ndf.values\n\narray([[0, 1, True],\n       [2, 1, False],\n       [1, 0, False],\n       [5, 0, False]], dtype=object)\n\n\n\ntype(df.values)\n\nnumpy.ndarray\n\n\nPassing a list of tuples:\n\nmy_data = [\n    ('a', 1, True),\n    ('b', 2, False)\n]\ndf2 = pd.DataFrame(my_data, columns=['f1', 'f2', 'f3'])\n\n\ndf2\n\n\n\n\n\n\n\n\n\nf1\nf2\nf3\n\n\n\n\n0\na\n1\nTrue\n\n\n1\nb\n2\nFalse\n\n\n\n\n\n\n\n\nPassing the three required pieces: - columns as list - index as list - data as list of lists (2D)\n\ndf3 = pd.DataFrame(\n    columns=['x','y'], \n    index=['row1','row2','row3'], \n    data=[[9,3],[1,2],[4,6]])\n\n\ndf3\n\n\n\n\n\n\n\n\n\nx\ny\n\n\n\n\nrow1\n9\n3\n\n\nrow2\n1\n2\n\n\nrow3\n4\n6",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#naming-indexes",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#naming-indexes",
    "title": "NB: Introducting Pandas",
    "section": "Naming indexes",
    "text": "Naming indexes\nIt is helpful to name your indexes.\n\ndf2.index.name = 'obs_id'\n\n\ndf2\n\n\n\n\n\n\n\n\n\nf1\nf2\nf3\n\n\nobs_id\n\n\n\n\n\n\n\n0\na\n1\nTrue\n\n\n1\nb\n2\nFalse",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#copying-dataframes-with-copy",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#copying-dataframes-with-copy",
    "title": "NB: Introducting Pandas",
    "section": "Copying DataFrames with copy()",
    "text": "Copying DataFrames with copy()\nUse copy() to give the new df a clean break from the original.\nOtherwise, the copied df will point to the same object as the original.\n\ndf = pd.DataFrame(\n    {\n        'x':[0,2,1,5], \n        'y':[1,1,0,0], \n        'z':[True,False,False,False]\n    }\n) \n\n\ndf\n\n\n\n\n\n\n\n\n\nx\ny\nz\n\n\n\n\n0\n0\n1\nTrue\n\n\n1\n2\n1\nFalse\n\n\n2\n1\n0\nFalse\n\n\n3\n5\n0\nFalse\n\n\n\n\n\n\n\n\nWe create two copies, one “deep” and one “shallow”.\n\ndf_deep    = df.copy()  # deep copy; changes to df will not pass through\ndf_shallow = df         # shallow copy; changes to df will pass through\n\nIf we alter a value in the original …\n\ndf.x = 1\n\n\ndf\n\n\n\n\n\n\n\n\n\nx\ny\nz\n\n\n\n\n0\n1\n1\nTrue\n\n\n1\n1\n1\nFalse\n\n\n2\n1\n0\nFalse\n\n\n3\n1\n0\nFalse\n\n\n\n\n\n\n\n\n… then the shallow copy is also changed …\n\ndf_shallow\n\n\n\n\n\n\n\n\n\nx\ny\nz\n\n\n\n\n0\n1\n1\nTrue\n\n\n1\n1\n1\nFalse\n\n\n2\n1\n0\nFalse\n\n\n3\n1\n0\nFalse\n\n\n\n\n\n\n\n\n… while the deep copy is not.\n\ndf_deep\n\n\n\n\n\n\n\n\n\nx\ny\nz\n\n\n\n\n0\n0\n1\nTrue\n\n\n1\n2\n1\nFalse\n\n\n2\n1\n0\nFalse\n\n\n3\n5\n0\nFalse\n\n\n\n\n\n\n\n\nOf course, the reverse is true too – changes to the shallow copy affect the original:\n\ndf_shallow.y = 99\n\n\ndf\n\n\n\n\n\n\n\n\n\nx\ny\nz\n\n\n\n\n0\n1\n99\nTrue\n\n\n1\n1\n99\nFalse\n\n\n2\n1\n99\nFalse\n\n\n3\n1\n99\nFalse\n\n\n\n\n\n\n\n\nSo, df_shallow mirrors changes to df, since it references its indices and data.\ndf_deep does not reference df, and so changes to df do not impact df_deep.\nLet’s reset our dataframe.\n\ndf = pd.DataFrame({'x':[0,2,1,5], 'y':[1,1,0,0], 'z':[True,False,False,False]})",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-data-types",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-data-types",
    "title": "NB: Introducting Pandas",
    "section": "Column Data Types",
    "text": "Column Data Types\n\nWith .types\n\ndf.dtypes\n\nx    int64\ny    int64\nz     bool\ndtype: object\n\n\n\n\nWith .info()\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 4 entries, 0 to 3\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype\n---  ------  --------------  -----\n 0   x       4 non-null      int64\n 1   y       4 non-null      int64\n 2   z       4 non-null      bool \ndtypes: bool(1), int64(2)\nmemory usage: 200.0 bytes",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-renaming",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-renaming",
    "title": "NB: Introducting Pandas",
    "section": "Column Renaming",
    "text": "Column Renaming\nCan rename one or more fields at once using a dict.\nRename the field z to is_label:\n\ndf = df.rename(columns={'z': 'is_label'})\n\n\ndf\n\n\n\n\n\n\n\n\n\nx\ny\nis_label\n\n\n\n\n0\n0\n1\nTrue\n\n\n1\n2\n1\nFalse\n\n\n2\n1\n0\nFalse\n\n\n3\n5\n0\nFalse\n\n\n\n\n\n\n\n\nYou can also change column names this way:\n\nold_cols = df.columns # Keep a copy so we can revert\ndf.columns = ['X','Y', 'LABEL']\n\n\ndf\n\n\n\n\n\n\n\n\n\nX\nY\nLABEL\n\n\n\n\n0\n0\n1\nTrue\n\n\n1\n2\n1\nFalse\n\n\n2\n1\n0\nFalse\n\n\n3\n5\n0\nFalse\n\n\n\n\n\n\n\n\n\ndf.columns = old_cols # Reset things\n\n\ndf\n\n\n\n\n\n\n\n\n\nx\ny\nis_label\n\n\n\n\n0\n0\n1\nTrue\n\n\n1\n2\n1\nFalse\n\n\n2\n1\n0\nFalse\n\n\n3\n5\n0\nFalse\n\n\n\n\n\n\n\n\nYou can also transform column named easily:\n\ndf3\n\n\n\n\n\n\n\n\n\nx\ny\n\n\n\n\nrow1\n9\n3\n\n\nrow2\n1\n2\n\n\nrow3\n4\n6\n\n\n\n\n\n\n\n\n\ndf3.columns = df3.columns.str.upper()\n\n\ndf3\n\n\n\n\n\n\n\n\n\nX\nY\n\n\n\n\nrow1\n9\n3\n\n\nrow2\n1\n2\n\n\nrow3\n4\n6",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-referencing",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-referencing",
    "title": "NB: Introducting Pandas",
    "section": "Column Referencing",
    "text": "Column Referencing\nPandas supports both bracket notation and dot notation.\nBracket\n\ndf['y']\n\n0    1\n1    1\n2    0\n3    0\nName: y, dtype: int64\n\n\nDot (i.e. as object attribute)\n\ndf.y\n\n0    1\n1    1\n2    0\n3    0\nName: y, dtype: int64\n\n\nDot notation is very convenient, since as object attributes they can be tab-completed in various editing environments.\nBut: - It only works if the column names are not reserved words. - It can’t be used when creating a new column (see below).\nIt is convenient to names columns with a prefix, e.g. doc_title, doc_year, doc_author, etc. to avoid name collisions.\nColumn attributes and methods work with both:\n\ndf.y.values, df['y'].values\n\n(array([1, 1, 0, 0]), array([1, 1, 0, 0]))\n\n\nshow only the first value, by indexing:\n\ndf.y.values[0]\n\n1",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-selection",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#column-selection",
    "title": "NB: Introducting Pandas",
    "section": "Column Selection",
    "text": "Column Selection\nYou select columns from a dataframe by passing a value or list (or any expression that evaluates to a list).\nCalling a columns with a scalar returns a Series:\n\ndf['x']\n\n0    0\n1    2\n2    1\n3    5\nName: x, dtype: int64\n\n\n\ntype(df['x'])\n\npandas.core.series.Series\n\n\nCalling a column with a list returns a dataframe:\n\ndf[['x']]\n\n\n\n\n\n\n\n\n\nx\n\n\n\n\n0\n0\n\n\n1\n2\n\n\n2\n1\n\n\n3\n5\n\n\n\n\n\n\n\n\n\ntype(df[['x']])\n\npandas.core.frame.DataFrame\n\n\nIn Pandas, we can use “fancy indexing” with labels:\n\ndf[['y', 'x']]\n\n\n\n\n\n\n\n\n\ny\nx\n\n\n\n\n0\n1\n0\n\n\n1\n1\n2\n\n\n2\n0\n1\n\n\n3\n0\n5\n\n\n\n\n\n\n\n\nWe can put in a list comprehension, too:\n\ndf[[col for col in df.columns if col not in ['x','y']]]\n\n\n\n\n\n\n\n\n\nis_label\n\n\n\n\n0\nTrue\n\n\n1\nFalse\n\n\n2\nFalse\n\n\n3\nFalse",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#adding-new-columns",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#adding-new-columns",
    "title": "NB: Introducting Pandas",
    "section": "Adding New Columns",
    "text": "Adding New Columns\nIt is typical to create a new column from existing columns.\nIn this example, a new column (or field) is created by summing x and y:\n\ndf['x_plus_y'] = df.x + df.y\n\n\ndf\n\n\n\n\n\n\n\n\n\nx\ny\nis_label\nx_plus_y\n\n\n\n\n0\n0\n1\nTrue\n1\n\n\n1\n2\n1\nFalse\n3\n\n\n2\n1\n0\nFalse\n1\n\n\n3\n5\n0\nFalse\n5\n\n\n\n\n\n\n\n\nNote the use of bracket notation on the left.\nWhen new columns are created, you must use bracket notation.",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#removing-columns-with-del-and-.drop",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#removing-columns-with-del-and-.drop",
    "title": "NB: Introducting Pandas",
    "section": "Removing Columns with del() and .drop()",
    "text": "Removing Columns with del() and .drop()\n\ndel()\ndel() can be used to delete any object in Python.\ndel does the same thing.\ndel() can drop a DataFrame or single columns from the frame\n\ndf_drop = df.copy()\n\n\ndf_drop.head(2)\n\n\n\n\n\n\n\n\n\nx\ny\nis_label\nx_plus_y\n\n\n\n\n0\n0\n1\nTrue\n1\n\n\n1\n2\n1\nFalse\n3\n\n\n\n\n\n\n\n\n\ndel(df_drop['x'])\n\n\ndf_drop\n\n\n\n\n\n\n\n\n\ny\nis_label\nx_plus_y\n\n\n\n\n0\n1\nTrue\n1\n\n\n1\n1\nFalse\n3\n\n\n2\n0\nFalse\n1\n\n\n3\n0\nFalse\n5\n\n\n\n\n\n\n\n\n\n\n.drop()\nCan drop one or more columns.\ntakes axis parameter: - axis=0 refers to rows\n- axis=1 refers to columns\n\ndf_drop = df_drop.drop(['x_plus_y', 'is_label'], axis=1)\n\n\ndf_drop\n\n\n\n\n\n\n\n\n\ny\n\n\n\n\n0\n1\n\n\n1\n1\n\n\n2\n0\n\n\n3\n0",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#load-iris-dataset",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#load-iris-dataset",
    "title": "NB: Introducting Pandas",
    "section": "Load Iris Dataset",
    "text": "Load Iris Dataset\nLet’s load a bigger data set to explore more functionality.\nThe function load_dataset() in the seaborn package loads the built-in dataset.\n\nimport seaborn as sns\niris = sns.load_dataset('iris')\n\nCheck the data type of iris:\n\ntype(iris)\n\npandas.core.frame.DataFrame\n\n\n\nSee the first and last records with .head() and .tail()\n\niris.head()\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n\n\n\n\n\n\n\niris.head(10)\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5\n5.4\n3.9\n1.7\n0.4\nsetosa\n\n\n6\n4.6\n3.4\n1.4\n0.3\nsetosa\n\n\n7\n5.0\n3.4\n1.5\n0.2\nsetosa\n\n\n8\n4.4\n2.9\n1.4\n0.2\nsetosa\n\n\n9\n4.9\n3.1\n1.5\n0.1\nsetosa\n\n\n\n\n\n\n\n\n\niris.tail()\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n145\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n146\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n147\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n148\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n149\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\n\n\n\n\n\n\nInspect metadata\n\niris.dtypes\n\nsepal_length    float64\nsepal_width     float64\npetal_length    float64\npetal_width     float64\nspecies          object\ndtype: object\n\n\nshape (rows, columns):\n\niris.shape\n\n(150, 5)\n\n\nAlternatively, len() returns row (record) count:\n\nlen(iris)\n\n150\n\n\nColumn names:\n\niris.columns\n\nIndex(['sepal_length', 'sepal_width', 'petal_length', 'petal_width',\n       'species'],\n      dtype='object')\n\n\n\n\nGet it all with .info()\n\niris.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 150 entries, 0 to 149\nData columns (total 5 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   sepal_length  150 non-null    float64\n 1   sepal_width   150 non-null    float64\n 2   petal_length  150 non-null    float64\n 3   petal_width   150 non-null    float64\n 4   species       150 non-null    object \ndtypes: float64(4), object(1)\nmemory usage: 6.0+ KB",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#the-index",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#the-index",
    "title": "NB: Introducting Pandas",
    "section": "The Index",
    "text": "The Index\n\niris.index\n\nRangeIndex(start=0, stop=150, step=1)\n\n\nWe can name indexes, and it is important to do so in many cases.\n\niris.index.name = 'obs_id' # Each observation is a unique plant\n\n\niris\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\nobs_id\n\n\n\n\n\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n...\n...\n...\n...\n...\n...\n\n\n145\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n146\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n147\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n148\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n149\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\n150 rows × 5 columns\n\n\n\n\nWe can also redefine indexes to reflect the logic of our data.\nIn this data set, the species of the flower is part of its identity, so it can be part of the index.\nThe other features vary by individual.\nNote that species is also a label that can be used for training a model to predict the species of an iris flower. In that use case, the column would be pulled out into a separate vector.\n\niris_w_idx = iris.reset_index().set_index(['species','obs_id'])\n\n\niris_w_idx\n\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\n\n\nspecies\nobs_id\n\n\n\n\n\n\n\n\nsetosa\n0\n5.1\n3.5\n1.4\n0.2\n\n\n1\n4.9\n3.0\n1.4\n0.2\n\n\n2\n4.7\n3.2\n1.3\n0.2\n\n\n3\n4.6\n3.1\n1.5\n0.2\n\n\n4\n5.0\n3.6\n1.4\n0.2\n\n\n...\n...\n...\n...\n...\n...\n\n\nvirginica\n145\n6.7\n3.0\n5.2\n2.3\n\n\n146\n6.3\n2.5\n5.0\n1.9\n\n\n147\n6.5\n3.0\n5.2\n2.0\n\n\n148\n6.2\n3.4\n5.4\n2.3\n\n\n149\n5.9\n3.0\n5.1\n1.8\n\n\n\n\n150 rows × 4 columns",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#row-selection-filtering",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#row-selection-filtering",
    "title": "NB: Introducting Pandas",
    "section": "Row Selection (Filtering)",
    "text": "Row Selection (Filtering)\n\niloc[]\nYou can extract rows using indexes with iloc[].\nThis fetches row 3, and all columns.\n\niris.iloc[2]\n\nsepal_length       4.7\nsepal_width        3.2\npetal_length       1.3\npetal_width        0.2\nspecies         setosa\nName: 2, dtype: object\n\n\nfetch rows with indices 1,2 (the right endpoint is exclusive), and all columns.\n\niris.iloc[1:3]\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\nobs_id\n\n\n\n\n\n\n\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n\n\n\n\n\n\nfetch rows with indices 1,2 and first three columns (positions 0, 1, 2)\n\n\nCombining Filtering and Selecting\nSo, remember the comma notation from NumPy – it is used here.\nThe first element is a row selector, the second a column selector.\nIn database terminology, row selection is called filtering.\n\niris.iloc[1:3, 0:3]\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\n\n\nobs_id\n\n\n\n\n\n\n\n1\n4.9\n3.0\n1.4\n\n\n2\n4.7\n3.2\n1.3\n\n\n\n\n\n\n\n\nYou can apply slices to column names too. You don’t need .iloc[] here.\n\niris.columns[0:3]\n\nIndex(['sepal_length', 'sepal_width', 'petal_length'], dtype='object')\n\n\n\n\n.loc[]\nFiltering can also be done with .loc[]. This uses the row names and column names.\nHere we ask for rows with labels (indexes) 1-3, and it gives exactly that\n.iloc[] returned rows with indices 1,2.\nAuthor note: This is by far the more useful of the two in my experience.\n\niris.loc[1:3]\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\nobs_id\n\n\n\n\n\n\n\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n\n\n\n\n\n\n\niris.loc[1:3, ['sepal_width','sepal_length']]\n\n\n\n\n\n\n\n\n\nsepal_width\nsepal_length\n\n\nobs_id\n\n\n\n\n\n\n1\n3.0\n4.9\n\n\n2\n3.2\n4.7\n\n\n3\n3.1\n4.6\n\n\n\n\n\n\n\n\nNote the different behavior of the slice here – with .loc, 1:3 is short-hand for [1,2,3], not a range of offsets.\n\niris.loc[[1,2,3]]\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\nobs_id\n\n\n\n\n\n\n\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n\n\n\n\n\n\nSo, we are not using normal slicing here:\n\niris.loc[[:-1]]\n\nSyntaxError: invalid syntax (170941475.py, line 1)\n\n\nAlthough this works:\n\niris.loc[:]\n\nSubset on columns with column name (as a string) or list of strings\n\niris.loc[1:3, ['sepal_length','petal_width']]\n\nSelect all rows, specific columns\n\niris.loc[:, ['sepal_length','petal_width']]\n\n\n\n.loc[] with MultiIndex\nRecall our dataframe with a two element index:\n\niris_w_idx\n\nSelecting a single observation by it’s key, i.e. full label, uses a tuple:\n\niris_w_idx.loc[('setosa',0)] # df.at[r,c]\n\nSelecting just the setosas:\n\niris_w_idx.loc['setosa']\n\nGrabbing one species and one feature:\n\niris_w_idx.loc['setosa', 'sepal_length'].head()\n\nThis returns a series. If we want a dataframe back, we can use .to_frame():\n\niris_w_idx.loc['setosa', 'sepal_length'].to_frame().head()\n\nWe use a tuple to index multiple index levels.\n\niris_w_idx.loc[('setosa', 5)]\n\nOr a list to get multiple rows, a la fancy indexing.\n\niris_w_idx.loc[['setosa','virginica']]\n\n\n\nAnother Example\n\ndf_cat = pd.DataFrame(\n    index=['burmese', 'persian', 'maine_coone'],\n    columns=['x'],\n    data=[2,1,3]\n)\n\n\ndf_cat\n\n\ndf_cat.iloc[:2]\n\n\ndf_cat.iloc[0:1]\n\n\ndf_cat.loc['burmese']\n\n\ndf_cat.loc[['burmese','maine_coone']]",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#boolean-filtering",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#boolean-filtering",
    "title": "NB: Introducting Pandas",
    "section": "Boolean Filtering",
    "text": "Boolean Filtering\nIt’s very common to subset a dataframe based on some condition on the data.\nNote that even though we are filtering rows, we are not using .loc[] or .iloc[] here.\nPandas knows what to do if you pass a boolean structure.\n\niris.sepal_length &gt;= 7.5\n\n\niris[iris.sepal_length &gt;= 7.5]\n\n\niris[(iris.sepal_length &gt;= 4.5) & (iris.sepal_length &lt;= 4.7)]\n\n\niris.loc[(iris.sepal_length &gt;= 4.5) & (iris.sepal_length &lt;= 4.7)]\n\n\niris.loc[(iris.sepal_length &gt;= 4.5) & (iris.sepal_length &lt;= 4.7), ['sepal_length']]\n\n\nMasking\nHere’s an example of masking using boolean conditions passed to the dataframe selector:\nHere are the values for the feature sepal length:\n\niris.sepal_length.values\n\nAnd here are the boolean values generated by applying a comparison operator to those values:\n\nmask = iris.sepal_length &gt;= 7.5\n\n\nmask.values\n\n\nmask.values.astype('int')\n\nThe two sets of values have the same shape.\nWe can now overlay the logical values over the numeric ones and keep only what is True:\n\niris.sepal_length[mask].values",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#working-with-missing-data",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#working-with-missing-data",
    "title": "NB: Introducting Pandas",
    "section": "Working with Missing Data",
    "text": "Working with Missing Data\nPandas primarily uses the data type np.nan from NumPy to represent missing data.\n\ndf_miss = pd.DataFrame({\n    'x': [2, np.nan, 1], \n    'y': [np.nan, np.nan, 6]}\n)\n\nThese values appear as NaNs:\n\ndf_miss\n\n\n.dropna()\nThis will drop all rows with missing data in any column.\nDetails\n\ndf_drop_all = df_miss.dropna()\ndf_drop_all\n\nThe subset parameter takes a list of column names to specify which columns should have missing values.\n\ndf_drop_x = df_miss.dropna(subset=['x'])\ndf_drop_x\n\n\n\n.fillna()\nThis will replace missing values with whatever you set it to, e.g. \\(0\\)s.\nWe can pass the results of an operation – for example to peform simple imputation, we can replace missing values in each column with the median value of the respective column:\n\ndf_filled = df_miss.fillna(df_miss.median())\n\n\ndf_filled",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#sorting",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#sorting",
    "title": "NB: Introducting Pandas",
    "section": "Sorting",
    "text": "Sorting\n\n.sort_values()\nSort by values - by parameter takes string or list of strings - ascending takes True or False - inplace will save sorted values into the df\nDetails\n\niris.sort_values(by=['sepal_length','petal_width'], ascending=False)\n\n\n\n.sort_index()\nSort by index. Example sorts by descending index\n\niris.sort_index(axis=0, ascending=False)",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#statistics",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#statistics",
    "title": "NB: Introducting Pandas",
    "section": "Statistics",
    "text": "Statistics\n\ndescribe()\n\niris.describe()\n\n\niris.describe().T\n\n\niris.species.describe()\n\n\niris.sepal_length.describe()\n\n\n\nvalue_counts()\nThis is a highly useful function for showing the frequency for each distinct value.\nParameters give the ability to sort by count or index, normalize, and more.\nDetails\n\niris.species.value_counts()\n\n\nSPECIES = iris.species.value_counts().to_frame('n')\n\n\nSPECIES\n\nShow percentages instead of counts\n\niris.species.value_counts(normalize=True)\n\nThe methods returns a series that can be converted into a dataframe.\n\nSEPAL_LENGTH = iris.sepal_length.value_counts().to_frame('n')\n\n\nSEPAL_LENGTH.head()\n\nYou can run .value_counts() on a column to get a kind of histogram:\n\nSEPAL_LENGTH.sort_index().plot.bar(figsize=(8,4), rot=45);\n\n\niris.sepal_length.hist();\n\n\n\n.mean()\nOperations like this generally exclude missing data.\nSo, it is import to convert missing data to values if they need to be considered in the denominator.\n\niris.sepal_length.mean()\n\n\n\n.max()\n\niris.sepal_length.max()\n\n\n\n.std()\nThis standard deviation.\n\niris.sepal_length.std()\n\n\n\n.corr()\n\n# iris.corr() # Won't work because of string column\n\n\niris.corr(numeric_only=True)\n\n\niris_w_idx.corr()\n\nCorrelation can be computed on two fields by subsetting on them:\n\niris[['sepal_length','petal_length']].corr()\n\n\niris[['sepal_length','petal_length','sepal_width']].corr()",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#styling",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#styling",
    "title": "NB: Introducting Pandas",
    "section": "Styling",
    "text": "Styling\n\niris.corr(numeric_only=True).style.background_gradient(cmap=\"Blues\", axis=None)\n\n\niris.corr(numeric_only=True).style.bar(axis=None)",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#visualization",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#visualization",
    "title": "NB: Introducting Pandas",
    "section": "Visualization",
    "text": "Visualization\nScatterplot using Seabprn on the df columns sepal_length, petal_length.\nVisualization will be covered separately in more detail.\n\niris.plot.scatter('sepal_length', 'petal_length');\n\n\niris.sort_values(list(iris.columns)).plot(style='o', figsize=(10,10));\n\n\nfrom pandas.plotting import scatter_matrix\n\n\nscatter_matrix(iris, figsize=(10,10));",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#save-to-csv-file",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#save-to-csv-file",
    "title": "NB: Introducting Pandas",
    "section": "Save to CSV File",
    "text": "Save to CSV File\nCommon to save df to a csv file. The full path (path + filename) is required.\nThere are also options to save to a database and to other file formats,\nCommon optional parameters: - sep - delimiter - index - saving index column or not\nDetails\n\niris.to_csv('./iris_data.csv')",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-01-Pandas1.html#read-from-csv-file",
    "href": "notebooks/M06_Pandas/M06-01-Pandas1.html#read-from-csv-file",
    "title": "NB: Introducting Pandas",
    "section": "Read from CSV File",
    "text": "Read from CSV File\nread_csv() reads from csv into DataFrame\ntakes full filepath\nDetails\n\niris_loaded = pd.read_csv('./iris_data.csv').set_index('obs_id')\n\n\niris_loaded.head(2)",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>NB: Introducting Pandas</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html",
    "title": "NB: Introducing Pandas II",
    "section": "",
    "text": "Set Up\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\niris = sns.load_dataset('iris')\niris.head(2)\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\nimport sys\nsys.getsizeof(iris)\n\n14764\niris.iloc[:,:4]\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\n\n\n1\n4.9\n3.0\n1.4\n0.2\n\n\n2\n4.7\n3.2\n1.3\n0.2\n\n\n3\n4.6\n3.1\n1.5\n0.2\n\n\n4\n5.0\n3.6\n1.4\n0.2\n\n\n...\n...\n...\n...\n...\n\n\n145\n6.7\n3.0\n5.2\n2.3\n\n\n146\n6.3\n2.5\n5.0\n1.9\n\n\n147\n6.5\n3.0\n5.2\n2.0\n\n\n148\n6.2\n3.4\n5.4\n2.3\n\n\n149\n5.9\n3.0\n5.1\n1.8\n\n\n\n\n150 rows × 4 columns\niris.iloc[:,:4].mean()\n\nsepal_length    5.843333\nsepal_width     3.057333\npetal_length    3.758000\npetal_width     1.199333\ndtype: float64\niris.iloc[:,:4].mean(axis=1)\n\n0      2.550\n1      2.375\n2      2.350\n3      2.350\n4      2.550\n       ...  \n145    4.300\n146    3.925\n147    4.175\n148    4.325\n149    3.950\nLength: 150, dtype: float64\niris.iloc[:,:4].mean(axis=None)\n\n3.4644999999999997\niris.iloc[:,:4].head().style.background_gradient(cmap=\"YlGnBu\", axis=None)\n\n\n\n\n\n\n\n \nsepal_length\nsepal_width\npetal_length\npetal_width\n\n\n\n\n0\n5.100000\n3.500000\n1.400000\n0.200000\n\n\n1\n4.900000\n3.000000\n1.400000\n0.200000\n\n\n2\n4.700000\n3.200000\n1.300000\n0.200000\n\n\n3\n4.600000\n3.100000\n1.500000\n0.200000\n\n\n4\n5.000000\n3.600000\n1.400000\n0.200000",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>NB: Introducing Pandas II</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#apply-lambda-functions-with-.apply",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#apply-lambda-functions-with-.apply",
    "title": "NB: Introducing Pandas II",
    "section": "Apply Lambda Functions with .apply()",
    "text": "Apply Lambda Functions with .apply()\nApply a transformation to each record. Uses a lambda function.\nThe apply() method should be used after you have established that you can’t use a vectorized function.\n\niris['sepal_len_sq'] = iris.sepal_length.apply(lambda x: x**2)\niris.head(5)\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\nsepal_len_sq\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n26.01\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n24.01\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n22.09\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n21.16\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n25.00\n\n\n\n\n\n\n\n\nTransformation involving multiple columns. Uses axis=1 to access columns.\nCompute average of sepal_length, sepal_width:\n\niris['sepal_len_wid_avg'] = iris[['sepal_length','sepal_width']]\\\n    .apply(lambda x: (x.sepal_length + x.sepal_width) / 2, axis=1)\niris.head()\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\nsepal_len_sq\nsepal_len_wid_avg\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n26.01\n4.30\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n24.01\n3.95\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n22.09\n3.95\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n21.16\n3.85\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n25.00\n4.30\n\n\n\n\n\n\n\n\nVectorized Version\n\niris['foo'] = iris.sepal_length**2\n\n\niris\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\nsepal_len_sq\nsepal_len_wid_avg\nfoo\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n26.01\n4.30\n26.01\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n24.01\n3.95\n24.01\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n22.09\n3.95\n22.09\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n21.16\n3.85\n21.16\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n25.00\n4.30\n25.00\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n145\n6.7\n3.0\n5.2\n2.3\nvirginica\n44.89\n4.85\n44.89\n\n\n146\n6.3\n2.5\n5.0\n1.9\nvirginica\n39.69\n4.40\n39.69\n\n\n147\n6.5\n3.0\n5.2\n2.0\nvirginica\n42.25\n4.75\n42.25\n\n\n148\n6.2\n3.4\n5.4\n2.3\nvirginica\n38.44\n4.80\n38.44\n\n\n149\n5.9\n3.0\n5.1\n1.8\nvirginica\n34.81\n4.45\n34.81\n\n\n\n\n150 rows × 8 columns\n\n\n\n\n\n%time iris.sepal_length**2\n\nCPU times: user 63 µs, sys: 70 µs, total: 133 µs\nWall time: 137 µs\n\n\n0      26.01\n1      24.01\n2      22.09\n3      21.16\n4      25.00\n       ...  \n145    44.89\n146    39.69\n147    42.25\n148    38.44\n149    34.81\nName: sepal_length, Length: 150, dtype: float64\n\n\nCompare to .apply()\n\n%time iris.sepal_length.apply(lambda x: x**2)\n\nCPU times: user 234 µs, sys: 0 ns, total: 234 µs\nWall time: 240 µs\n\n\n0      26.01\n1      24.01\n2      22.09\n3      21.16\n4      25.00\n       ...  \n145    44.89\n146    39.69\n147    42.25\n148    38.44\n149    34.81\nName: sepal_length, Length: 150, dtype: float64",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>NB: Introducing Pandas II</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#aggregation",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#aggregation",
    "title": "NB: Introducing Pandas II",
    "section": "Aggregation",
    "text": "Aggregation\nInvolves one or more of:\n\nsplitting the data into groups\napplying a function to each group\ncombining results\n\n\n.groupby()\nCompute mean of each column, grouped (separately) by species\n\niris.groupby(\"species\").mean()\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nsepal_len_sq\nsepal_len_wid_avg\nfoo\n\n\nspecies\n\n\n\n\n\n\n\n\n\n\n\nsetosa\n5.006\n3.428\n1.462\n0.246\n25.1818\n4.217\n25.1818\n\n\nversicolor\n5.936\n2.770\n4.260\n1.326\n35.4972\n4.353\n35.4972\n\n\nvirginica\n6.588\n2.974\n5.552\n2.026\n43.7980\n4.781\n43.7980\n\n\n\n\n\n\n\n\n\n\npd.pivot_table()\nApply a function aggfunc to selected values grouped by columns\nDetails\nCompute mean sepal length for each species:\n\npd.pivot_table(iris, values=\"sepal_length\", columns=[\"species\"], aggfunc = np.mean)\n\n\n\n\n\n\n\n\nspecies\nsetosa\nversicolor\nvirginica\n\n\n\n\nsepal_length\n5.006\n5.936\n6.588",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>NB: Introducing Pandas II</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#stacking-and-unstacking",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#stacking-and-unstacking",
    "title": "NB: Introducing Pandas II",
    "section": "Stacking and Unstacking",
    "text": "Stacking and Unstacking\nSimilar to pivoting, but requires – and takes advantage of – indexes.\n\n.unstack()\nDetails\nLet’s look at what unstack() does with a dataset from Seaborn’s collection.\n\nattention = sns.load_dataset('attention')\n\n\nattention.sample(10)\n\n\n\n\n\n\n\n\n\nUnnamed: 0\nsubject\nattention\nsolutions\nscore\n\n\n\n\n10\n10\n11\nfocused\n1\n6.0\n\n\n43\n43\n4\ndivided\n3\n5.0\n\n\n18\n18\n19\nfocused\n1\n5.0\n\n\n1\n1\n2\ndivided\n1\n3.0\n\n\n8\n8\n9\ndivided\n1\n2.0\n\n\n7\n7\n8\ndivided\n1\n5.0\n\n\n11\n11\n12\nfocused\n1\n8.0\n\n\n16\n16\n17\nfocused\n1\n7.0\n\n\n42\n42\n3\ndivided\n3\n6.0\n\n\n20\n20\n1\ndivided\n2\n4.0\n\n\n\n\n\n\n\n\nThis dataframe appears to record the results of an experiment on human attention.\nEach row is a trial or observation in that experiment.\nAn analysis of the columns in this dataframe show that\n\nscore is a measured outcome,\nsubjects are probably individuals in a comparative study where two groups,\nthose with attention divided and those with attention focused,\nare subject to three different solutions applied to the performance of some task.\nUnnamed: 0 is just the row number as index.\n\nThe purpose of the test performed in each trial seems to be see which solutions are best at overcoming divied attention in the performance of those tasks.\nLet’s restructure our data to reflect these assumptions.\n\nattention1 = attention.set_index(['attention','solutions','subject']).sort_index().drop('Unnamed: 0', axis=1)\n\n\nattention1.head(20)\n\n\n\n\n\n\n\n\n\n\n\nscore\n\n\nattention\nsolutions\nsubject\n\n\n\n\n\ndivided\n1\n1\n2.0\n\n\n2\n3.0\n\n\n3\n3.0\n\n\n4\n5.0\n\n\n5\n4.0\n\n\n6\n5.0\n\n\n7\n5.0\n\n\n8\n5.0\n\n\n9\n2.0\n\n\n10\n6.0\n\n\n2\n1\n4.0\n\n\n2\n4.0\n\n\n3\n5.0\n\n\n4\n7.0\n\n\n5\n5.0\n\n\n6\n5.0\n\n\n7\n4.5\n\n\n8\n7.0\n\n\n9\n3.0\n\n\n10\n5.0\n\n\n\n\n\n\n\n\nWe can use .unstack() to provide a nice, synoptic view of these data.\n\nattention2 = attention1.unstack()\nattention2.fillna('')\n\n\n\n\n\n\n\n\n\n\nscore\n\n\n\nsubject\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nattention\nsolutions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndivided\n1\n2.0\n3.0\n3.0\n5.0\n4.0\n5.0\n5.0\n5.0\n2.0\n6.0\n\n\n\n\n\n\n\n\n\n\n\n\n2\n4.0\n4.0\n5.0\n7.0\n5.0\n5.0\n4.5\n7.0\n3.0\n5.0\n\n\n\n\n\n\n\n\n\n\n\n\n3\n7.0\n5.0\n6.0\n5.0\n8.0\n6.0\n6.0\n8.0\n7.0\n6.0\n\n\n\n\n\n\n\n\n\n\n\n\nfocused\n1\n\n\n\n\n\n\n\n\n\n\n6.0\n8.0\n6.0\n8.0\n8.0\n6.0\n7.0\n7.0\n5.0\n6.0\n\n\n2\n\n\n\n\n\n\n\n\n\n\n5.0\n9.0\n5.0\n8.0\n8.0\n8.0\n7.0\n8.0\n6.0\n6.0\n\n\n3\n\n\n\n\n\n\n\n\n\n\n6.0\n8.0\n9.0\n7.0\n7.0\n7.0\n6.0\n6.0\n6.0\n5.0\n\n\n\n\n\n\n\n\n\nattention2.fillna(0).style.background_gradient(axis=None)\n\n\n\n\n\n\n\n \n \nscore\n\n\n \nsubject\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\nattention\nsolutions\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\n\n\n\ndivided\n1\n2.000000\n3.000000\n3.000000\n5.000000\n4.000000\n5.000000\n5.000000\n5.000000\n2.000000\n6.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n2\n4.000000\n4.000000\n5.000000\n7.000000\n5.000000\n5.000000\n4.500000\n7.000000\n3.000000\n5.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n3\n7.000000\n5.000000\n6.000000\n5.000000\n8.000000\n6.000000\n6.000000\n8.000000\n7.000000\n6.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\nfocused\n1\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n6.000000\n8.000000\n6.000000\n8.000000\n8.000000\n6.000000\n7.000000\n7.000000\n5.000000\n6.000000\n\n\n2\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n5.000000\n9.000000\n5.000000\n8.000000\n8.000000\n8.000000\n7.000000\n8.000000\n6.000000\n6.000000\n\n\n3\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n6.000000\n8.000000\n9.000000\n7.000000\n7.000000\n7.000000\n6.000000\n6.000000\n6.000000\n5.000000\n\n\n\n\n\n\nWe can see clearly the data form two groups by attention, each consisting of 10 subjects, each employing three solutions.\nBy unstacking again, we can get a sense of which solution worked best.\n\nattention2.mean(1).unstack().T.style.background_gradient(axis=None)\n\n\n\n\n\n\n\nattention\ndivided\nfocused\n\n\nsolutions\n \n \n\n\n\n\n1\n4.000000\n6.700000\n\n\n2\n4.950000\n7.000000\n\n\n3\n6.400000\n6.700000\n\n\n\n\n\n\nIt appears the solution 3 performed well.\n\n\n.stack()\nStack is the opposite of .unstack(), of course.\nIt will project a column name series into the values of a single column.\nDetails\nLet look at this with the taxis database.\n\ntaxis = sns.load_dataset('taxis')\n\n\ntaxis.head()\n\n\n\n\n\n\n\n\n\npickup\ndropoff\npassengers\ndistance\nfare\ntip\ntolls\ntotal\ncolor\npayment\npickup_zone\ndropoff_zone\npickup_borough\ndropoff_borough\n\n\n\n\n0\n2019-03-23 20:21:09\n2019-03-23 20:27:24\n1\n1.60\n7.0\n2.15\n0.0\n12.95\nyellow\ncredit card\nLenox Hill West\nUN/Turtle Bay South\nManhattan\nManhattan\n\n\n1\n2019-03-04 16:11:55\n2019-03-04 16:19:00\n1\n0.79\n5.0\n0.00\n0.0\n9.30\nyellow\ncash\nUpper West Side South\nUpper West Side South\nManhattan\nManhattan\n\n\n2\n2019-03-27 17:53:01\n2019-03-27 18:00:25\n1\n1.37\n7.5\n2.36\n0.0\n14.16\nyellow\ncredit card\nAlphabet City\nWest Village\nManhattan\nManhattan\n\n\n3\n2019-03-10 01:23:59\n2019-03-10 01:49:51\n1\n7.70\n27.0\n6.15\n0.0\n36.95\nyellow\ncredit card\nHudson Sq\nYorkville West\nManhattan\nManhattan\n\n\n4\n2019-03-30 13:27:42\n2019-03-30 13:37:14\n3\n2.16\n9.0\n1.10\n0.0\n13.40\nyellow\ncredit card\nMidtown East\nYorkville West\nManhattan\nManhattan\n\n\n\n\n\n\n\n\n\ntaxis1 = taxis.set_index(['pickup','dropoff']).sort_index().stack().to_frame('val')\ntaxis1.index.names = ['pickup','dropoff','field']\n\n\ntaxis1.sample(10)\n\n\n\n\n\n\n\n\n\n\n\nval\n\n\npickup\ndropoff\nfield\n\n\n\n\n\n2019-03-21 08:13:12\n2019-03-21 08:27:43\ncolor\nyellow\n\n\n2019-03-20 18:13:02\n2019-03-20 18:34:50\ncolor\nyellow\n\n\n2019-03-03 15:28:02\n2019-03-03 15:34:11\npickup_borough\nManhattan\n\n\n2019-03-01 17:38:01\n2019-03-01 18:11:26\nfare\n30.0\n\n\n2019-03-15 19:33:40\n2019-03-15 19:54:59\nfare\n15.5\n\n\n2019-03-20 07:18:12\n2019-03-20 07:25:51\ntotal\n7.3\n\n\n2019-03-29 14:25:38\n2019-03-29 14:36:34\ntolls\n0.0\n\n\n2019-03-31 18:09:31\n2019-03-31 18:25:30\ntotal\n18.36\n\n\n2019-03-03 09:00:08\n2019-03-03 09:09:05\npickup_borough\nManhattan\n\n\n2019-03-21 17:01:51\n2019-03-21 17:15:31\ndropoff_zone\nYorkville West\n\n\n\n\n\n\n\n\n\ntaxis1.loc['2019-02-28 23:29:03']\n\n\n\n\n\n\n\n\n\n\nval\n\n\ndropoff\nfield\n\n\n\n\n\n2019-02-28 23:32:35\npassengers\n1\n\n\ndistance\n0.9\n\n\nfare\n5.0\n\n\ntip\n0.0\n\n\ntolls\n0.0\n\n\ntotal\n6.3\n\n\ncolor\ngreen\n\n\npayment\ncash\n\n\npickup_zone\nOld Astoria\n\n\ndropoff_zone\nLong Island City/Queens Plaza\n\n\npickup_borough\nQueens\n\n\ndropoff_borough\nQueens",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>NB: Introducing Pandas II</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#combining-dataframes",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#combining-dataframes",
    "title": "NB: Introducing Pandas II",
    "section": "Combining DataFrames",
    "text": "Combining DataFrames\n\npd.concat()\nConcatenate pandas objects along an axis.\nDetails\nCreate two dfs and vertically stack them\n\ndf1 = pd.DataFrame(np.random.randn(3, 4))\ndf2 = pd.DataFrame(np.random.randn(3, 4))\n\n\ndf1\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\n0\n-0.129152\n-0.014749\n0.528338\n-1.007138\n\n\n1\n0.643142\n-0.637257\n1.152109\n-0.518798\n\n\n2\n0.741475\n1.670850\n-0.015079\n0.180586\n\n\n\n\n\n\n\n\n\ndf2\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\n0\n0.636836\n0.654059\n-0.236296\n-0.397231\n\n\n1\n2.046555\n1.195459\n0.437917\n0.798151\n\n\n2\n-0.751606\n-1.360709\n0.955528\n1.108308\n\n\n\n\n\n\n\n\nConcat rows\n\ndf3 = pd.concat([df1, df2], keys=['a','b'], axis=0)\n\n\ndf3\n\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\na\n0\n-0.129152\n-0.014749\n0.528338\n-1.007138\n\n\n1\n0.643142\n-0.637257\n1.152109\n-0.518798\n\n\n2\n0.741475\n1.670850\n-0.015079\n0.180586\n\n\nb\n0\n0.636836\n0.654059\n-0.236296\n-0.397231\n\n\n1\n2.046555\n1.195459\n0.437917\n0.798151\n\n\n2\n-0.751606\n-1.360709\n0.955528\n1.108308\n\n\n\n\n\n\n\n\n\ndf3.loc['b']\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\n0\n0.636836\n0.654059\n-0.236296\n-0.397231\n\n\n1\n2.046555\n1.195459\n0.437917\n0.798151\n\n\n2\n-0.751606\n-1.360709\n0.955528\n1.108308\n\n\n\n\n\n\n\n\n\ndf3a = pd.concat([df1, df2],  axis=0)\n\n\ndf3a\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\n0\n-0.129152\n-0.014749\n0.528338\n-1.007138\n\n\n1\n0.643142\n-0.637257\n1.152109\n-0.518798\n\n\n2\n0.741475\n1.670850\n-0.015079\n0.180586\n\n\n0\n0.636836\n0.654059\n-0.236296\n-0.397231\n\n\n1\n2.046555\n1.195459\n0.437917\n0.798151\n\n\n2\n-0.751606\n-1.360709\n0.955528\n1.108308\n\n\n\n\n\n\n\n\nConcat columns\nThis assumes that the indexes represent IDs of specific things or events.\n\ndf4 = pd.concat([df1, df2], axis=1, keys=['a', 'b'])\n\n\ndf4\n\n\n\n\n\n\n\n\n\na\nb\n\n\n\n0\n1\n2\n3\n0\n1\n2\n3\n\n\n\n\n0\n-0.129152\n-0.014749\n0.528338\n-1.007138\n0.636836\n0.654059\n-0.236296\n-0.397231\n\n\n1\n0.643142\n-0.637257\n1.152109\n-0.518798\n2.046555\n1.195459\n0.437917\n0.798151\n\n\n2\n0.741475\n1.670850\n-0.015079\n0.180586\n-0.751606\n-1.360709\n0.955528\n1.108308\n\n\n\n\n\n\n\n\n\ndf4.b\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\n0\n0.636836\n0.654059\n-0.236296\n-0.397231\n\n\n1\n2.046555\n1.195459\n0.437917\n0.798151\n\n\n2\n-0.751606\n-1.360709\n0.955528\n1.108308\n\n\n\n\n\n\n\n\n\n\n.merge()\nSQL-style joining of tables (DataFrames) – although Pandas has a .join() method, too.\nImportant parameters include:\n\nhow : type of merge {‘left’, ‘right’, ‘outer’, ‘inner’, ‘cross’}, default ‘inner’\non : names to join on\n\nDetails\nCreate two tables, left and right. Then right join them on key.\nRight join means include all records from table on right.\nThe key is used for matching up the records.\n\nleft = pd.DataFrame({\"key\": [\"jamie\", \"bill\"], \"lval\": [15, 22]})\nright = pd.DataFrame({\"key\": [\"jamie\", \"bill\", \"asher\"], \"rval\": [4, 5, 8]})\nmerged = pd.merge(left, right, on=\"key\", how=\"right\")\n\n\nleft\n\n\n\n\n\n\n\n\n\nkey\nlval\n\n\n\n\n0\njamie\n15\n\n\n1\nbill\n22\n\n\n\n\n\n\n\n\n\nright\n\n\n\n\n\n\n\n\n\nkey\nrval\n\n\n\n\n0\njamie\n4\n\n\n1\nbill\n5\n\n\n2\nasher\n8\n\n\n\n\n\n\n\n\n\nmerged\n\n\n\n\n\n\n\n\n\nkey\nlval\nrval\n\n\n\n\n0\njamie\n15.0\n4\n\n\n1\nbill\n22.0\n5\n\n\n2\nasher\nNaN\n8\n\n\n\n\n\n\n\n\nNotice the NaN inserted into the record with key='asher', since the left table didn’t contain the key.\nMatching column names\nIn this next example, the value columns have the same name: val. Notice what happens to the column names.\n\nleft = pd.DataFrame({\"key\": [\"jamie\", \"bill\"], \"val\": [15, 22]})\nright = pd.DataFrame({\"key\": [\"jamie\", \"bill\", \"asher\"], \"val\": [4, 5, 8]})\nmerged = pd.merge(left, right, on=\"key\", how=\"right\")\n\n\nleft\n\n\n\n\n\n\n\n\n\nkey\nval\n\n\n\n\n0\njamie\n15\n\n\n1\nbill\n22\n\n\n\n\n\n\n\n\n\nright\n\n\n\n\n\n\n\n\n\nkey\nval\n\n\n\n\n0\njamie\n4\n\n\n1\nbill\n5\n\n\n2\nasher\n8\n\n\n\n\n\n\n\n\n\nmerged\n\n\n\n\n\n\n\n\n\nkey\nval_x\nval_y\n\n\n\n\n0\njamie\n15.0\n4\n\n\n1\nbill\n22.0\n5\n\n\n2\nasher\nNaN\n8\n\n\n\n\n\n\n\n\n\n\n.join()\nAn SQL-like joiner, but this one takes advantage of indexes.\nGive our dataframes indexes and distinctive columns names.\nDetails\n\nleft2 = left.set_index('key').copy()\nright2 = right.set_index('key').copy()\n\n\nleft2\n\n\n\n\n\n\n\n\n\nval\n\n\nkey\n\n\n\n\n\njamie\n15\n\n\nbill\n22\n\n\n\n\n\n\n\n\n\nright2\n\n\n\n\n\n\n\n\n\nval\n\n\nkey\n\n\n\n\n\njamie\n4\n\n\nbill\n5\n\n\nasher\n8\n\n\n\n\n\n\n\n\n\nright2.join(left2, rsuffix='_y') # Defaults to 'left'\n\n\n\n\n\n\n\n\n\nval\nval_y\n\n\nkey\n\n\n\n\n\n\njamie\n4\n15.0\n\n\nbill\n5\n22.0\n\n\nasher\n8\nNaN\n\n\n\n\n\n\n\n\n\nright2.join(left2, rsuffix='_y', how='inner')\n\n\n\n\n\n\n\n\n\nval\nval_y\n\n\nkey\n\n\n\n\n\n\njamie\n4\n15\n\n\nbill\n5\n22\n\n\n\n\n\n\n\n\n\n\nSummary\n\nUse join if you have shared indexes\nUse merge if you do not have shared indexes\nUse concat to combine based on shared indexes or columns\nPay attention to resulting dataframe indexes and column names",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>NB: Introducing Pandas II</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#reshape-with-.reshape",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#reshape-with-.reshape",
    "title": "NB: Introducing Pandas II",
    "section": "Reshape with .reshape()",
    "text": "Reshape with .reshape()\nChanges the object’s shape\nWe illustrate creating pandas Series, extracting array of length 6, and reshaping to 3x2 array.\nCreate a series:\n\nser = pd.Series([1, 1, 2, 3, 5, 8]) \n\nExtract values:\n\nvals = ser.values \n\n\nvals\n\narray([1, 1, 2, 3, 5, 8])\n\n\n\ntype(vals)\n\nnumpy.ndarray\n\n\n\nvals.shape\n\n(6,)\n\n\nReshaping a series:\n\nreshaped_vals = vals.reshape((3, 2)) \n\n\nreshaped_vals\n\narray([[1, 1],\n       [2, 3],\n       [5, 8]])\n\n\n\ntype(reshaped_vals)\n\nnumpy.ndarray\n\n\n\nreshaped_vals.shape\n\n(3, 2)\n\n\nIncluding -1 as one of the dimensions tells numpy: infer this dimension from the data and the other dimensions.\nExample: enforce 3 columns:\n\nvals.reshape(-1,3)\n\narray([[1, 1, 2],\n       [3, 5, 8]])\n\n\nEnforce 3 rows:\n\nvals.reshape(3,-1)\n\narray([[1, 1],\n       [2, 3],\n       [5, 8]])\n\n\nNotice the shape of original array: (6,).\nThis is a vector with one dimension, and is different from two-dimensional (6,1) array.",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>NB: Introducing Pandas II</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-02-Pandas2.html#categoricals",
    "href": "notebooks/M06_Pandas/M06-02-Pandas2.html#categoricals",
    "title": "NB: Introducing Pandas II",
    "section": "Categoricals",
    "text": "Categoricals\nCategorical data takes discrete values where computation on the values does not make sense.\nZip code is a typical example.\nTo include categoricals in models, often they must be converted to numeric form.\n\nget_dummies()\nDummy code categorical data\nImportant parameters:\n\nprefix : append prefix to column names (a good idea for later use)\ndrop_first: remove first level, as only k-1 variables needed to represent k levels\n\nDetails\n\ncats = pd.DataFrame({'breed':['persian', 'persian', 'siamese', 'himalayan', 'burmese']})\n\n\ncats\n\n\n\n\n\n\n\n\n\nbreed\n\n\n\n\n0\npersian\n\n\n1\npersian\n\n\n2\nsiamese\n\n\n3\nhimalayan\n\n\n4\nburmese\n\n\n\n\n\n\n\n\n\ndummy_cats = pd.get_dummies(cats.breed, prefix='breed')\n\n\ndummy_cats\n\n\n\n\n\n\n\n\n\nbreed_burmese\nbreed_himalayan\nbreed_persian\nbreed_siamese\n\n\n\n\n0\nFalse\nFalse\nTrue\nFalse\n\n\n1\nFalse\nFalse\nTrue\nFalse\n\n\n2\nFalse\nFalse\nFalse\nTrue\n\n\n3\nFalse\nTrue\nFalse\nFalse\n\n\n4\nTrue\nFalse\nFalse\nFalse\n\n\n\n\n\n\n\n\n\npd.get_dummies(cats.breed, drop_first=True, prefix='breed')\n\n\n\n\n\n\n\n\n\nbreed_himalayan\nbreed_persian\nbreed_siamese\n\n\n\n\n0\nFalse\nTrue\nFalse\n\n\n1\nFalse\nTrue\nFalse\n\n\n2\nFalse\nFalse\nTrue\n\n\n3\nTrue\nFalse\nFalse\n\n\n4\nFalse\nFalse\nFalse\n\n\n\n\n\n\n\n\nNotice burmese was dropped (first level by alphabet) since it can be inferred.\nLet’s try it on the iris dataset.\n\niris\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\nsepal_len_sq\nsepal_len_wid_avg\nfoo\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n26.01\n4.30\n26.01\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n24.01\n3.95\n24.01\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n22.09\n3.95\n22.09\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n21.16\n3.85\n21.16\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n25.00\n4.30\n25.00\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n145\n6.7\n3.0\n5.2\n2.3\nvirginica\n44.89\n4.85\n44.89\n\n\n146\n6.3\n2.5\n5.0\n1.9\nvirginica\n39.69\n4.40\n39.69\n\n\n147\n6.5\n3.0\n5.2\n2.0\nvirginica\n42.25\n4.75\n42.25\n\n\n148\n6.2\n3.4\n5.4\n2.3\nvirginica\n38.44\n4.80\n38.44\n\n\n149\n5.9\n3.0\n5.1\n1.8\nvirginica\n34.81\n4.45\n34.81\n\n\n\n\n150 rows × 8 columns\n\n\n\n\nCalled get_dummies() by itself will handle all categoricals for you.\nLook at what happened to the species column.\n\npd.get_dummies(iris)\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nsepal_len_sq\nsepal_len_wid_avg\nfoo\nspecies_setosa\nspecies_versicolor\nspecies_virginica\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\n26.01\n4.30\n26.01\nTrue\nFalse\nFalse\n\n\n1\n4.9\n3.0\n1.4\n0.2\n24.01\n3.95\n24.01\nTrue\nFalse\nFalse\n\n\n2\n4.7\n3.2\n1.3\n0.2\n22.09\n3.95\n22.09\nTrue\nFalse\nFalse\n\n\n3\n4.6\n3.1\n1.5\n0.2\n21.16\n3.85\n21.16\nTrue\nFalse\nFalse\n\n\n4\n5.0\n3.6\n1.4\n0.2\n25.00\n4.30\n25.00\nTrue\nFalse\nFalse\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n145\n6.7\n3.0\n5.2\n2.3\n44.89\n4.85\n44.89\nFalse\nFalse\nTrue\n\n\n146\n6.3\n2.5\n5.0\n1.9\n39.69\n4.40\n39.69\nFalse\nFalse\nTrue\n\n\n147\n6.5\n3.0\n5.2\n2.0\n42.25\n4.75\n42.25\nFalse\nFalse\nTrue\n\n\n148\n6.2\n3.4\n5.4\n2.3\n38.44\n4.80\n38.44\nFalse\nFalse\nTrue\n\n\n149\n5.9\n3.0\n5.1\n1.8\n34.81\n4.45\n34.81\nFalse\nFalse\nTrue\n\n\n\n\n150 rows × 10 columns\n\n\n\n\nYou can call it one numeric columns, too.\n\npd.get_dummies(iris.sepal_length).sum().plot.bar()",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>NB: Introducing Pandas II</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-03-NarrowWide.html",
    "href": "notebooks/M06_Pandas/M06-03-NarrowWide.html",
    "title": "NB: Narrow vs Wide Tables",
    "section": "",
    "text": "1 Hot Encoding\nProject values onto the column axis.\n# pd.get_dummies?\npd.get_dummies(WIDE.cat)\n\n\n\n\n\n\n\n\n\n19\n21\n23\n25\n28\n29\n\n\nowner\n\n\n\n\n\n\n\n\n\n\nA\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\n\n\nB\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\n\n\nC\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\n\n\nD\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\n\n\nE\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\nF\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nG\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\npd.get_dummies(NARROW.n)\n\n\n\n\n\n\n\n\n\n\n15\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n33\n\n\nowner\npet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA\ncat\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\ndog\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\n\n\nferret\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nparraot\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\n\n\nsnake\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nturtle\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nB\ncat\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\ndog\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\n\n\nferret\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\n\n\nparraot\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nsnake\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\n\n\nturtle\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nC\ncat\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\ndog\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nferret\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\n\n\nparraot\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nsnake\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nturtle\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nD\ncat\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\n\n\ndog\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nferret\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nparraot\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nsnake\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nturtle\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nE\ncat\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\n\n\ndog\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nferret\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nparraot\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nsnake\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nturtle\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nF\ncat\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\ndog\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nferret\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nparraot\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nsnake\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nturtle\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nG\ncat\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\n\n\ndog\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nferret\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nparraot\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n\n\nsnake\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\n\n\nturtle\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\npd.get_dummies(NARROW.n).sum().plot.bar();",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>NB: Narrow vs Wide Tables</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-04-MethodChaining.html",
    "href": "notebooks/M06_Pandas/M06-04-MethodChaining.html",
    "title": "NB: Method Chaining",
    "section": "",
    "text": "Method chaining is supported by many objects in Python.\nThis allows you to “chain” a series of methods without having to defined temporary variables.\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n\niris = sns.load_dataset('iris')\n\n\niris\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n...\n...\n...\n...\n...\n...\n\n\n145\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n146\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n147\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n148\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n149\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\n150 rows × 5 columns\n\n\n\n\n\niris.index.name = 'iris_id'\n\n\niris\n\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\niris_id\n\n\n\n\n\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n...\n...\n...\n...\n...\n...\n\n\n145\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n146\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n147\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n148\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n149\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\n150 rows × 5 columns\n\n\n\n\n\niris = iris.reset_index()\\\n    .set_index(['species', 'iris_id'])\n\n\niris\n\n\n\n\n\n\n\n\n\n\nlevel_0\nindex\nsepal_length\nsepal_width\npetal_length\npetal_width\n\n\nspecies\niris_id\n\n\n\n\n\n\n\n\n\n\nsetosa\n0\n0\n0\n5.1\n3.5\n1.4\n0.2\n\n\n1\n1\n1\n4.9\n3.0\n1.4\n0.2\n\n\n2\n2\n2\n4.7\n3.2\n1.3\n0.2\n\n\n3\n3\n3\n4.6\n3.1\n1.5\n0.2\n\n\n4\n4\n4\n5.0\n3.6\n1.4\n0.2\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nvirginica\n145\n145\n145\n6.7\n3.0\n5.2\n2.3\n\n\n146\n146\n146\n6.3\n2.5\n5.0\n1.9\n\n\n147\n147\n147\n6.5\n3.0\n5.2\n2.0\n\n\n148\n148\n148\n6.2\n3.4\n5.4\n2.3\n\n\n149\n149\n149\n5.9\n3.0\n5.1\n1.8\n\n\n\n\n150 rows × 6 columns\n\n\n\n\n\niris.groupby('species').mean('mean').plot.barh();\n\n\n\n\n\n\n\n\n\niris.groupby('species').agg('mean').T.setosa.plot.barh();\n\n\n\n\n\n\n\n\n\niris.groupby(['sepal_length','sepal_width']).petal_length\\\n    .mean()\\\n    .to_frame('mean petal_length')\\\n    .plot(style='.', rot=45);",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>NB: Method Chaining</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html",
    "href": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html",
    "title": "NB: Pandas and SQL",
    "section": "",
    "text": "Overview\nIn this exercise, we split the raw table into tables corresponding the implied subjects we discovered.\nThen we use joins to reassemble the data.\nWe will assumed that the implied subjects are ARTIST, GENRE, ALBUM, and REVIEW.\nTo do this, we use Pandas to store the initial table as a dataframe, and then we create variations of that dataframe and save those to the database as new tables.",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>NB: Pandas and SQL</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html#the-artist-table",
    "href": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html#the-artist-table",
    "title": "NB: Pandas and SQL",
    "section": "The artist table",
    "text": "The artist table\nWe get the unique artist names and save them to a new dataframe, and change the column name and the index name in the process so that we have well-named columns in our table.\n\nartists = raw.artist.value_counts().to_frame('n_reviews')\nartists.index.name = 'artist_id'\nartists.to_sql('artist', db, index=True, if_exists='replace', index_label='artist_id')\n\n9249\n\n\n\nartists.sample(10)\n\n\n\n\n\n\n\n\n\nn_reviews\n\n\nartist_id\n\n\n\n\n\nFlying Canyon\n1\n\n\nFlorence and the Machine\n4\n\n\nLarkin Grimm\n3\n\n\nDylan LeBlanc\n2\n\n\nDevo\n2\n\n\nTory Lanez\n3\n\n\nSacred Paws\n1\n\n\nLittle Wings\n4\n\n\nBoris / Ian Astbury\n1\n\n\nThe Sight Below\n2\n\n\n\n\n\n\n\n\nHow many albums does Wilco have?\n\nartists.loc['Wilco'].n_reviews\n\n14\n\n\n\nPattern\n\nImport the columns that you want from raw table into a new dataframe. value_counts() is your friend.\nRename columns and index as desired.\nPut the new dataframe into the database as a new table. No need to define the schema!",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>NB: Pandas and SQL</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html#the-genre-table",
    "href": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html#the-genre-table",
    "title": "NB: Pandas and SQL",
    "section": "The genre table",
    "text": "The genre table\n\ngenres = raw.genre.value_counts().to_frame('n_reviews')\ngenres.index.name = 'genre_id'\ngenres.to_sql('genre', db, index=True, if_exists='replace', index_label='genre_id')\n\n10\n\n\n\ngenres\n\n\n\n\n\n\n\n\n\nn_reviews\n\n\ngenre_id\n\n\n\n\n\nRock\n6954\n\n\nElectronic\n4020\n\n\nNone\n2320\n\n\nExperimental\n1696\n\n\nRap\n1481\n\n\nPop/R&B\n1157\n\n\nMetal\n781\n\n\nFolk/Country\n700\n\n\nJazz\n257\n\n\nGlobal\n178\n\n\n\n\n\n\n\n\n\ngenres.plot.barh();",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>NB: Pandas and SQL</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html#the-album-table",
    "href": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html#the-album-table",
    "title": "NB: Pandas and SQL",
    "section": "The album table",
    "text": "The album table\n\nalbums = raw[['album','artist','genre']].value_counts().to_frame('n_reviews').reset_index().set_index(['artist','album'])\nalbums.index.names = ['artist_id','album_id']\nalbums = albums.rename(columns={'genre':'genre_id'})\nalbums.to_sql('album', db, index=True, if_exists='replace', index_label=albums.index.names)\n\n19506\n\n\n\nalbums\n\n\n\n\n\n\n\n\n\n\ngenre_id\nn_reviews\n\n\nartist_id\nalbum_id\n\n\n\n\n\n\nNÙze\nSongs on the Rocks\nNone\n2\n\n\nThe Postal Service\nGive Up\nElectronic\n2\n\n\nEnon\nBelievo!\nRock\n2\n\n\nTim Hecker\nRadio Amor\nExperimental\n2\n\n\nOf Montreal\nIf He Is Protecting Our Nation, Then Who Will Protect Big Oil, Our Children?\nRock\n2\n\n\n...\n...\n...\n...\n\n\nRussian Circles\nGuidance\nMetal\n1\n\n\nVarious Artists\nGuess Who This Is: A Tribute to Dom Leone\nNone\n1\n\n\nBeck\nGuerolito\nRock\n1\n\n\nGuero\nRock\n1\n\n\nPretty Girls Make Graves\n…lan Vital\nNone\n1\n\n\n\n\n19506 rows × 2 columns",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>NB: Pandas and SQL</span>"
    ]
  },
  {
    "objectID": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html#the-review-table",
    "href": "notebooks/M06_Pandas/M06-05-Pandas-and-SQL.html#the-review-table",
    "title": "NB: Pandas and SQL",
    "section": "The review table",
    "text": "The review table\n\nreviews = raw[['album', 'artist', 'best', 'date', 'review', 'score']].copy()\nreviews.columns = ['album_id', 'artist_id', 'is_best', 'review_date', 'review_content', 'album_score']\nreviews = reviews.set_index(['artist_id','album_id','review_date'])\nreviews.to_sql('review', db, index=True, if_exists='replace', index_label=reviews.index.names)\n\n19544\n\n\n\nreviews.head()\n\n\n\n\n\n\n\n\n\n\n\nis_best\nreview_content\nalbum_score\n\n\nartist_id\nalbum_id\nreview_date\n\n\n\n\n\n\n\nWilco\nA.M./Being There\nDecember 6 2017\n1\nBest new reissue 1 / 2 Albums Newly reissued a...\n7.0\n\n\nHopsin\nNo Shame\nDecember 6 2017\n0\nOn his corrosive fifth album, the rapper takes...\n3.5\n\n\nGlassjaw\nMaterial Control\nDecember 6 2017\n0\nOn their first album in 15 years, the Long Isl...\n6.6\n\n\nNabihah Iqbal\nWeighing of the Heart\nDecember 6 2017\n0\nOn her debut LP, British producer Nabihah Iqba...\n7.7\n\n\nNeil Young / Promise of the Real\nThe Visitor\nDecember 5 2017\n0\nWhile still pointedly political, Neil Youngís ...\n6.7\n\n\n\n\n\n\n\n\n\nreviews.loc['Wilco'].sort_index()\n\n\n\n\n\n\n\n\n\n\nis_best\nreview_content\nalbum_score\n\n\nalbum_id\nreview_date\n\n\n\n\n\n\n\nA Ghost Is Born\nJune 21 2004\n0\nAt the time of Yankee Hotel Foxtrot's non-trad...\n6.6\n\n\nA.M./Being There\nDecember 6 2017\n1\nBest new reissue 1 / 2 Albums Newly reissued a...\n7.0\n\n\nAlpha Mike Foxtrot: Rare Tracks 1994ñ2014/What's Your 20? Essential Tracks 1994ñ2014\nNovember 19 2014\n0\n1 / 2 Albums Both the†Alpha Mike Foxtrot†rarit...\n7.0\n\n\nKicking Television: Live in Chicago\nNovember 13 2005\n0\nThis 2xCD live album finds the now six-piece b...\n8.3\n\n\nMore Like the Moon EP\nApril 27 2003\n0\nOkay, show of hands: how many of you people ha...\n7.0\n\n\nSchmilco\nSeptember 9 2016\n0\nWilco's 10th album is a largely acoustic affai...\n7.0\n\n\nSky Blue Sky\nMay 14 2007\n0\nDespite the experimental pedigree of their new...\n5.2\n\n\nStar Wars\nJuly 23 2015\n0\nWith its $0 asking price, lawsuit-baiting titl...\n7.7\n\n\nSummerteeth\nFebruary 28 1999\n0\nAfter parting ways with Uncle Tupelo partner J...\n9.4\n\n\nThe Whole Love\nSeptember 26 2011\n0\nWilco's adventurous, self-produced eighth LP f...\n6.9\n\n\nThe Wilco Book\nOctober 31 2004\n0\nWe don't usually review books, but seeing that...\n7.5\n\n\nWilco (The Album)\nJune 29 2009\n0\nJeff Tweedy and co.'s latest does what its tit...\n7.3\n\n\nYankee Hotel Foxtrot\nApril 21 2002\n0\nMyth, it has been said, is the buried part of ...\n10.0\n\n\niTunes Session\nFebruary 2 2012\n0\nThis eight-song EP, comprised primarily of tra...\n6.7\n\n\n\n\n\n\n\n\n\nreviews.loc['Wilco'].album_score.mean().round(2)\n\n7.4\n\n\nNote how the new review table has fewer columns – e.g. we no longer have genre.",
    "crumbs": [
      "M06 Pandas",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>NB: Pandas and SQL</span>"
    ]
  },
  {
    "objectID": "modules/m07/m07-intro.html",
    "href": "modules/m07/m07-intro.html",
    "title": "M07 Classes",
    "section": "",
    "text": "Topics",
    "crumbs": [
      "M07 Classes"
    ]
  },
  {
    "objectID": "modules/m07/m07-intro.html#topics",
    "href": "modules/m07/m07-intro.html#topics",
    "title": "M07 Classes",
    "section": "",
    "text": "Concept of object-oriented programming\nConcept of classes\nPython’s approach to organizing classes\nPython’s approach to creating and using classes\nCreating your own classes",
    "crumbs": [
      "M07 Classes"
    ]
  },
  {
    "objectID": "modules/m07/m07-intro.html#readings",
    "href": "modules/m07/m07-intro.html#readings",
    "title": "M07 Classes",
    "section": "Readings",
    "text": "Readings\n\nClasses (Official Python)\nLutz 2019, Part VI, Classes and OOP, Chapters 26–29.",
    "crumbs": [
      "M07 Classes"
    ]
  },
  {
    "objectID": "topics/what-is-oop.html",
    "href": "topics/what-is-oop.html",
    "title": "What is OOP?",
    "section": "",
    "text": "The Basic Idea\nThe usual way that Object-Oriented Programming (OOP) is introduced to students is as a natural way to describe things in the world.\nThe story told goes something like this:\nThe world consists of a bunch of things.\nThese things may be animate or inanimate, but they have two things in common:\nSo, anything from an orange to the economy of France are things.\nThese things are called objects.\nAll objects that exist are instances of abstract classes.\nEvery object that exists is an instance of an abstract class.\nClasses are organized into trees.\nClasses are organized into tree-like structures.\nSpecific classes inherit the attributes and behaviors of their parent and ancestors, although they can override these as well.\nSo, an organge might have this lineage:\nPlant &gt; Magnoliophyta &gt; Magnoliopsida &gt; Rosidae &gt; Sapindales &gt; Rutaceae &gt; Citrus &gt; Valencia Orange",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>What is OOP?</span>"
    ]
  },
  {
    "objectID": "topics/what-is-oop.html#the-basic-idea",
    "href": "topics/what-is-oop.html#the-basic-idea",
    "title": "What is OOP?",
    "section": "",
    "text": "Attributes: qualities, traits, features\nBehaviors: ways of interacting with other things\n\n\n\nThe properties of an orange are its color, weight, species, etc.\nThe properties of the economy of France are its GDP, its industrial sectors, its rate of unemployment, etc.\nThe behaviors of an orange are things like being eaten, or rotting.\nThe behaviors of an economy are going into a recession, etc.\n\n\n\n\n\nA specific orange is an instance of the class of Oranges.\nFrance’s economy is an instance of the class of National Economies.\n\n\n\n\n\n\n\nNote\n\n\n\nThe nature of these classes raises an important philosophical question, but we will not address this here.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe idea that the world is organized into a hierarchy of things descending from some primary substance is ancient. Here is an example from the European Middle Ages:\n\n\n\n\n\nThe Poryphyrian Tree",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>What is OOP?</span>"
    ]
  },
  {
    "objectID": "topics/what-is-oop.html#relationship-to-coding",
    "href": "topics/what-is-oop.html#relationship-to-coding",
    "title": "What is OOP?",
    "section": "Relationship to Coding",
    "text": "Relationship to Coding\nOOP is based on the analogy that code can be organized in this way.\nThis is because software is often about the world – we write software to model things in the world.\n\nFor example, if I wanted to write code simulate the traffic pattern of a city, I might start by creating a class called Car.\nThis Car would have properties, such as its make and model, but also behaviors like driving.\nThen, in simulation program, I would create a bunch of Car instances and have them do things like drive on streets, etc.",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>What is OOP?</span>"
    ]
  },
  {
    "objectID": "topics/what-is-oop.html#another-way-to-look-at-it",
    "href": "topics/what-is-oop.html#another-way-to-look-at-it",
    "title": "What is OOP?",
    "section": "Another Way to Look at It",
    "text": "Another Way to Look at It\nNow, although this way of looking at OOP is somewhat intuitive, it can be misleading.\nIt is great for understanding the data structure that OOP uses.\n\nA tree-like organization of classes\nClasses with attributes and behaviors\n\nBut the OO pattern is not always used to model things in the world.\nSometimes is just a good way to organize code – OOP is a data structure for the data that is code.\nIn other words, just as we say that dimension can refer to the world or to the structure of data, so too can an object.\nWe use OOP to provide structure to our code, regardless of whether it paints an accurate picture of the world.",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>What is OOP?</span>"
    ]
  },
  {
    "objectID": "topics/what-is-oop.html#the-trinity",
    "href": "topics/what-is-oop.html#the-trinity",
    "title": "What is OOP?",
    "section": "The Trinity",
    "text": "The Trinity\nOOP theory states that classes exhibit three fundamental properties that make them powerful:\n\nEncapsulation\nInheritance\nPolymorphism\n\nEncapsulation means that objects are self-contained. They have their own scope, data, and logic. Ideally, they can be deployed in any context and be shielded from external states.\n\nObjects are meant to be black boxes to users: they should only be interacted with via the methods and attributes provided.\nNothing else should influence the state of the object except what it contains and what is passed to it.\n\nInheritance means that classes can be subclasses of other classes and thereby inherit their ancestor attributes and methods. - Some programming languages allow only single inheritance – classes can have one parent. - Python supports multiple inheritance, but this can be complicated to use.\nPolymorphism means that methods can perform different behaviors based on the arguments they are passed. - That is, a function can be defined more than once in a class, as long as it each has a unique signature. - A signature is the particular pattern of arguments (parameters) a method has.\nToday, we are only going to focus on encapsulation …\n\nOnce upon a time, there was a movement to implement only this concept.\nMicrosoft, for example, developed a component-based approach to programming, where components are encapsulated unites of code without the complexity of inheritance.",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>What is OOP?</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-01-Classes.html",
    "href": "notebooks/M07_PythonClasses/M07-01-Classes.html",
    "title": "NB: Introducing Classes",
    "section": "",
    "text": "Introduction\nClasses are a way of organizing code into bundles of variables and functions called attributes and methods.\nEach class models some thing — a thing in the world, a process, a model, or just some convenient way of grouping code.\nFor example, a logistic regression model would have attributes like:\nThese attributes help describe the object; they give the object’s state.\nThe logistic regression model would have functionality such as:\nThe behavior, or functionality, is supported by methods, which are functions included in the class.\nHere are a couple of other ways to think of a class:",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>NB&colon; Introducing Classes</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-01-Classes.html#introduction",
    "href": "notebooks/M07_PythonClasses/M07-01-Classes.html#introduction",
    "title": "NB: Introducing Classes",
    "section": "",
    "text": "weights\nan optional intercept term\nthe maximum number of iterations\n\n\n\n\nthe optimization routine used in training\na prediction function\n\n\n\n\nIt provides a template for creating an object and for working with the object.\nIt constitutes a kind of definition of something in the world.\n\n\nA First Example\nOk, let’s look at examples, starting with a very small, simple class.\nThe class contains:\n\na name Ferrari458\na docstring for a quick description\nan attribute, which is number of cylinders in the engine\na method\n\n\nclass Ferrari458:\n    \"\"\"This is a Ferrari 458 object\"\"\"\n    cylinders = 8\n\n    def print_origin(self):\n        return 'I was built in Italy!'\n\nYou can learn about the class by printing the docstring:\n\nFerrari458.__doc__\n\n'This is a Ferrari 458 object'\n\n\nYou can also get detailed help like this:\n\nhelp(Ferrari458)\n\nHelp on class Ferrari458 in module __main__:\n\nclass Ferrari458(builtins.object)\n |  This is a Ferrari 458 object\n |  \n |  Methods defined here:\n |  \n |  print_origin(self)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  cylinders = 8\n\n\n\nNext, we create an object from the class (also called an instance of the class).\nIt is called like a function with no parameters.\nThe process is called instantiation.\n\nmyferrari = Ferrari458()\n\nWe show the number of cylinders by using the object.attribute format:\n\nmyferrari.cylinders\n\n8\n\n\nThen we call its method .print_origin() to learn where this sweet machine was built.\n\nmyferrari.print_origin()\n\n'I was built in Italy!'\n\n\nAs a convention, instance methods take self as their first argument.\nThese methods can then use self.attribute to extract the attributes associated with the instantiated object.\nHere is an example, with method get_cylinders.\n\nclass Ferrari458_v2:\n    \"\"\"This is a Ferrari 458 object\"\"\"\n    cylinders = 8\n\n    def print_origin(self):\n        return 'I was built in Italy!'\n\n    def get_cylinders(self):\n        return self.cylinders\n\n\nmyferrari = Ferrari458_v2()\n\n\nmyferrari.get_cylinders()\n\n8",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>NB&colon; Introducing Classes</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-01-Classes.html#the-.__init__-method",
    "href": "notebooks/M07_PythonClasses/M07-01-Classes.html#the-.__init__-method",
    "title": "NB: Introducing Classes",
    "section": "The .__init__() method",
    "text": "The .__init__() method\nThere is a special function called __init__ that will initialize the state of an object when you create it.\nUse it to supply more context-dependent information about your instance.\nLet’s look at another version of the class with __init__().\n\nclass Ferrari458_v3:\n    \"\"\"this is a Ferrari 458 object\"\"\"\n    cylinders = 8\n    \n    def __init__(self, color):\n        self.color = color\n\n    def print_origin(self):\n        return 'I was built in Italy!'\n\n    def get_color(self):\n        return self.color\n\nBy adding the __init__() function, we can create objects if we pass the number of cylinders.\nIf we don’t pass this parameter, there will be an error.\nThis is because we did not define a default value for the color argument in our initialization method.\n\nferr1 = Ferrari458_v3()\n\nTypeError: Ferrari458_v3.__init__() missing 1 required positional argument: 'color'\n\n\nThis works:\n\nferr1 = Ferrari458_v3(\"red\")\n\nWe can access the initialized attribute using the dot operator, just as if it were declared at the top of the class:\n\nferr1.color\n\n'red'\n\n\nOr we can call the accessor method that we created.\n\nferr1.get_color()\n\n'red'\n\n\nNote that even though we initialized the car object with “red”, we can always change it:\n\nferr1.color = \"Cobalt\"\n\n\nferr1.get_color()\n\n'Cobalt'",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>NB&colon; Introducing Classes</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-01-Classes.html#instance-vs-class-attributes",
    "href": "notebooks/M07_PythonClasses/M07-01-Classes.html#instance-vs-class-attributes",
    "title": "NB: Introducing Classes",
    "section": "Instance vs Class Attributes",
    "text": "Instance vs Class Attributes\nNotice the difference between the cylinders and the color attributes.\nThe first is a class attribute. Its value will apply to all instances of the class, unless the instance overrides it.\nThe second is an instance attribute. Its value is meant to be changed with each instance.\nLook what happens if we change the value of cylinders in the class:\n\nFerrari458_v3.cylinders = 12\n\n\nferr1.cylinders\n\n12\n\n\nThe value will be changed with all of the instances created from the class.",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>NB&colon; Introducing Classes</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-01-Classes.html#the-meaning-of-self",
    "href": "notebooks/M07_PythonClasses/M07-01-Classes.html#the-meaning-of-self",
    "title": "NB: Introducing Classes",
    "section": "The Meaning of self",
    "text": "The Meaning of self\nNote the presence of an argument and variable called self in the method definitions. - This stands for the intantiated object itself.\nSo, when you create an object like so:\nfoo = Foo()\n\nfoo is represented in the class definition as self.\n\nIf you want your method to access the other attributes and methods in an object, you need to put self as its first argument. - Note that when you use the method with an instance, you don’t pass the object name as an argument - The object name is passed implicitly by Python, since it knows which object called the methid\nYou can use any valid name you want for the name of the object itself, but the convention is to use self.\nNote that self is only used within the methods of a class, not outside of it. - Like functions, they don’t know what’s outside of them, nor does the containing code know what’s inside of them. - The self variable is the mechanism that allows methods to share data without having to pass and return a bunch of variables.\nThink of self as a data structure that stores the program itself - In this sense, it’s similar to recursion: A class definition contains a reference to itself! - But remember, the class definition is not a thing – it’s a template. - self is just a pronoun that allows an instance to access it’s own state.",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>NB&colon; Introducing Classes</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-01-Classes.html#summary-and-additional-info",
    "href": "notebooks/M07_PythonClasses/M07-01-Classes.html#summary-and-additional-info",
    "title": "NB: Introducing Classes",
    "section": "Summary and additional info",
    "text": "Summary and additional info\nAn cobject is a self-contained bundle of methods and attributes. * Methods are basically functions. * Attributes are basically variables.\nA class definition is a template for creating objects. * Objects are class instances. * Classes are onbject types.\nObjects have their own scope, like functions. * They are meant to exchange information with their environment only through accessing attributes and calling methods\nWhen objects are first created, they often expect to have data passed to them. * This is called initializing the object. * These data are handled internally by the .__init__() method. * Data that are passed this way can be overridden by accessing the attributes they assigned to.\nThe methods of a class begin with self as the first argument. * This stands for the instance itself. * All methods and attributes are avaible to all other methods in the object through the self object.\nIf a method does not have self as its first argument, it cannot access the internal state or methods of the object. * The internal state is just the attributes and their current values. * These are called static methods. * Static methods are useful in providing functions to the environment in which their containing object is instantiated.\nThere is a lot more to the subject, but this is good enough to get started!",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>NB&colon; Introducing Classes</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html",
    "href": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html",
    "title": "NB: Classes Example",
    "section": "",
    "text": "Set Up\nimport pandas as pd\nimport numpy as np",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>NB: Classes Example</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#method-1-nothing-special",
    "href": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#method-1-nothing-special",
    "title": "NB: Classes Example",
    "section": "Method 1: Nothing Special",
    "text": "Method 1: Nothing Special\nWe define a set of functions that work in a sequence, where the return value of one is the argument of the other.\n\nDefine Functions\n\ndef create_die(weights):\n    n_sides = len(weights)\n    my_probs = [i/sum(weights) for i in weights]\n    my_die = pd.DataFrame({\n        'side': range(1, n_sides + 1),\n        'weights': my_probs\n    })\n    return my_die\n\ndef roll_dice(my_die, n_rolls=1):\n    results = []\n    for i in range(n_rolls):\n        result = my_die.side.sample(weights=my_die.weights).values[0]\n        results.append(result)\n    return pd.Series(results)\n\ndef plot_results(my_results):\n    my_results.value_counts().sort_index().plot.bar();\n\n\n\nCreate Instances\n\nn_rolls = 10\n\n\nfair_die = create_die([1,1,1,1,1,1,1])\n\n\nfair_die\n\n\n\n\n\n\n\n\n\nside\nweights\n\n\n\n\n0\n1\n0.142857\n\n\n1\n2\n0.142857\n\n\n2\n3\n0.142857\n\n\n3\n4\n0.142857\n\n\n4\n5\n0.142857\n\n\n5\n6\n0.142857\n\n\n6\n7\n0.142857\n\n\n\n\n\n\n\n\n\nfair_results = roll_dice(fair_die, n_rolls)\n\n\nfair_results\n\n0    4\n1    2\n2    6\n3    4\n4    4\n5    4\n6    7\n7    6\n8    4\n9    5\ndtype: int64\n\n\n\nplot_results(fair_results)\n\n\n\n\n\n\n\n\n\nunfair_die = create_die([1,1,1,1,1,5])\nunfair_results = roll_dice(unfair_die, n_rolls)\nplot_results(unfair_results)\n\n\n\n\n\n\n\n\n\n\nDoing it all at once\n\ndef do_it_all(weights):\n    plot_results(roll_dice(create_die(weights), n_rolls))\n\n\ndo_it_all(roll_dice(create_die([1,1,1,1,1,10]), n_rolls))",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>NB: Classes Example</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#method-2-with-globals",
    "href": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#method-2-with-globals",
    "title": "NB: Classes Example",
    "section": "Method 2: With Globals",
    "text": "Method 2: With Globals\n\nDefine a Global Data Structure\nWe create a dictionary called config to store our instance data.\nWe’ll treat this as a global.\n\nconfig = {}\nn_rolls2 = 10\n\n\n\nDefine Functions\n\ndef create_die2(die_id):\n    global config\n    config[die_id]['die'] = None\n    weights = config[die_id]['weights']\n    n_sides = len(weights)\n    my_probs = [i/sum(weights) for i in weights]\n    config[die_id]['die'] = pd.DataFrame({\n        'side': range(1, n_sides + 1),\n        'weights': my_probs\n    })\n\ndef roll_dice2(die_id):\n    global config\n    global n_rolls2\n    config[die_id]['results'] = None\n    my_die = config[die_id]['die']\n    results = []\n    for i in range(n_rolls2):\n        result = my_die.side.sample(weights=my_die.weights).values[0]\n        results.append(result)\n    config[die_id]['results'] = pd.Series(results)\n\ndef plot_results2(die_id):\n    global config\n    my_results = config[die_id]['results']\n    my_results.value_counts().sort_index().plot.bar();\n\ndef do_it_all2(die_id):\n    global config\n    global n_rolls2\n    print(\"Die ID:\", die_id)\n    print(\"Weights:\", config[die_id]['weights'])\n    print(\"Rolls:\", n_rolls2)\n    create_die2(die_id)\n    roll_dice2(die_id)\n    plot_results2(die_id)\n\n\n\nPopulate Config\nWe populate our configuration config with some instances.\n\nconfig = {\n    'fair': {\n        'weights': [1,1,1,1,1,1]\n    },\n    'unfair': {\n        'weights': [1,1,1,1,10,100],\n    }\n}\n\n\n\nCall Main Function\n\ndo_it_all2('fair')\n\nDie ID: fair\nWeights: [1, 1, 1, 1, 1, 1]\nRolls: 10\n\n\n\n\n\n\n\n\n\n\ndo_it_all2('unfair')\n\nDie ID: unfair\nWeights: [1, 1, 1, 1, 10, 100]\nRolls: 10\n\n\n\n\n\n\n\n\n\n\nn_rolls2 = 1000 # We change this, but it will affect all uses of the functions until we change it.\ndo_it_all2('unfair')\n\nDie ID: unfair\nWeights: [1, 1, 1, 1, 10, 100]\nRolls: 1000\n\n\n\n\n\n\n\n\n\n\ndo_it_all2('fair')\n\nDie ID: fair\nWeights: [1, 1, 1, 1, 1, 1]\nRolls: 1000",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>NB: Classes Example</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#method-3-as-class",
    "href": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#method-3-as-class",
    "title": "NB: Classes Example",
    "section": "Method 3: As Class",
    "text": "Method 3: As Class\nDefine a class that contains the config data structure and all the functions as attributes and methods.\n\nclass DieGame():\n        \n    def __init__(self):\n        self.n_rolls = 10\n        self.weights = [1,1,1,1,1,1]\n        \n    def create_die(self):\n        self.n_sides = len(self.weights)\n        self.my_probs = [i/sum(self.weights) for i in self.weights]\n        self.die = pd.DataFrame({\n            'side': range(1, self.n_sides + 1),\n            'weights': self.my_probs\n        })\n    \n    def roll_die(self):\n        results = []\n        for i in range(self.n_rolls):\n            result = self.die.side.sample(weights=self.die.weights).values[0]\n            results.append(result)\n        self.results = pd.Series(results)        \n        \n    def plot_results(self):\n        prob_model = pd.Series({i+1:round(p, 2) for i, p in enumerate(self.my_probs)})\n        print(\"Sides:\", self.n_sides)\n        print(\"Model:\")\n        print(prob_model)\n        print(\"Rolls:\", self.n_rolls)\n        self.results.value_counts().sort_index().plot.bar(rot=0);\n        \n    # We add another method because it's so easy :-)\n    def plot_probs(self):\n        pd.Series(self.my_probs).plot.pie(title=\"Die Model\")\n        \n    def do_it_all(self):\n        self.create_die()\n        self.roll_die()\n        self.plot_results()\n        \n\n\ngame_1 = DieGame()\ngame_1.n_rolls = 100\ngame_1.do_it_all()\n\nSides: 6\nModel:\n1    0.17\n2    0.17\n3    0.17\n4    0.17\n5    0.17\n6    0.17\ndtype: float64\nRolls: 100\n\n\n\n\n\n\n\n\n\n\ngame_1.plot_probs()\n\n\n\n\n\n\n\n\n\ngame_2 = DieGame()\ngame_2.n_rolls = 100\ngame_2.weights = [1,1,1,5,10,10]\ngame_2.do_it_all()\n\nSides: 6\nModel:\n1    0.04\n2    0.04\n3    0.04\n4    0.18\n5    0.36\n6    0.36\ndtype: float64\nRolls: 100\n\n\n\n\n\n\n\n\n\n\ngame_2.plot_probs()",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>NB: Classes Example</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#conclusions",
    "href": "notebooks/M07_PythonClasses/M07-02-ClassesExample.html#conclusions",
    "title": "NB: Classes Example",
    "section": "Conclusions",
    "text": "Conclusions\nThe OOP approach handles scoping issues as well as data management.\nNotice how the dictionary is replaced by the object.\nNot only does it provide a place to store the data, it also provides a schema for it: * You don’t need to remember what keys to put in the data dictionary of method 2. The object specifies them.\nNotice also that we don’t pass arguments to the object as we do with functions (although we can).\nWe assign values to attributes directly.",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>NB: Classes Example</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html",
    "href": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html",
    "title": "NB: More About Classes",
    "section": "",
    "text": "Some Useful Facts about Python Classes",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>NB: More About Classes</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#some-useful-facts-about-python-classes",
    "href": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#some-useful-facts-about-python-classes",
    "title": "NB: More About Classes",
    "section": "",
    "text": "You can put your classes in a .py file and import them into your other scripts.\nYou can put more than one class in a file.\nClass names are usually written in CamelCase, but not instances.\nWhen saving to a file:\n\nIf only one class, use a lower case name of the class in the file name.\nIf more than one, use a package name, one that stands for the logical group the classes belong to.",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>NB: More About Classes</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#anatomy-of-a-python-class",
    "href": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#anatomy-of-a-python-class",
    "title": "NB: More About Classes",
    "section": "Anatomy of a Python Class",
    "text": "Anatomy of a Python Class\n\n## Import class dependencies here, outside of the class definition\n\nimport pandas as pd\nimport numpy as np\nimport re\nimport requests\n# from lxml import etree\n\n## Use CamelCase to name your class\nclass MyClass(object): # Optionally pass ancestor classes to use inheritance\n    \"\"\"\n    Extensive docstring describing structure and function of class.\n    \"\"\"\n    \n    # Class attributes go here with initial values if applicable\n    att1 = True \n    att2 = 'Foo'\n    _private_att = 'Bar' # A variable that is meant to be internally only; not intended to accessed by users\n    \n    # Object initializer; called when an instance of the class is created\n    def __init__(self):\n        pass\n    \n    # Methods that share state via the self variable\n    def get_something(self):\n        pass\n    \n    # Name your methods consistently -- prefix with verbs\n    def put_something(self):\n        pass\n    \n    def do_something(self):\n        pass\n\n    def show_something(self):\n        pass\n\n    # A private method\n    def _private_method(self): \n        pass\n    \n    def do_something_else(self):\n        # Use private method\n        self._private_method()\n    \n    # A static method\n    def static_method():\n        pass",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>NB: More About Classes</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#privacy",
    "href": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#privacy",
    "title": "NB: More About Classes",
    "section": "Privacy",
    "text": "Privacy\nUsers are free to access private attributes and methods, but they not shown in the help docs.\n\nhelp(MyClass)\n\nHelp on class MyClass in module __main__:\n\nclass MyClass(builtins.object)\n |  Extensive docstring describing structure and function of class.\n |  \n |  Methods defined here:\n |  \n |  __init__(self)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  do_something(self)\n |  \n |  do_something_else(self)\n |  \n |  get_something(self)\n |      # Methods that share state via the self variable\n |  \n |  put_something(self)\n |      # Name your methods consistently -- prefix with verbs\n |  \n |  show_something(self)\n |  \n |  static_method()\n |      # A static method\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  att1 = True\n |  \n |  att2 = 'Foo'",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>NB: More About Classes</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#static-classes",
    "href": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#static-classes",
    "title": "NB: More About Classes",
    "section": "Static Classes",
    "text": "Static Classes\nStatic classes don’t have instance methods.\nStatic classes don’t need to be instantiated.\nThey can be used to store a collection of stand-alone helper functions as methods.\nNote the absence of self …\n\nclass StaticClass():\n\n    def add_these(*nums):\n        sum = 0\n        for num in nums: sum += num\n        return sum\n    \n    def square_me(x):\n        return x**2\n\n\nStaticClass.add_these(1,5,6)\n\n12\n\n\n\nStaticClass.square_me(5)\n\n25\n\n\nThis won’t work …\n\nsc = StaticClass()\n\n\nsc.square_me(10)\n\nTypeError: StaticClass.square_me() takes 1 positional argument but 2 were given\n\n\nNor will this,\n\nsc.square_me()\n\nTypeError: unsupported operand type(s) for ** or pow(): 'StaticClass' and 'int'",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>NB: More About Classes</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#classes-as-data-structures",
    "href": "notebooks/M07_PythonClasses/M07-03-MoreOnClasses.html#classes-as-data-structures",
    "title": "NB: More About Classes",
    "section": "Classes as Data Structures",
    "text": "Classes as Data Structures\nClasses are a quick way to store data, similar to dictionaries.\nHere we define a static class to store some configuration data.\n\nclass MyConfig:\n    a = 10\n    b = 'foo'\n    c = 'something else'\n    f = lambda x: x + 10\n\nUnlike dictionaries, their keys, or attributes, can be accessed with less typing.\n\nMyConfig.a\n\n10\n\n\nNote also that attributes can be viewed with tab completion (in Jupyter and other IDEs).\n\n\nMyConfig.f(100)\n\n110\n\n\nYou can dynamically add attributes, too.\n\nMyConfig.x = 50\n\nNote that lambda functions are attributes, too:\n\nMyConfig.y = lambda x: x**2\n\n\nMyConfig.y(100)\n\n10000\n\n\nIt’s harder to add true functions, though.\nIf you wanted to create a data structure template, you could create a non-static class like this:\n\nclass ConfigTemplate:\n    \n    def __init__(self):\n        self.project_name = ''\n        self.project_type = ''\n        self.default_url = ''\n        self.description = ''\n\n\nconfig1 = ConfigTemplate()\nconfig1.project_name = 'Apollo'\nconfig1.project_type = 'Moon Mission'\n\n\nconfig2 = ConfigTemplate()\nconfig2.project_name = 'Artemis'\nconfig1.project_type = 'Moon Mission'\n\n\nconfig1.project_name\n\n'Apollo'\n\n\n\nconfig2.project_name\n\n'Artemis'",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>NB: More About Classes</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-05-Example.html",
    "href": "notebooks/M07_PythonClasses/M07-05-Example.html",
    "title": "NB: Example",
    "section": "",
    "text": "In this example, we put our class code in a separate .py file.\nThen we call it from within our notebook.\nThis is normal practice – class files cannot reside in notebooks if they are to be used by other code!\nOpen the file diegame.py in the course repo to inspect the code.\n\nfrom diegame import DieGame\n\n\ndg1 = DieGame()\ndg2 = DieGame()\n\n\ndef check_values():\n    print('n_rolls:', dg1.n_rolls, dg2.n_rolls, DieGame.n_rolls, sep='\\n\\t')\n    print('weights:', dg1.weights, dg2.weights, DieGame.weights, sep='\\n\\t')\n\n\ndg1.n_rolls = 20\n\n\ndg1.weights = [1, 10, 1, 1, 1, 1]\n\n\ndg2.weights.append(1) # Also alters the static because this is not an assignment\n\n\nDieGame.n_rolls = 50\n\n\ncheck_values()\n\nn_rolls:\n    20\n    50\n    50\nweights:\n    [1, 10, 1, 1, 1, 1]\n    [1, 1, 1, 1, 1, 1, 1]\n    [1, 1, 1, 1, 1, 1, 1]\n\n\n\ndg1\n\n&lt;diegame.DieGame at 0x7f2577017950&gt;",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>NB: Example</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-04-ClassAttributeWeirdness.html",
    "href": "notebooks/M07_PythonClasses/M07-04-ClassAttributeWeirdness.html",
    "title": "NB: Understanding Class Attributes",
    "section": "",
    "text": "A Simple Example\nWe define a class with one attribute.\nclass Foo(): x = 1\nWe create an instance of the class.\nfoo1 = Foo()\nNotice that the class defines the value for the instance.\nfoo1.x, Foo.x\n\n(1, 1)\nNow, the instance attribute changes if the class attribute is changed.\nFoo.x = 2\nfoo1.x, Foo.x\n\n(2, 2)\nWhat if we change the local attribute’s value?\nWhat happens to the class attribute?\nfoo1.x = 3\nfoo1.x, Foo.x\n\n(3, 1)\nTurns out we cannot override a global with a local.\nWe can see that the instance attribute is now unaffected by changing the value of the global.\nFoo.x = 4\nfoo1.x, Foo.x\n\n(3, 4)\nWhat happened?\nBy assigning a value to the instance attribute, we converted from global in the class to local in the instance.\nThis is similar to what we saw with local and global variables in functions.\nFinally, notice how changing the value of the class attribute changes all the instance attributes that have not overridden the attribute.\nfoo2 = Foo()\nfoo3 = Foo()\nFoo.x = 10\nfoo1.x, foo2.x, foo3.x, Foo.x\n\n(3, 10, 10, 10)",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>NB: Understanding Class Attributes</span>"
    ]
  },
  {
    "objectID": "notebooks/M07_PythonClasses/M07-04-ClassAttributeWeirdness.html#mutable-class-attributes",
    "href": "notebooks/M07_PythonClasses/M07-04-ClassAttributeWeirdness.html#mutable-class-attributes",
    "title": "NB: Understanding Class Attributes",
    "section": "Mutable Class Attributes",
    "text": "Mutable Class Attributes\nThere is an interesting gotcha regarding class attributes in Python.\nLists and other mutable data structures can be class attributes and yet have their values modified by instances.\nThis is kind of weird, and you should look out for it.\nTo demonstrate, we define a class with two instance variables, one a scalar and one a list.\nWe define a method to alter the value of each.\nWe also define a method compare the state of the instance with that of its class.\n\nclass MyTest():\n    \n    # Two class attributes\n    foo = 0  \n    bar = [] \n    \n    def add_one(self):\n        \"A method to alter the values of the class attributes.\"\n        self.foo += 1       \n        self.bar.append(1)  \n        \n    def replace_bar(self, new_list = []):\n        \"A method to redefine the class list attribute.\"\n        self.bar = new_list \n        \n    def compare_states(self):\n        \"A method to compare the state of instance to that of its class.\"\n        print('i.foo =', self.foo)\n        print('c.foo =', __class__.foo) # Notice how we can refer to an instance's class\n        print('i.bar =', self.bar)\n        print('c.bar =', __class__.bar)\n        \n\nNow let’s run some tests.\nWe define an instance and change nothing.\n\ntest1 = MyTest()\n\n\ntest1.compare_states()\n\ni.foo = 0\nc.foo = 0\ni.bar = []\nc.bar = []\n\n\nNow let’s increment the attributes and see the results.\n\ntest1.add_one()\n\n\ntest1.compare_states()\n\ni.foo = 1\nc.foo = 0\ni.bar = [1]\nc.bar = [1]\n\n\nThe method does disconnect the instance foo from the class foo.\nBut it does not disconnect the instance bar from the class bar.\nInstead, a change that took place in one instance affects the state of all other instances!\nThe difference is that foo is a scalar, and bar is a list, i.e. mutable data structure.\nWhen the instance mutates the class attribute, the class attribute is not reassigned – only its contents change.\nWe do it again to drive the point home.\n\ntest1.add_one()\n\n\ntest1.compare_states()\n\ni.foo = 2\nc.foo = 0\ni.bar = [1, 1]\nc.bar = [1, 1]\n\n\nNow, let’s replace list itself in the instance.\n\ntest1.bar = []\n\n\n# test1.replace_bar()\n\n\nfor i in range(5):\n    print(\"Iter\", i)\n    test1.add_one()\n    test1.compare_states()\n    print()\n\nIter 0\ni.foo = 23\nc.foo = 0\ni.bar = [1, 1, 1, 1, 1, 1]\nc.bar = [1, 1]\n\nIter 1\ni.foo = 24\nc.foo = 0\ni.bar = [1, 1, 1, 1, 1, 1, 1]\nc.bar = [1, 1]\n\nIter 2\ni.foo = 25\nc.foo = 0\ni.bar = [1, 1, 1, 1, 1, 1, 1, 1]\nc.bar = [1, 1]\n\nIter 3\ni.foo = 26\nc.foo = 0\ni.bar = [1, 1, 1, 1, 1, 1, 1, 1, 1]\nc.bar = [1, 1]\n\nIter 4\ni.foo = 27\nc.foo = 0\ni.bar = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nc.bar = [1, 1]\n\n\n\nNotice that now the class list is not altered by the instance list.\nIt remains in the state before the list itself was re-assigned by the instance.\nThis is because we redefined the list itself, not just its content.\nLet’s define a second instance.\n\ntest2 = MyTest()\n\n\ntest2.compare_states()\n\ni.foo = 0\nc.foo = 0\ni.bar = [1, 1]\nc.bar = [1, 1]\n\n\nThe new instance has the original value of foo.\nHowever, notice it starts off with the modified value of bar before it was replaced.\nWe do it a few more times to drive the point home.\n\nfor i in range(5):\n    print(\"Iter\", i)\n    test2.add_one()\n    test2.compare_states()\n    print()\n\nIter 0\ni.foo = 6\nc.foo = 0\ni.bar = [1, 1, 1, 1, 1, 1, 1, 1]\nc.bar = [1, 1, 1, 1, 1, 1, 1, 1]\n\nIter 1\ni.foo = 7\nc.foo = 0\ni.bar = [1, 1, 1, 1, 1, 1, 1, 1, 1]\nc.bar = [1, 1, 1, 1, 1, 1, 1, 1, 1]\n\nIter 2\ni.foo = 8\nc.foo = 0\ni.bar = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nc.bar = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\nIter 3\ni.foo = 9\nc.foo = 0\ni.bar = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nc.bar = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\nIter 4\ni.foo = 10\nc.foo = 0\ni.bar = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nc.bar = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\n\nSome take-aways:\n\nClass attribute changes affect those attributes in all of it instances …\n… unless the instance assigns a value to the attribute.\nHowever, appending to a list — or, more generally, modifying data in a mutable data structure — does not count as an assignment operation. The instance changes will affect the class state.\nBottom line: DEFINE CLASS ATTRIBUTES WITH CAUTION.",
    "crumbs": [
      "M07 Classes",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>NB: Understanding Class Attributes</span>"
    ]
  },
  {
    "objectID": "modules/m08/m08-intro.html",
    "href": "modules/m08/m08-intro.html",
    "title": "M08 Testing",
    "section": "",
    "text": "Topics",
    "crumbs": [
      "M08 Testing"
    ]
  },
  {
    "objectID": "modules/m08/m08-intro.html#topics",
    "href": "modules/m08/m08-intro.html#topics",
    "title": "M08 Testing",
    "section": "",
    "text": "Become acquainted with Exception Handling, Testing, and Debuggings\nUnderstand the cyclical relationship among these\nUnderstand the relation to function and class design\nUnderstand benefits of literate and well-styled coding",
    "crumbs": [
      "M08 Testing"
    ]
  },
  {
    "objectID": "modules/m08/m08-intro.html#readings",
    "href": "modules/m08/m08-intro.html#readings",
    "title": "M08 Testing",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\nLutz 2017, Part 7: Exceptions and Tools\nTesting and Verification (see next Module item)",
    "crumbs": [
      "M08 Testing"
    ]
  },
  {
    "objectID": "modules/m08/m08-testing-and-verification.html",
    "href": "modules/m08/m08-testing-and-verification.html",
    "title": "Testing and Verification",
    "section": "",
    "text": "When Code Breaks\nIn this module, we learn about how to deal with broken code.\nBy “broken code,” we mean everything from code that does not run to code that does not meet the purpose for writing the code.\nThis is a broad topic that covers many levels, facets, and many approaches.\nThese are some basic questions that define the space of the topic:\nWe’ll try to cover this space, and introduce you to some Python tools designed to handle broken code.",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Testing and Verification</span>"
    ]
  },
  {
    "objectID": "modules/m08/m08-testing-and-verification.html#when-code-breaks",
    "href": "modules/m08/m08-testing-and-verification.html#when-code-breaks",
    "title": "Testing and Verification",
    "section": "",
    "text": "What constitutes broken code?\nHow do you prevent your code from breaking?\nHow to tell if your code is broken?",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Testing and Verification</span>"
    ]
  },
  {
    "objectID": "modules/m08/m08-testing-and-verification.html#specifications",
    "href": "modules/m08/m08-testing-and-verification.html#specifications",
    "title": "Testing and Verification",
    "section": "Specifications",
    "text": "Specifications\nOne way to frame this topic is to think in terms of standards of code against which the concept of broken code makes sense.\nThis perspective begins with the concept of a specification: A precise and detailed statement that a stakeholder defines about the properties the code must have.\nThere are different kinds of specification, or “spec”. For example:\n- A design specification specification provides exact instructions for how to build something.\n\nA requirements specification provides exact statements about what should be built. These specify what the code shoudl do, not how or why.\n\n\nTwo kinds of requirements matching are verification and validation.\nVerification ensures the software is built right, according to the requirements, while validation ensures the software is doing the right thing, relative to the problem the client is trying to solve. This is captured by the requirements, but also by the value proposition that motivates the code in the first place.\nThe distinction is similar to that referenced by Peter Drucker in this quote:\n\nIt’s more important to do the right thing than to do things right.",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Testing and Verification</span>"
    ]
  },
  {
    "objectID": "modules/m08/m08-testing-and-verification.html#testing",
    "href": "modules/m08/m08-testing-and-verification.html#testing",
    "title": "Testing and Verification",
    "section": "Testing",
    "text": "Testing\nTo ensure that our code aligns with our requirements and is of the highest quality we can provide, we follow testing and verification procedures.\nTesting is an essential part of verification – doing things right.\nWe use specifications to guide program testing.\n\nThat is, if you don’t have specifications for the product, you cannot verify that you’re doing the right thing.\nLikewise, if behavior is not defined, then it becomes difficult to know what is incorrect behavior.\n\n\n\n\n\n\n\nNote\n\n\n\nSpecifications are rarely perfect. They can change over time for a variety of reasons.\nIn fact, some have joked that programming is the act of “debugging the spec”. We’ll learn more about this when we cover project management.\n\n\nBroadly speaking, there are two kinds of testing and verificaiton:\n\nFormal Verification\nFormal verification involves proof. There are three types:\n\nHand-written, hand-checked\nHand-written, machine-checked (proof-carrying code)\nMachine-written, machine-checked (static analysis)\n\nNone of them are very widely used yet, but the latter two are increasing in popularity.\nFormal verification is complex, difficult, and takes a great deal of effort.\n\n\nEmpirical Verification\nWith empirical procedures, correctness is demonstrated through empirical testing.\nEmpirical testing shows it works on several inputs. In general, testing is:\n\nA lot easier than proof\nA lot harder (and more involved) than writing code \n\n\n\nTypes of Empirical Testing\nThere are many kinds of empirical testing, but we will focus on unit testing in this module.\n\nUnit Testing is where we write code that tests the smallest possible units of the spec (must attempt to test every flow path). The programmer does unit testing as part of the coding process.\nThis assumes that code is componential, i.e. that the smallest units are functionally independent and can be combined in principled ways.\nThis raises the issue of writing well-designed functions and classes.\n\nTwo other kinds of testing are integration and acceptance (beta) testing, which are out of the scope of this lesson. See below for a short description.\n\nIntegration Testing: Test that units work together.\nAcceptance Testing (Beta Testing): Give product to real users to try it out.\n\n\n\n\n\n\n\nDebugging\nAnother aspect of testing and verification which we will not cover here is debugging.\nDebugging – derived from Grace Hopper’s expression “bug” – refers to the process of investigating precisely where and when code breaks.\nProgramming environments like Jupyter Lab and VS Code provide good tools for debugging.",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Testing and Verification</span>"
    ]
  },
  {
    "objectID": "modules/m08/m08-testing-and-verification.html#a-note-of-caution",
    "href": "modules/m08/m08-testing-and-verification.html#a-note-of-caution",
    "title": "Testing and Verification",
    "section": "A Note of Caution",
    "text": "A Note of Caution\nEdsger Dijkstra was a famous computer scientist and A. M. Turing award winner. He said:\n\n“Program testing can effectively show the presence of bugs but is\nhopeless for showing their absence.”     — Edsger Dijkstra\n\nEven if you write a test suite of carefully crafted test cases, and if they all run and pass, it doesn’t mean that no further bugs exist.\nIt is much easier to prove the existence of something than to disprove the existence of something. \nThis realization should motivate us to learn how to create carefully crafted unit tests so that we can test as much as we can.",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Testing and Verification</span>"
    ]
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html",
    "title": "NB: Exception Handling",
    "section": "",
    "text": "Overview\nThere are two ways that programs can break:\nThey can meet or not meet the general and specific requirements for the code.\nThey can just work or not work:\nThese lead to two practices:\nToday, we will focus on some concepts and tools for the latter.\nApproaches to quality\nSome design principles\nSome testing activities\nSome concepts",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>NB: Exception Handling</span>"
    ]
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#overview",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#overview",
    "title": "NB: Exception Handling",
    "section": "",
    "text": "Does it do what is is supposed to do?\nDoes it add value to a process?\nIs it ethical? Does it do harm?\n\n\n\nDoes the run at all?\nIs the code brittle or buggy?\nIs it sensitive to contextual factors like bad user input or a bad database connection?\nDoes the code “work” but produce incorrect outcomes?\n\n\n\nStrategic: Project management\nTactical: Testing and debugging\n\n\n\nWe want to know whether our code is working or not.\nWe also want to know if our code is of a high quality.\n\n\n\nThrough good design\nThroigh principled testing\n\n\n\nFavor the simple over the complex.\n\n\nDon’t confuse the easy with the simple!\n\n\nInvest in data design to simplify algorithm design.\nWrite literate code so that it is intellible to you and others.\nGiven a choice, use tools that are documented and have a user community.\nMany other things :-)\n\n\n\nSyntax checking.\nDebugging.\nAd hoc testing.\nUnit-testing.\nUser testing.\n\n\n\nBeware of silent failures.\nTesting for the absence of bugs is impossible.\n\n\nLike Popper’s concept of falsifiability: We can never prove a scientific hypothesis to be true, we can only falsify.",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>NB: Exception Handling</span>"
    ]
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#errors-vs-exceptions",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#errors-vs-exceptions",
    "title": "NB: Exception Handling",
    "section": "Errors vs Exceptions",
    "text": "Errors vs Exceptions\nThere is a broad distinction between an error and an exception.\nAn error is a serious problem that a reasonable application should not try to catch.\nAn error will stop execution. It means the code if broken and needs to be rewritten.\nAn exception is an issue that is expected or known to occur (e.g., division by zero).\nSoftware must handle exceptions. For example, one bad row of data shouldn’t bring down the application.\nActually, exceptions are also called errors, so it may be better make a distinction between flaws and exceptions.\nIt may help to distinquish between internal and external problems.\nInternal problems are problems with the code itself which the coder needs to address ad design-time.\nExternal problems are problems with how the code may interact with the external world—the user, external data sources, the network, APIs, etc. These are problems whihc users of the code will need to address at run-time.",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>NB: Exception Handling</span>"
    ]
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#exception-handling",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#exception-handling",
    "title": "NB: Exception Handling",
    "section": "Exception Handling",
    "text": "Exception Handling\nProgramming languages offer many tools for testing.\nThese include mechanisms to define and capture errors in code.\nWe call these errors exceptions.\n\nAn exception is an event that occurs during the execution of a program that disrupts the normal flow of the program’s instructions.\n\nWe call we call dealing with these errors exception handling.\n\nWhen a Python script encounters a code failure, it raises an exception.\n\n\nException handling is the foundation of unit testing.",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>NB: Exception Handling</span>"
    ]
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#pythons-tools",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#pythons-tools",
    "title": "NB: Exception Handling",
    "section": "Python’s Tools",
    "text": "Python’s Tools\nExceptions\n\nA type of Python object that represents an error, such as a ValueError.\nThese classify kinds of errors.\nCoders can define these.\n\nException Handlers\n\nControl structures and functions to deal with exceptions, such as:\ntry/except\nraise\nassert\n\nUnit Testing Frameworks\nThere are many of these available to Python users, including:\n\nRobot\nPyTest\nUnittest\nDocTest\nNose2\nTestify",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>NB: Exception Handling</span>"
    ]
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#some-common-built-in-exceptions",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#some-common-built-in-exceptions",
    "title": "NB: Exception Handling",
    "section": "Some Common Built-in Exceptions",
    "text": "Some Common Built-in Exceptions\nPython comes with a number of predefined exceptions.\nLibraries introduce new ones, too.\nThey used in raise statement by the authors of programs when a possible error is anticipated.\nHere are some common examples.\n\nZeroDivisionError\n\n3 / 0\n\nZeroDivisionError: division by zero\n\n\n\n\nSyntax Error\n\n## if-statement missing colon at end\n\nif x &gt; 0\n  print(\"uh oh\")\n\nSyntaxError: expected ':' (223904042.py, line 3)\n\n\n\n\nNameError\n\n## references an undefined variable\n\nprint(x)\n\nNameError: name 'x' is not defined\n\n\n\n\nIndexError\n\n## loop goes off the end of the list\n\nlst = [0, 1, 2]\n\nfor i in range(4):\n    print(lst[i])\n\n0\n1\n2\n\n\nIndexError: list index out of range",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>NB: Exception Handling</span>"
    ]
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#exception-handling-with-tryexcept",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#exception-handling-with-tryexcept",
    "title": "NB: Exception Handling",
    "section": "Exception Handling with try/except",
    "text": "Exception Handling with try/except\nWe use try/except blocks to handle exceptions in our code.\nThese blocks work as follows:\n\nThe try block will contain a statement.\nIf the statement fails, the the flow goes to the except block.\nThe exception block will have code to handle the error, rather than halting the program.\n\nThe process is very similar to if/then: * If there is an error, then raise an excpetion.\nMultiple except statements may be given, to handle specific exceptions.\nBelow, we give a catch-all except for any kind of exception.\nAn excpetion is a mistake that will halt the execution of code.\n\nFor example, trying to access a dictionary key that does not exit.\nOr, a database connection fails.\nVery often, execeptions are caused by an external dependency failing, such as another system or the user.\n\nLet’s try referencing a variable that doesn’t exist with no exception handling.\n\nprint(a)\n\nNameError: name 'a' is not defined\n\n\nNow let’s try referencing a variable that doesn’t exist with a try/except block to handle the exception.\n\ntry:\n    print(a)\nexcept:\n   print(\"caught an exception\")\n\ncaught an exception",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>NB: Exception Handling</span>"
    ]
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#assert-statements",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#assert-statements",
    "title": "NB: Exception Handling",
    "section": "Assert Statements",
    "text": "Assert Statements\nAnother way to catch errors before they happen is to test if computations turned out as expected.\nWe use assert to verify an expression is True.\n\nif expression is True, nothing happens.\nif expression is False, Python raises an AssertionError exception.\n\nAssert statements have the followinf syntax:\nassert Expression[, Arguments]\nwhere [, Arguments] denotes optional arguments.\nFor example, let’s say a program is expecting three arguments to be passed from the command line.\nThe variable num_args counts the arguments.\n\nnum_args = 3\n\nassert num_args == 3, \"number of arguments must be 3!\"\n\nThe assert evaluates to True, and things proceed normally without exception.\nIf we change num_args = 4 this will throw an AssertionError with the provided message.\nThe program then stops.\n\nnum_args = 4\n\nassert num_args == 3, \"number of arguments must be 3!\"\n\nAssertionError: number of arguments must be 3!\n\n\nIf the assert is not given a message, it throws AssertionError:\n\nnum_args = 4\n\nassert num_args == 3\n\nAssertionError: \n\n\nYou can mix assert statements withtry/except blocks.\n\ntry:\n    assert num_args == 3\nexcept:\n    print(\"Got an error\")\n\nGot an error\n\n\nNote that the except message will append the assert message.\n\ntry:\n    assert num_args == 3, \"Assert: Number of arguments must be 3!\"\nexcept AssertionError as e:\n    print('Except:', e)\n\nExcept: Assert: Number of arguments must be 3!",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>NB: Exception Handling</span>"
    ]
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#raise",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#raise",
    "title": "NB: Exception Handling",
    "section": "raise()",
    "text": "raise()\nExceptions can be raised, too.\nUse this if you want to halt the program and let other code that is using this code handle it.|\n\ntry:\n    10/0\nexcept:\n    raise ZeroDivisionError(\"Hey, you can't divide by zero!\")\n\nZeroDivisionError: Hey, you can't divide by zero!\n\n\n\nraise IndexError(\"Bad Index\")\n\nIndexError: Bad Index",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>NB: Exception Handling</span>"
    ]
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#futher-reading",
    "href": "notebooks/M08_PythonTesting/M08-01-ExceptionHandling.html#futher-reading",
    "title": "NB: Exception Handling",
    "section": "Futher Reading",
    "text": "Futher Reading\n\nhttps://www.geeksforgeeks.org/errors-and-exceptions-in-python/\nhttps://www.tutorialspoint.com/python/assertions_in_python.htm",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>NB: Exception Handling</span>"
    ]
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html",
    "title": "NB: Unit Testing with Unittest",
    "section": "",
    "text": "Unit Testing\nUnit testing is a testing technique in which individual modules are tested to determine if there are any issues by the developer himself.\nIt is concerned with functional correctness of the stand-alone modules.\nIt is also concerned with both internal and external errors: those that arise from faulty logic and those that arise from environmental conditions.\nThe main aim is to isolate each unit of the code base to identify, analyze and fix the defects.\nThese units are typicallly functions and methods.",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>NB: Unit Testing with Unittest</span>"
    ]
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#benefits-of-unit-testing",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#benefits-of-unit-testing",
    "title": "NB: Unit Testing with Unittest",
    "section": "Benefits of Unit Testing",
    "text": "Benefits of Unit Testing\n\nDevelopers can work in a predictable way on developing code.\nDevelopers can write their own unit tests.\nYou can get a rapid response for testing small changes\n\nAlso:\n\nReduces defects in the newly developed features or reduces bugs when changing the existing functionality.\nReduces cost of testing, since defects are captured in very early phase.\nImproves design and allows better refactoring of code.\n\nTesting in Python is a huge topic and can come with a lot of complexity, but it doesn’t need to be hard.\nYou can get started creating simple tests for your application in a few easy steps and then build on it from there.",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>NB: Unit Testing with Unittest</span>"
    ]
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#the-unittest-framework",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#the-unittest-framework",
    "title": "NB: Unit Testing with Unittest",
    "section": "The unittest Framework",
    "text": "The unittest Framework\nOne of the popular unit testing frameworks is Unittest.\nIt is works well and is easy to use.\nThere are other tools, though—here’s a comparison of 6 Python testing frameworks.",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>NB: Unit Testing with Unittest</span>"
    ]
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#the-basic-idea",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#the-basic-idea",
    "title": "NB: Unit Testing with Unittest",
    "section": "The Basic Idea",
    "text": "The Basic Idea\nThe Unittest framework provides you with a bunch of assert methods, which are essentially wrappers around Python’s built-in assert function.\nThe basic idea is to write functions that test other functions by using these assert methods instead of peppering your code with them.\nUnittest provides many assert methods – see this cheat sheet for more.\nWe will focus on three: * assertTrue() * assertFalse() * assertEqual()",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>NB: Unit Testing with Unittest</span>"
    ]
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#the-basic-pattern",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#the-basic-pattern",
    "title": "NB: Unit Testing with Unittest",
    "section": "The Basic Pattern",
    "text": "The Basic Pattern\nThe Unittest framework works as follows:\nChoose a package or class that you want to test.\nCreatea a .py file to put your unittest code.\nIn the file, create a class that is a subclass of unittest.TestCase.\nIn that class write methods that are designed to test the behavior of methods in the code you want to test.\n\nThese test methods focus on one behavior of one method (or function).\nThere can be many test methods for each target method.\nEach test method name must be prefixed by test_.\nTests are executing in alphabetical order, so name them in the order you want them executed.\nEach test makes use of an assert method. These methods typically compare expected with actual methods and return False if they don’t match and True if they do.\nYou always want tests to pass, so if you want to test if something breaks, you return True for a False condition.\n\nRun the script from the command line and see the results.\nUpdate the script as you create new methods or refactor existing ones.",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>NB: Unit Testing with Unittest</span>"
    ]
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#assert-methods",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#assert-methods",
    "title": "NB: Unit Testing with Unittest",
    "section": "Assert Methods",
    "text": "Assert Methods\n\n.assertTrue()\n\nNegative Test Case\nRun M08-02-script1.py\nclass TestStringMethods(unittest.TestCase):\n\n    # test function\n    def test_negative(self):\n\n        testValue = False\n        \n        # error message in case if test case got failed\n        message = \"Test value is not true.\"\n        \n        # assertTrue() to check true of test value\n        self.assertTrue(testValue, message)\n\nif __name__ == '__main__':\n    unittest.main()\n\n!python M08-02-script1.py\n\ntest_negative (__main__.TestStringMethods.test_negative) ... FAIL\n\n======================================================================\nFAIL: test_negative (__main__.TestStringMethods.test_negative)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/sfs/qumulo/qhome/rca2t/Documents/MSDS/DS5100/repo-book/notebooks/M08_PythonTesting/M08-02-script1.py\", line 14, in test_negative\n    self.assertTrue(testValue, message)\nAssertionError: False is not true : Test value is not true.\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=1)\n\n\n\n\nPositive Test Case\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    \n    # test function\n    def test_positive(self):\n        \n        testValue = True\n        \n        # error message in case if test case got failed\n        message = \"Test value is not true.\"\n        \n        # assertTrue() to check true of test value\n        self.assertTrue( testValue, message)\n\nif __name__ == '__main__':\n    unittest.main()\n\n!python M08-02-script2.py\n\ntest_positive (__main__.TestStringMethods.test_positive) ... ok\n\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK\n\n\n\n\n\n.assertFalse()\n\nNegative Test Case\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    # test function\n    def test_negative(self):\n        testValue = True\n        # error message in case if test case got failed\n        message = \"Test value is not false.\"\n        # assetFalse() to check test value as false\n        self.assertFalse( testValue, message)\n\nif __name__ == '__main__':\n    unittest.main()\n\n!python M08-02-script3.py\n\nF\n======================================================================\nFAIL: test_negative (__main__.TestStringMethods.test_negative)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/sfs/qumulo/qhome/rca2t/Documents/MSDS/DS5100/repo-book/notebooks/M08_PythonTesting/M08-02-script3.py\", line 10, in test_negative\n    self.assertFalse( testValue, message)\nAssertionError: True is not false : Test value is not false.\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=1)\n\n\n\n\nPositive Test Case\n## unit test case\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    # test function\n    def test_positive(self):\n        testValue = False\n        # error message in case if test case got failed\n        message = \"Test value is not false.\"\n        # assertFalse() to check test value as false\n        self.assertFalse( testValue, message)\n\nif __name__ == '__main__':\n    unittest.main()\n\n!python M08-02-script4.py\n\n.\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK\n\n\n\n\n\n.assertEqual()\nHere is a case where we expect two values to be equal.\n\nNegative Test Case\n## unit test case\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    # test function to test equality of two value\n    def test_negative(self):\n        firstValue = \"geeks\"\n        secondValue = \"gfg\"\n        # error message in case if test case got failed\n        message = \"First value and second value are not equal !\"\n        # assertEqual() to check equality of first & second value\n        self.assertEqual(firstValue, secondValue, message)\n\nif __name__ == '__main__':\n    unittest.main()\n\n!python M08-02-script5.py\n\nF\n======================================================================\nFAIL: test_negative (__main__.TestStringMethods.test_negative)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/sfs/qumulo/qhome/rca2t/Documents/MSDS/DS5100/repo-book/notebooks/M08_PythonTesting/M08-02-script5.py\", line 12, in test_negative\n    self.assertEqual(firstValue, secondValue, message)\nAssertionError: 'geeks' != 'gfg'\n- geeks\n+ gfg\n : First value and second value are not equal !\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=1)\n\n\n\n\nPositive Test Case\n## unit test case\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    # test function to test equality of two value\n    def test_positive(self):\n        firstValue = \"geeks\"\n        secondValue = \"geeks\"\n        # error message in case if test case got failed\n        message = \"First value and second value are not equal !\"\n        # assertEqual() to check equality of first & second value\n        self.assertEqual(firstValue, secondValue, message)\n\nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n\n!python M08-02-script6.py\n\ntest_positive (__main__.TestStringMethods.test_positive) ... ok\n\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>NB: Unit Testing with Unittest</span>"
    ]
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#example-with-user-defined-function",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#example-with-user-defined-function",
    "title": "NB: Unit Testing with Unittest",
    "section": "Example with User-defined Function",
    "text": "Example with User-defined Function\nFunction to test\ndef add_fish_to_aquarium(fish_list):\n    if len(fish_list) &gt; 10:\n        raise ValueError(\"A maximum of 10 fish can be added to the aquarium\")\n    return {\"tank_a\": fish_list}\n\nimport unittest\nClass to test the function\nclass TestAddFishToAquarium(unittest.TestCase):\n    \n    def test_add_fish_to_aquarium_success(self):\n        actual = add_fish_to_aquarium(fish_list=[\"shark\", \"tuna\"])\n        expected = {\"tank_a\": [\"shark\", \"tuna\"]}\n        self.assertEqual(actual, expected)\n\n    def test_add_fish_to_aquarium_exception(self):\n        too_many_fish = [\"shark\"] * 25\n        with self.assertRaises(ValueError) as exception_context:\n            add_fish_to_aquarium(fish_list=too_many_fish)\n        self.assertEqual(\n            str(exception_context.exception),\n            \"A maximum of 10 fish can be added to the aquarium\"\n        )\n\nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n\n!python M08-02-script7.py\n\ntest_add_fish_to_aquarium_exception (__main__.TestAddFishToAquarium.test_add_fish_to_aquarium_exception) ... ok\ntest_add_fish_to_aquarium_success (__main__.TestAddFishToAquarium.test_add_fish_to_aquarium_success) ... ok\n\n----------------------------------------------------------------------\nRan 2 tests in 0.000s\n\nOK",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>NB: Unit Testing with Unittest</span>"
    ]
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#example-with-external-class",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#example-with-external-class",
    "title": "NB: Unit Testing with Unittest",
    "section": "Example with External Class",
    "text": "Example with External Class\nWe create a class called Student and save it in a local file called student.py.\nclass Student:\n    \n    # constructor\n    def __init__(self, name, courses=None):\n        self.name = name # string type\n        self.courses = [] if courses is None else courses # list of strings\n        self.num_courses = len(self.courses)\n        \n    # enroll in a course\n    def enroll_in_course(self, course_name): \n        self.courses.append(course_name)\n        self.num_courses += 1 # increment the number of courses\nThen we create a companion test file for our class, saving it in a file called student_test.py.\nfrom student import Student\nimport unittest\n\nclass EnrollInTestCase(unittest.TestCase): \n    \n    def test_is_incremented_correctly(self):\n        # test if enrollInCourse() method successfully increments the\n        # num_courses attribute of the Student object \n\n        # Create student instance, adding some courses\n        student1 = Student('Katherine', ['DS 5100'])\n        student1.enroll_in_course(\"CS 5050\")\n        student1.enroll_in_course(\"CS 5777\")\n        print(student1.courses)\n        print(student1.num_courses)\n        \n        # Test\n        expected = 3\n        # unittest.TestCase brings in the assertEqual() method\n        self.assertEqual(student1.num_courses, expected)\n        \nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n\n!python student_test.py\n\ntest_01_is_numCoursincremented_correctly (__main__.EnrollInTestCase.test_01_is_numCoursincremented_correctly) ... ['DS 5100', 'CS 5050', 'CS 5777']\n3\nok\n\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK\n\n\nThe messages that unittest prints are error messages on Unix, so if we want to direct them to a file, we need to use 2&gt;.\nNotice how this command only shows the print messages contained in the program.\n\n!python student_test.py 2&gt; student_results.txt\n\n['DS 5100', 'CS 5050', 'CS 5777']\n3\n\n\nThis one, on the other hand, captures the print methods and only shows the errors.\n\n!python student_test.py &gt; student_results1.txt\n\ntest_01_is_numCoursincremented_correctly (__main__.EnrollInTestCase.test_01_is_numCoursincremented_correctly) ... ok\n\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>NB: Unit Testing with Unittest</span>"
    ]
  },
  {
    "objectID": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#further-reading",
    "href": "notebooks/M08_PythonTesting/M08-02-PythonUnitTesting.html#further-reading",
    "title": "NB: Unit Testing with Unittest",
    "section": "Further Reading",
    "text": "Further Reading\n\nunittest — Unit testing framework (Official Docs)\nHow To Use unittest to Write a Test Case for a Function in Python (Digital Ocean)\nA Cheat-sheet of Unittest Assert Methods",
    "crumbs": [
      "M08 Testing",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>NB: Unit Testing with Unittest</span>"
    ]
  },
  {
    "objectID": "modules/m09/m09-intro.html",
    "href": "modules/m09/m09-intro.html",
    "title": "M09 Modules",
    "section": "",
    "text": "Topics",
    "crumbs": [
      "M09 Modules"
    ]
  },
  {
    "objectID": "modules/m09/m09-intro.html#topics",
    "href": "modules/m09/m09-intro.html#topics",
    "title": "M09 Modules",
    "section": "",
    "text": "How Python organizes code into modules, packages, and libraries\nHow to write your own modules\nHow to package and share your modules",
    "crumbs": [
      "M09 Modules"
    ]
  },
  {
    "objectID": "modules/m09/m09-intro.html#readings",
    "href": "modules/m09/m09-intro.html#readings",
    "title": "M09 Modules",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\nLutz 2017, Part V. Modules and Packages → Up to Ch. 24.\nPython Package Tutorial\n\n\n\nOptional\n\nPython Docs",
    "crumbs": [
      "M09 Modules"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-ModulesAndPackages.html",
    "href": "notebooks/M09_PythonModules/M09-01-ModulesAndPackages.html",
    "title": "NB: Modules and Packages",
    "section": "",
    "text": "Modules\nIn Python, a module is a file containing Python code—basically, a collection of expressions and statements.\nIt will usually contain functions, classes, and fixed variables (“constants”) such as the value of \\(\\Large\\pi\\).\nFor instance, let’s say we have a file called fibo.py with the following code:\nTo use this module, you import it into the script you are working in as follows:\nimport fibo\nSince fibo.py is sitting in the same directory as our notebook, so we can do this.\nls | grep fibo.py\n\nfibo.py\nNow we can use it’s attributes (as they are called) in our code.\nfibo.fib(1000)\n\n0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987\nfibo.fib2(100)\n\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>42</span>  <span class='chapter-title'>NB: Modules and Packages</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-ModulesAndPackages.html#modules",
    "href": "notebooks/M09_PythonModules/M09-01-ModulesAndPackages.html#modules",
    "title": "NB: Modules and Packages",
    "section": "",
    "text": "## Fibonacci numbers module\n\ndef fib(n):\n    \"Prints Fibonacci series up to n.\"\n    a, b = 0, 1\n    while a &lt; n:\n        print(a, end=' ')\n        a, b = b, a+b\n    print()\n\ndef fib2(n):\n    \"Returns a Fibonacci series up to n.\"\n    a, b = 0, 1\n    result = []\n    while a &lt; n:\n        result.append(a)\n        a, b = b, a+b\n    return result\n\n\n\n\n\n\n\n\nModule names\nNote that the module’s name we used to import is just the file name without the .py suffix.\nSo, we say that the file fibo.py contains the module fibo.\n\n\n__name__\nPython provides a special variable called __name__ that you can use to get the name of a module.\nFor example:\n\nfibo.__name__\n\n'fibo'\n\n\nNote that when the module being run is the current file, the name changes to __main__.\nLet’s look at the name of this notebook.\n\n__name__\n\n'__main__'",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>42</span>  <span class='chapter-title'>NB: Modules and Packages</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-ModulesAndPackages.html#packages",
    "href": "notebooks/M09_PythonModules/M09-01-ModulesAndPackages.html#packages",
    "title": "NB: Modules and Packages",
    "section": "Packages",
    "text": "Packages\nA package is just a directory that may contain other modules and packages.\nFor a directory to become a package, it must should contain an __init__.py file.\n\nAs of Python 3.3, this file is optional.\nBut it is still useful and commonly used.\n\nThe __init__.py can be totally empty or it can have some Python code in it.\nWe’ll see why you would put code in it below.\nHere’s an example of a simple package:\na_package_dir/\n    __init__.py # Can be empty\n    module_a.py # Contains functions, classes, etc.\nHere is an example directory structure of a package that contains another package:\na_package_dir/\n    __init__.py\n    module_a.py\n    a_sub_package_dir/ # A subdirectory\n        __init__.py\n        module_b.py\n\nImporting from modules from packages\nGiven the above directory and file structures, within a Python file you can import the package a_package like this:\nimport a_package\nThis will run any code in a_package/__init__.py.\nAny variable or function names defined in the __init__.py will be available like this:\na_package.a_name\nHowever, no modules will be imported unless explicity commanded to.\nSo, in the following,\na_package.module_a\nmodule_a will not be imported.\nTo access module_a, you need to explicitly import it:\nimport a_package.module_a\n\n\nExamples\nLet’s look at an example with actual files.\nWe import a package …\n\nimport demo_package1\n\nBut cannot access the module.\n\ndemo_package1.module1\n\nAttributeError: module 'demo_package1' has no attribute 'module1'\n\n\nTo access it, we have to specify it in the import path:\n\nimport demo_package1.module1\n\n\ndemo_package1.module1\n\n&lt;module 'demo_package1.module1' from '/Users/rca2t1/Dropbox/Courses/DS/DS5100/repo-book/notebooks/M09_PythonModules/demo_package1/module1.py'&gt;\n\n\nNow we have it in memory and can access its attributes.\n\ndemo_package1.module1.welcome1()\n\nHi, I'm from Demo 1!\n\n\n\n\nfrom\nWe can use the from statement to provide a context for our imports.\nThis allows use to directly import the module into our code.\n\nfrom demo_package1 import module1\n\n\nmodule1.welcome1()\n\nHi, I'm from Demo 1!\n\n\n\nfrom demo_package1.module1 import welcome1\n\n\nwelcome1()\n\nHi, I'm from Demo 1!",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>42</span>  <span class='chapter-title'>NB: Modules and Packages</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-ModulesAndPackages.html#preloading-modules-and-functions",
    "href": "notebooks/M09_PythonModules/M09-01-ModulesAndPackages.html#preloading-modules-and-functions",
    "title": "NB: Modules and Packages",
    "section": "Preloading Modules and Functions",
    "text": "Preloading Modules and Functions\nRembmer that you can put any code you want in a __init__.py file.\nIt’s as if the package directory is a module, and the contents the init file is the content of the module.\nA common use case for putting code into the package initialization file is to preload modules when importing the package.\nThis can be useful if you want to make certain modules available to all other modules in your project.\nYou can also use it to import files to be shared by modules in your own project for convenience.\nFor example, let’s say you have the following package set up:\nfunny/\n    __init__.py\n    funniest.py # contains the function joke()\nIf you wanted to import the module funniest and have access to the function joke(), you’d have to do this:\nimport funny.funniest\nAnd then to use the function, do this:\nfunny.funniest.joke()\nYou can’t do this:\nimport funny\n\nfunny.funniest.joke()\nYou could also do this:\nfrom funny import funniest\n\nfunniest.joke()\nOr even this:\nfrom funny.funniest import joke\n\njoke()\nNote, you can’t do this:\nfrom funny import funniest.joke\nNotice the grammar here.\nThe from command provides a context, and the import command specifies the variable name for the resource.\nIn each case, what follows import is the name of the resource you will use to access it.\nNow, you can by-pass having to import the module doing this in the init file.\nBasically, you can put the same import line into the init file, and it’s as if you did it in your program.\nHere are some scenarios.\nIn the init file:\nimport funny.funniest\nThen in the program:\nimport funny\n\nfunny.funniest.joke()\nOr, in the init file:\nfrom funny import funniest\nThen in the program:\nimport funny\n\nfunny.funniest.joke()\nOr, you can put this in the initialization file:\nfrom funny.funniest import joke\nThen in the program, you can do this:\nimport funny\n\nfunny.joke()\nOr this:\nfrom funny import joke\n\njoke()\nSee how it simplifies the import statement?\nLet’s looks at some examples with real files.\n\nExample 1: Empty __init__.py\nLet’s import a module, this time using an alias.\n\nimport demo_package1.module1 as d1m\n\n\nd1m.welcome1()\n\nHi, I'm from Demo 1!\n\n\nHere we use a from statement to provide context.\n\nfrom demo_package1.module1 import welcome1\n\n\nwelcome1()\n\nHi, I'm from Demo 1!\n\n\n\n\nExample 2: Edited __init__.py\nNow, we can allow the users to import a module function directly from a package by simply adding the following to our package initializer:\nfrom package.module import func # or class\nFor example, our Demo2 __init__().py contains:\nfrom demo_package2.module2 import welcome2\nThis allows us to do this in our calling script:\n\nimport demo_package2 as d2\n\n\nd2.welcome2()\n\nHi, I'm from Demo 2!\n\n\nOr this:\n\nfrom demo_package2 import welcome2\n\n\nwelcome2()\n\nHi, I'm from Demo 2!\n\n\nIt turns out, this is a common practice.\n\n\nRelative vs Absolute Paths\nYou will sometimes see a dot . used in the import statements found in init files.\nIt is used in the context a from statement. For example:\nfrom . import funniest\nor\nfrom .funniest import joke\nThe dot is used to shift from absolute to relative path.\nIn other words, when you import modules in an __init__.py file within a package, the dot (.) refers to the current package or module’s namespace.\nFor example, consider a package structure like this:\nmypackage/\n    __init__.py\n    module1.py\n    module2.py\nInside the __init__.py file, if you import module1 using a relative import with a dot (.), it would look like this:\nfrom . import module1\nThis means that module1 is being imported from the current package (mypackage in this case).\nSimilarly, if you wanted to import module2 from module1, you could do it like this:\nfrom . import module2\nThis would import module2 from the same package as the __init__.py file.\nUsing dot notation for imports in __init__.py is a way to make relative imports within the package, making the code more readable and maintainable.",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>42</span>  <span class='chapter-title'>NB: Modules and Packages</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-ModulesAndPackages.html#namespaces",
    "href": "notebooks/M09_PythonModules/M09-01-ModulesAndPackages.html#namespaces",
    "title": "NB: Modules and Packages",
    "section": "Namespaces",
    "text": "Namespaces\nYou can see that a python module acts as a single namespace, which is used to organize a collection of values:\n\nfunctions\nconstants\nclass definitions\nreally any old value\n\nA namespace is a collection of currently defined names being used by a program.\n\nYou can think of it as something like a Python dictionary in which the keys are the object names\nand the values are the objects themselves.\n\nIt’s a way of making sure variable and function names do not collide or get confused with each other.\nPython has four namespaces:\n\nBuilt-In: Contains the names of all of Python’s built-in objects. See dir(__builtins__)\nGlobal: Contains any names defined at the level of the main program.\n\n\nA global namespace is also created for any module that your program imports. See globals().\n\n\nEnclosing: The namespaces of a function for any functions defined within that function.\nLocal: Contains any names defined in a function.\n\nNamespaces are related to scope.\nTo know the context in which a name has meaning, Python searches namespaces from the inside out.\nL -&gt; E -&gt; G -&gt; B\n\n\n\nimage.png\n\n\nSee M09-01a-Globals.ipynb for a demo.\nSee Namespaces and Scope in Python (Real Python) for a good primer.\nHere is a demonstration of namespaces:\n\ndef foo():\n    x = y = z = 1\n    print(locals())\n    \n    def bar():\n        a = b = c = 2\n        print(locals())\n        \n    bar()\n\n\nfoo()\n\n{'x': 1, 'y': 1, 'z': 1}\n{'a': 2, 'b': 2, 'c': 2}\n\n\nWhat happens if we print globals()?",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>42</span>  <span class='chapter-title'>NB: Modules and Packages</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-ModulesAndPackages.html#how-python-finds-things",
    "href": "notebooks/M09_PythonModules/M09-01-ModulesAndPackages.html#how-python-finds-things",
    "title": "NB: Modules and Packages",
    "section": "How Python finds things",
    "text": "How Python finds things\nHow does Python know where to find modules?\nThe interpreter keeps a list of all the places that it looks for modules or packages when you do an import. It is stored in the sys module.\nimport sys\nfor p in sys.path:\n    print p\nYou can edit that list to add or remove paths to let python find modules on a new place.\nsys.path.append(some_local_dir)\nRemember that every module has a __file__ name that points to the path it lives in.\nThis lets you add paths relative to where you are, etc.\nsys.path.append(f\"{__file__}/local_module_directory\")\n\nimport sys\n\n\npwd\n\n'/Users/rca2t1/Dropbox/Courses/DS/DS5100/repo-book/notebooks/M09_PythonModules'\n\n\n\nsys.path\n\n['/Users/rca2t1/anaconda3/lib/python311.zip',\n '/Users/rca2t1/anaconda3/lib/python3.11',\n '/Users/rca2t1/anaconda3/lib/python3.11/lib-dynload',\n '',\n '/Users/rca2t1/anaconda3/lib/python3.11/site-packages',\n '/Users/rca2t1/anaconda3/lib/python3.11/site-packages/aeosa']\n\n\nTo install a package, you need a setup file. This allows you to build a package.",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>42</span>  <span class='chapter-title'>NB: Modules and Packages</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01-ModulesAndPackages.html#more-info",
    "href": "notebooks/M09_PythonModules/M09-01-ModulesAndPackages.html#more-info",
    "title": "NB: Modules and Packages",
    "section": "More Info",
    "text": "More Info\nThere is, of course, a lot more to this topic than what’s covered here.\nWe’ve covered what you need to know to get started.\nSee the official docs on modules for more depth.\nDiscuss the idea of a project directory. The project directory contains the package directories and modules, as well as the setup file and other auxiliary files.",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>42</span>  <span class='chapter-title'>NB: Modules and Packages</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01a-Globals.html",
    "href": "notebooks/M09_PythonModules/M09-01a-Globals.html",
    "title": "NB: More on Classes and Globals",
    "section": "",
    "text": "Class and Globals\nWe experiment to see if classes can see the globals of their surrounding environment.\nWe already know that functions can.\nclass Test:\n    \n    # x has not been declared within the class \n    # or any of its methods\n    \n    def static_test():\n        print(x)\n        \n    def method_test(self):\n        print(x)\nx = 5\ntry:\n    Test.static_test()\nexcept NameError as e:\n    print(e)\n\n5\nt = Test()\ntry:\n    t.method_test()\nexcept NameError as e:\n    print(e)\n\n5\nSo, global variables are also visible within classes.\nThe class can see the globals, even though x was defined after the class definition.\nBut what about imported classes and functions?",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>NB: More on Classes and Globals</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01a-Globals.html#try-with-imports",
    "href": "notebooks/M09_PythonModules/M09-01a-Globals.html#try-with-imports",
    "title": "NB: More on Classes and Globals",
    "section": "Try with Imports",
    "text": "Try with Imports\nNow let’s see how scope works with import.\nHere is the code contained by the file test.py:\ny = 15\n\ndef imported_function_test():\n    print(x)\n\ndef imported_function_test_y():\n    print(y)\n    \nclass ImportedTest:\n    \n    def imported_static_test():\n        print(x)\n    \n    def imported_method_test(self):\n        print(x)\n        \n    def imported_static_test_y():\n        print(y)\n    \n    def imported_method_test_y(self):\n        print(y)\nNow we import the module and all of its defined functions and classes.\n\nfrom test import *\n\n\nImported Function\nNow let’s see if x is in any way visible to module.\n\ntry:\n    imported_function_test()\nexcept NameError as e:\n    print(e)\n\nname 'x' is not defined\n\n\n\ntry:\n    imported_function_test_y()\nexcept NameError as e:\n    print(e)\n\n15\n\n\n\n\nImported Static Method\n\ntry:\n    ImportedTest.imported_static_test()\nexcept NameError as e:\n    print(e)\n\nname 'x' is not defined\n\n\n\ntry:\n    ImportedTest.imported_static_test_y()\nexcept NameError as e:\n    print(e)\n\n15\n\n\n\n\nImported Instance Method\n\nt2 = ImportedTest()\n\n\ntry:\n    t2.imported_method_test()\nexcept NameError as e:\n    print(e)\n\nname 'x' is not defined\n\n\n\ntry:\n    t2.imported_method_test_y()\nexcept NameError as e:\n    print(e)\n\n15",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>NB: More on Classes and Globals</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-01a-Globals.html#conclusion",
    "href": "notebooks/M09_PythonModules/M09-01a-Globals.html#conclusion",
    "title": "NB: More on Classes and Globals",
    "section": "Conclusion",
    "text": "Conclusion\nThe global context of a class or function is the module, i.e. file, in which it is defined,\nnot in which it is called.",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>NB: More on Classes and Globals</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html",
    "title": "NB: User Created Packages",
    "section": "",
    "text": "Why Build a Package?\nYou package code in order to add it to your python system for general use, and to share it with others.\nIt’s also good to have well organized code.\nThis applies to how to organize your programs internally, and externally as files and directories.\nIt’s easy to do. There are a bunch of nifty tools that help you build, install and distribute packages.",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>NB: User Created Packages</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#projects",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#projects",
    "title": "NB: User Created Packages",
    "section": "Projects",
    "text": "Projects\n\nWhat is a Project?\nWe define a project as an encompassing directory within which to put a package and all the code necessary to actually use it.\nSo, a project directory contains A collection of packages and modules (python files) along with:\n\ndocumentation, e.g. READMDE files.\ntests, e.g. unit tests and results.\nany top-level scripts, e.g. the Scenario notebooks for your final project.\nany data files required.\ninstructions and scripts to build and install the code.\n\nThe project directory is often a git repo.",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>NB: User Created Packages</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#what-does-it-mean-to-build-your-package",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#what-does-it-mean-to-build-your-package",
    "title": "NB: User Created Packages",
    "section": "What does it mean to build your package?",
    "text": "What does it mean to build your package?\nTo build your own package, you of course need some Python files you want to deploy.\nThen you create the following:\n\nCreate the basic package structure, such as EXAMPLE 3 below.\nWrite a setup.py using a package tool (see below).\n\n## EXAMPLE 3\n\na_package_dir\n    __init__.py\n    module_a.py\ntests\n    ...\nsetup.py # Or pyproject.toml \nThis will be contained by a project directory.",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>NB: User Created Packages</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#about-setup.py",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#about-setup.py",
    "title": "NB: User Created Packages",
    "section": "About setup.py",
    "text": "About setup.py\nYour setup.py file describes your package, and tells the packaging tool how to package, build, and install it.\nIt is Python code, so you can add anything custom you need to it.\nIn the simple case, it is basically a configuration files with keys and values.\nWhat does setup.py contain?\n\nVersion & package metadata\nList of packages to include\nList of other files to include\nList of dependencies\nList of extensions to be compiled\n\nAbout pyproject.toml\nFor a lot reasons that beyond the scope of this document, setup.py\nis being superceded by the use of pyproject.toml files to store\nsetup configuration information.\nHowever, for now we’re going to stick to the old school approach.",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>NB: User Created Packages</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#example-setup-files",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#example-setup-files",
    "title": "NB: User Created Packages",
    "section": "Example Setup Files",
    "text": "Example Setup Files\n\nExample 1\nfrom distutils.core import setup\n\nsetup(name='mypkg',\n      version='1.0',\n      \n      # list folders, not files\n      packages=['mypkg', 'mypkg.subpkg'], # Include packages in the project\n      install_requires=['click'],         # Required libraries\n)\n\n\nExample 2\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='MyPackageName',\n    version='1.0.0',\n    url='https://github.com/mypackage.git',\n    author='Author Name',\n    author_email='author@gmail.com',\n    description='Description of my package',\n    packages=find_packages(),    \n    install_requires=['numpy &gt;= 1.11.1', 'matplotlib &gt;= 1.5.1'],\n)\n\n\nExample 3\nfrom setuptools import setup\n\nsetup(\n    name = 'PackageName',\n    version = '0.1.0',\n    author = 'An Awesome Coder',\n    author_email = 'aac@example.com',\n    packages = ['package_name', 'package_name.test'],\n    scripts = ['bin/script1','bin/script2'],\n    url = 'http://pypi.python.org/pypi/PackageName/',\n    license = 'LICENSE.txt',\n    description = 'An awesome package that does something',\n    long_description = open('README.txt').read(),\n    install_requires = [\n        \"Django &gt;= 1.1.1\",\n        \"pytest\",\n    ],\n)",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>NB: User Created Packages</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#a-summary-of-keys",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#a-summary-of-keys",
    "title": "NB: User Created Packages",
    "section": "A Summary of Keys",
    "text": "A Summary of Keys\nAs mentioned about, the main content of basic setup files is configuraton information. The keys that you should include in your projects are the following:\n\nname: A string of the package name as title, not a filename.\nversion: A string of the version number expression, typically using the MAJOR.MINOR.PATCH pattern. See Semantic Versioning for more information.\nauthor: A string with the creator’s name.\nauthor_email: A string with the creator’s email address.\npackages: A list of strings of package directories in the project.\nurl: A string of the URL to the code repo.\nlicense: A string of the license file name.\ndescription: A string with a short blurb of the project.\nlong_description: A link to a longer description. Can do something like open('README.txt').read().\ninstall_requires: A list of strings of external libraries that the project requires.\n\n\nPython packaging tools\nIn writing setup.py, you need to use a packaging tool.\nNotice that we’ve imported the setuptools library.\n\nThe package tool distutils is included with Python, but it is not recommended.\nInstead, use setuptools, a third party tool that extends distutils and is used in most modern Python installations.\n\n\n\nSummary of fields",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>NB: User Created Packages</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#quick-demo",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#quick-demo",
    "title": "NB: User Created Packages",
    "section": "Quick Demo",
    "text": "Quick Demo\nSo, let’s look at a simple package.\nSource: Minimal Structure (python-packaging)\n\nDirectory\nHere is our directory structure:\n\n!ls -lR demo_package3/\n\ntotal 8\ndrwxr-xr-x@ 4 rca2t1  staff  128 Jul  2 07:39 build\ndrwxr-xr-x@ 5 rca2t1  staff  160 Jul  2 07:21 funniest\ndrwxr-xr-x@ 6 rca2t1  staff  192 Jul  2 07:39 funniest.egg-info\n-rw-r--r--@ 1 rca2t1  staff  301 May 10 12:10 setup.py\n-rw-r--r--@ 1 rca2t1  staff    0 May 10 12:10 test.py\n\ndemo_package3//build:\ntotal 0\ndrwxr-xr-x@ 2 rca2t1  staff  64 Jul  2 07:39 bdist.macosx-10.9-x86_64\ndrwxr-xr-x@ 3 rca2t1  staff  96 Jul  2 07:39 lib\n\ndemo_package3//build/bdist.macosx-10.9-x86_64:\ntotal 0\n\ndemo_package3//build/lib:\ntotal 0\ndrwxr-xr-x@ 4 rca2t1  staff  128 Jul  2 07:39 funniest\n\ndemo_package3//build/lib/funniest:\ntotal 16\n-rw-r--r--@ 1 rca2t1  staff   64 May 10 12:10 __init__.py\n-rw-r--r--@ 1 rca2t1  staff  197 May 10 12:10 funniest.py\n\ndemo_package3//funniest:\ntotal 16\n-rw-r--r--@ 1 rca2t1  staff   64 May 10 12:10 __init__.py\n-rw-r--r--@ 1 rca2t1  staff  197 May 10 12:10 funniest.py\n\ndemo_package3//funniest.egg-info:\ntotal 32\n-rw-r--r--@ 1 rca2t1  staff  211 Jul  2 07:39 PKG-INFO\n-rw-r--r--@ 1 rca2t1  staff  178 Jul  2 07:39 SOURCES.txt\n-rw-r--r--@ 1 rca2t1  staff    1 Jul  2 07:39 dependency_links.txt\n-rw-r--r--@ 1 rca2t1  staff    9 Jul  2 07:39 top_level.txt\n\n\n\n\nSetup file\nHere is what out setup.py file has inside:\n\nprint(open('demo_package3/setup.py', 'r').read())\n\nfrom setuptools import setup\n\nsetup(name='funniest',\n      version='0.1',\n      description='The funniest joke in the world',\n      url='http://github.com/storborg/funniest',\n      author='Flying Circus',\n      author_email='flyingcircus@example.com',\n      license='MIT',\n      packages=['funniest'])\n\n\n\n\n__init__.py\n\nprint(open('demo_package3/funniest/__init__.py', 'r').read())\n\nfrom . funniest import joke\n\nprint(\"Have I got a joke for you!\")\n\n\n\n\nfunniest.py\n\nprint(open('demo_package3/funniest/funniest.py', 'r').read())\n\ndef joke():\n    \"This function just tells a joke. Or tries to.\"\n    return (u'Wenn ist das Nunst\\u00fcck git und Slotermeyer? Ja! ... '\n            u'Beiherhund das Oder die Flipperwaldt gersput.')\n\n\n\n\nInstall\n\n!cd demo_package3/; pip install .\n\nProcessing /Users/rca2t1/Dropbox/Courses/DS/DS5100/repo-book/notebooks/M09_PythonModules/demo_package3\n  Preparing metadata (setup.py) ... done\nBuilding wheels for collected packages: funniest\n  Building wheel for funniest (setup.py) ... done\n  Created wheel for funniest: filename=funniest-0.1-py3-none-any.whl size=1570 sha256=873472113bd2f3ab9009c9392e99c241a10cf010146d3ae8f1bd643f4aff5a35\n  Stored in directory: /private/var/folders/14/rnyfspnx2q131jp_752t9fc80000gn/T/pip-ephem-wheel-cache-p60arvuk/wheels/15/54/43/c8d15db54d73a0a36b734a534338ab131e3049da20a1bfd0fa\nSuccessfully built funniest\nInstalling collected packages: funniest\n  Attempting uninstall: funniest\n    Found existing installation: funniest 0.1\n    Uninstalling funniest-0.1:\n      Successfully uninstalled funniest-0.1\nSuccessfully installed funniest-0.1\n\n\n\n\nTry it out\n\nfrom funniest import joke\n\nHave I got a joke for you!\n\n\n\njoke()\n\n'Wenn ist das Nunstück git und Slotermeyer? Ja! ... Beiherhund das Oder die Flipperwaldt gersput.'",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>NB: User Created Packages</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#many-ways-to-install",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#many-ways-to-install",
    "title": "NB: User Created Packages",
    "section": "Many Ways to Install",
    "text": "Many Ways to Install\nRunning setup.py directly with python\npython setup.py sdist   # Builds a source distribution as tar archie\npython setup.py build   # Builds from source\npython setup.py install # Installs to Python\npython setup.py develop # Installs in develop mode (changes are immediately reflected)\nUsing pip\npip install .    # Installs to Python\npip install -e . # To create symlink, so you can keep working on the code (develop mode)",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>NB: User Created Packages</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#testing-code",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#testing-code",
    "title": "NB: User Created Packages",
    "section": "Testing Code",
    "text": "Testing Code\nAs you work, you will want to write tests and put them somewhere. A good idea is to put your tests in the root of the project directory. There are other options and approaches though, some of which are covered in the resource below.\nSee Where to Put Tests?.",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>NB: User Created Packages</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#a-more-complex-project-structure",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#a-more-complex-project-structure",
    "title": "NB: User Created Packages",
    "section": "A More Complex Project Structure",
    "text": "A More Complex Project Structure\nproject_name/\n    bin/\n    CHANGES.txt\n    docs/\n    LICENSE.txt\n    MANIFEST.in\n    README.txt\n    setup.py\n    test_module_1.py\n    test_module2.py      \n    package_name/\n        __init__.py\n        module1.py\n        module2.py\nCHANGES.txt: log of changes with each release\nLICENSE.txt: text of the license you choose (do choose one!)\nMANIFEST.in: description of what non-code files to include\nREADME.txt: description of the package should be written in ReST or Markdown (for PyPi):\nsetup.py: the script for building/installing package.\nbin/: This is where you put top-level scripts\n( some folks use scripts )\ndocs/: the documentation\npackage_name/: The main package this is where the code goes.\ntest/: your unit tests. Options here:",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>NB: User Created Packages</span>"
    ]
  },
  {
    "objectID": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#more-info",
    "href": "notebooks/M09_PythonModules/M09-02-MakingYourOwn.html#more-info",
    "title": "NB: User Created Packages",
    "section": "More Info",
    "text": "More Info\nhttps://packaging.python.org/en/latest/overview/",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>NB: User Created Packages</span>"
    ]
  },
  {
    "objectID": "modules/m09/m09-review.html",
    "href": "modules/m09/m09-review.html",
    "title": "Review",
    "section": "",
    "text": "Method arguments and Class Attributes\n\n\nUnderstanding Modules and Packages\n\n\n\n\n\nModules\n\n\n\n\n\nA module is a single namespace with many possible values (functions, classes, constants, etc.)\n\n\n\n\nUsually corresponds to a file.\n\n\n\n\nAll modules have a name.\n\n\n\n\nPython has only one type of module object.\n\n\n\n\n\nA Package is just a module that may contain other modules (or packages).\n\n\n\n\n\nIt is module with a path attribute.\n\n\n\n\nPackages organize modules into a named hierarchy.\n\n\n\n\nPackages : modules :: directories : files\n\n\n\n\nUsually corresponds to a directory with with an init.py file in it.\n\n\n\n\n\nThere are two kinds of packages (as of 3.3)\n\n\n\n\n\nRegular packages are traditional (2 and up to 3.2), they are a directory with an init.py file. They are dependent on the file system.\n\n\n\n\nNamespace packages are composed of portions. They do not have an init.py file. Portions can be anywhere. They are not dependent on the file system. They may be virtual.\n\n\n\n\n\nImport statements bring modules into modules. Combines two operations:\n\n\n\n\n\nSearches for named module.\n\n\n\n\nBinds results to local name, i.e. the fully qualified path or an alias.\n\n\n\n\nCompiles and runs the files and packages it imports.\n\n\n\n\n\nSome general ideas\n\n\n\n\n\nYou can think of a module as a supplemental file relative to a top-level program or script.\n\n\n\n\nModule files generally don’t do anything when run directly – they are used by other files.\n\n\n\n\nWhen modules are imported, their elements are called attributes\n\n\n\n\nImports execute init.py files from the context of the directory of execution. Think of this as the project directory.\n\n\n\n\nFile and directory names should follow variable and function naming conventions since they will be used to create the names used in the importing program.\n\n\n\n\nGlobal scope is always the file enclosing it, regardless of which module it is ultimately called from.",
    "crumbs": [
      "M09 Modules",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Review</span>"
    ]
  },
  {
    "objectID": "modules/m10/m10-intro.html",
    "href": "modules/m10/m10-intro.html",
    "title": "M10 Basic R",
    "section": "",
    "text": "Topics",
    "crumbs": [
      "M10 Basic R"
    ]
  },
  {
    "objectID": "modules/m10/m10-intro.html#topics",
    "href": "modules/m10/m10-intro.html#topics",
    "title": "M10 Basic R",
    "section": "",
    "text": "Present R basics — syntax, data types, and operators\nPresent R data structures – vectors, lists, matrices, and data frames\nCreate a function in R, and use it in a program",
    "crumbs": [
      "M10 Basic R"
    ]
  },
  {
    "objectID": "modules/m10/m10-intro.html#readings",
    "href": "modules/m10/m10-intro.html#readings",
    "title": "M10 Basic R",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\nW3Schools R Tutorial\nW3Schools R Data Structures\n\n\n\nOptional\n\nYau, R Tutorial, “R Introduction”\n\nSuper concise.",
    "crumbs": [
      "M10 Basic R"
    ]
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html",
    "href": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html",
    "title": "NB: Getting Started",
    "section": "",
    "text": "Overview",
    "crumbs": [
      "M10 Basic R",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>NB: Getting Started</span>"
    ]
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#overview",
    "href": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#overview",
    "title": "NB: Getting Started",
    "section": "",
    "text": "Why R?\nWhy cover R in a course focused on Python?\nThere are many reasons for this:\n\nWe have been studying Python as a data processing language from the perspective of data science. But R is in many ways the original data science language.\n\nIt was built from the beginning by and for data analysts, statisticians, and scientists.\nNote, however, the R was not built by and for data miners, who compose a large segment of the data science community.\n\nPython borrows many concepts from R, including the data frame.\nThe R community provides insights into data processing through excellent documentation and well-designed code.\nAlthough not as popular as it once was, it is still widely used—you may find yourself on a team that prefers it.\nMany of the courses in the UVA SDS programs use R.\nIt’s not that hard, especially once you know basic programming concepts.\n\n\n\nR’s Design\n\nA scripting language, like Python.\nDesigned to support statistical computing above all.\nVery strong academic community.\nMany domain-specific functions are built-in.\nVector-first thinking.\nEverything is an object.\n\n\n\nR Syntax\n\nSyntax loosely follows traditional C-style\n\nBraces { and } are used to form blocks.\nSemi-colons are used optionally to end statements, required if on same line.\n\nAssignments are made with &lt;- or -&gt;.\nDots . have no special meaning—they are not operators.\n\nThey are used like underscores _ in Python.\n\nSingle and double quotes have the same meaning, but double quotes tend to be preferred.\n\nUse single quotes if you expect your string to contain double quotes.\nBackslash escape applies to R strings, although since there are no raw strings—Python’s r\" \"—we often have to supply double backslashes in regular expressions.\n\n\n\n\nUsing R\n\nAlthough there are many ways to run R programs, by far the most common is to use R Studio.\nR Studio provides a fully-functional programming environment that includes an editor, a command-line, access to the file system, a help system, an installation system, etc.\n\nOther programs run R too, though, such as VSCode and Jupyter.\n\nR programs can be plain text files with an .r suffix, R Markdown files (.Rmd), or many other kinds of file.\n\nWe will discuss these in a later module.\n\n\nOK, so let’s get into the basics—beginning with data types.",
    "crumbs": [
      "M10 Basic R",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>NB: Getting Started</span>"
    ]
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#r-data-types",
    "href": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#r-data-types",
    "title": "NB: Getting Started",
    "section": "R Data Types",
    "text": "R Data Types\nThere are several basic R data types.\n\nNumeric\nInteger\nComplex\nLogical\nCharacter\n\n\nNumeric\nFloating point numbers are called “numerics” in R.\nIt is the default data type.\nIf we assign a decimal value to a variable x, x will be of numeric type:\n\nx &lt;- 10.5      # assign a decimal value \nx              # print the value of x \n\n[1] 10.5\n\n\n\nclass(x)      # print the class name of x \n\n[1] \"numeric\"\n\n\nEven if we assign an integer to a variable k, it is will still be saved as a numeric value.\n\nk &lt;- 1\nk              # print the value of k \n\n[1] 1\n\n\n\nclass(k)       # print the class name of k \n\n[1] \"numeric\"\n\n\nThat k is not an integer can be confirmed with is.integer():\n\nis.integer(k)  # is k an integer?\n\n[1] FALSE\n\n\n\n\nIntegers\nTo create an integer variable in R, we use as.integer().\n\ny &lt;- as.integer(3) \ny              # print the value of y \n\n[1] 3\n\n\n\nclass(y)       # print the class name of y \n\n[1] \"integer\"\n\nis.integer(y)  # is y an integer? \n\n[1] TRUE\n\n\nWe can also declare an integer by appending an L suffix.\n\ny &lt;- 3L \nis.integer(y)  # is y an integer? \n\n[1] TRUE\n\n\nWe can coerce, or cast, a numeric value into an integer with as.integer().\n\nas.integer(3.14)    # coerce a numeric value \n\n[1] 3\n\n\nAnd we can parse a string for decimal values in much the same way.\n\nas.integer(\"5.27\")  # coerce a decimal string \n\n[1] 5\n\n\nOn the other hand, you can’t parse a non-decimal string.\n\nas.integer(\"Joe\")   # coerce an non-decimal string \n\nWarning: NAs introduced by coercion\n\n\n[1] NA\n\n\nWe can convert booleans to numbers this way, too.\n\nas.integer(TRUE)    # the numeric value of TRUE \n\n[1] 1\n\nas.integer(FALSE)   # the numeric value of FALSE \n\n[1] 0\n\n\n\nMath Operators\nNumerics and integers are subject to the standard array of arithmetic operations.\n\n\n\nOperator\nDescription\n\n\n\n\n+\naddition\n\n\n-\nsubtraction\n\n\n*\nmultiplication\n\n\n/\ndivision\n\n\n^ or **\nexponentiation\n\n\nx %% y\nmodulus (x mod y) 5%%2 is 1\n\n\nx %/% y\ninteger division 5%/%2 is 2\n\n\n\n\n\n\nLogical (Boolean)\nA logical value is often produced from the comparison between values.\n\nx &lt;- 1\ny &lt;- 2      # sample values \nz &lt;- x &gt; y  # is x larger than y? \nz           # print the logical value \n\n[1] FALSE\n\n\n\nclass(z)       # print the class name of z \n\n[1] \"logical\"\n\n\n\nLogical Operators\nThe standard logical operations are & (and), | (or), and ! (negation).\n\nu &lt;- TRUE\nv &lt;- FALSE\nu & v          # u AND v \n\n[1] FALSE\n\n\n\nu | v          # u OR v \n\n[1] TRUE\n\n\n\n!u             # negation of u \n\n[1] FALSE\n\n\nNote that you can use T and F instead of TRUE and FALSE.\n\na &lt;- T\nb &lt;- F\na & b\n\n[1] FALSE\n\n\n\n\n\nCharacters\nA character object is used to represent string values in R.\nThis may confusing if you are coming from a language where ‘character’ means an individual character, such as A.\nWe may convert non-character objects into characters with the as.character() function:\n\nx &lt;- as.character(3.14) \nx\n\n[1] \"3.14\"\n\n\n\nclass(x)       # print the class name of x \n\n[1] \"character\"\n\n\n\npaste()\nTwo character values can be concatenated with the paste() function.\nR does not overload the + operator.\n\nfname &lt;- \"Joe\"\nlname &lt;-\"Smith\" \npaste(fname, lname) \n\n[1] \"Joe Smith\"\n\n\npaste() takes a sep argument:\n\npaste(\"A\", \"B\", \"C\", sep=\"--\")\n\n[1] \"A--B--C\"\n\n\n\n\nsprintf()\nIt is often convenient to create a readable string with the sprintf() function, which has a C language syntax.\n\nsprintf(\"%s has %d dollars\", \"Sam\", 100) \n\n[1] \"Sam has 100 dollars\"\n\n\n\n\nsubstr()\nTo extract a substring, we apply the substr() function.\nHere is an example showing how to extract the substring between the third and twelfth positions in a string.\n\nsubstr(\"Mary has a little lamb.\", start=3, stop=12) \n\n[1] \"ry has a l\"\n\n\n\n\nsub()\nAnd to replace the first occurrence of the word “little” by another word “big” in the string, we apply the sub() function.\nThis function can use regular expressions.\n\nsub(\"little\", \"big\", \"Mary has a little lamb.\") \n\n[1] \"Mary has a big lamb.\"",
    "crumbs": [
      "M10 Basic R",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>NB: Getting Started</span>"
    ]
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#r-data-structures",
    "href": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#r-data-structures",
    "title": "NB: Getting Started",
    "section": "R Data Structures",
    "text": "R Data Structures\nBasic R comes with several data structures:\n\nVector\nMatrix\nArray\nList\nData frame\n\nA vector is what is called an array in many other programming languages\n\nA collection of cells with a fixed size where all cells hold the same data type (integers or characters or reals or whatever).\n\nA matrix is a two-dimensional vector (fixed size, all cell types the same).\nAn array is a vector with one or more dimensions.\n\nSo, an array with one dimension is (almost) the same as a vector.\nAn array with two dimensions is (almost) the same as a matrix.\nAn array with three or more dimensions is an n-dimensional array.\n\nA list can hold items of different types and the list size can be increased on the fly.\n\nList contents can be accessed either by index (like mylist[[1]]) or by name (like mylist$age).\nLists are like lists in Python.\n\nA data frame is called a table in many languages.\n\nThis is the workhorse of R.\nEach column holds the same type, and the columns can have header names.\nA data frame is essential a kind of a list — a list of vectors each with the same length, but of varying data types.\n\nThe two most frequently used are Vector and Data frame.\nSo, we will look at vectors and data frames.\nWe will also look at lists since they are used internally to construct data frames.\n\nVectors and c()\nA vector is a sequence of data elements of the same basic type.\nMembers in a vector are officially called components, but many call them members.\nVectors may be created with the c() function (“c” stands for combine).\n\nThis is like [] in Python.\n\nHere is a vector of three numeric values 2, 3 and 5.\n\nc(2, 3, 5) \n\n[1] 2 3 5\n\n\nAnd here is a vector of logical values.\n\nc(TRUE, FALSE, TRUE, FALSE, FALSE) \n\n[1]  TRUE FALSE  TRUE FALSE FALSE\n\n\nA vector can contain character strings.\n\nc(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \n\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\n\nVectors from sequences using :, seq(), and rep()\nVectors can be made out of sequences which may be generated in a few ways.\n\ns1 &lt;- 2:5\ns1\n\n[1] 2 3 4 5\n\n\nThe seq() function is like Python’s range().\n\ns2 &lt;- seq(from=1, to=5, by=2)\ns2\n\n[1] 1 3 5\n\n\nYou can drop the argument names and write seq(1,5,2).\nThe rep() function will create a series of repeated values:\n\ns3 &lt;- rep(1, 5)\ns3\n\n[1] 1 1 1 1 1\n\n\n\n\nlength()\nThe number of members in a vector is given by the length() function.\n\nlength(c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\")) \n\n[1] 5\n\n\n\n\nCombining Vectors with c()\nVectors can be combined via the function c().\n\nn &lt;- c(2, 3, 5) \ns &lt;- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \n c(n, s) \n\n[1] \"2\"  \"3\"  \"5\"  \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\n\n\nValue Coercion\nNotice how the numeric values are being coerced into character strings when the two vectors are combined.\nThis is necessary so as to maintain the same primitive data type for members in the same vector.\n\n\nVector Math\nArithmetic operations of vectors are performed member-by-member, i.e., member-wise.\nWe called this ‘element-wise’ in the context of NumPy.\nFor example, suppose we have two vectors a and b.\n\na &lt;- c(1, 3, 5, 7) \nb &lt;- c(1, 2, 4, 8)\n\nIf we multiply a by 5, we would get a vector with each of its members multiplied by 5.\n\n5 * a \n\n[1]  5 15 25 35\n\n\nAnd if we add a and b together, the sum would be a vector whose members are the sum of the corresponding members from a and b.\n\na + b\n\n[1]  2  5  9 15\n\n\nSimilarly for subtraction, multiplication and division, we get new vectors via member-wise operations.\n\na - b \n\n[1]  0  1  1 -1\n\n\n\na * b \n\n[1]  1  6 20 56\n\n\n\na / b \n\n[1] 1.000 1.500 1.250 0.875\n\n\n\n\nThe Recycling Rule\nIf two vectors are of unequal length, the shorter one will be recycled in order to match the longer vector.\nThis is similar to broadcasting in NumPy and Pandas.\nFor example, the following vectors u and v have different lengths, and their sum is computed by recycling values of the shorter vector u.\n\nu &lt;- c(10, 20, 30) \nv &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9) \nu + v \n\n[1] 11 22 33 14 25 36 17 28 39\n\n\n\n\nVector Indexes\nWe retrieve values in a vector by declaring an index inside a single square bracket index [] operator.\nVector indexes are 1-based.\n\ns &lt;- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \ns[3] \n\n[1] \"cc\"\n\n\n\n\nNegative Indexing\nUnlike Python, if the index is negative, it will remove the member whose position has the same absolute value as the negative index.\nIt really does mean subtraction!\nFor example, the following creates a vector slice with the third member removed.\n\ns[-3] \n\n[1] \"aa\" \"bb\" \"dd\" \"ee\"\n\n\n\n\nOut-of-Range Indexes\nValues for out-of-range indexes are reported as NA.\n\ns[10] \n\n[1] NA\n\n\n\n\nNumeric Index Vectors\nA new vector can be sliced from a given vector with a numeric vector passed to the indexing operator.\nIndex vectors consist of member positions of the original vector to be retrieved.\nHere we see how to retrieve a vector slice containing the second and third members of a given vector s.\n\ns &lt;- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \ns[c(2, 3)] \n\n[1] \"bb\" \"cc\"\n\n\n\n\nDuplicate Indexes\nThe index vector allows duplicate values. Hence the following retrieves a member twice in one operation.\n\ns[c(2, 3, 3)] \n\n[1] \"bb\" \"cc\" \"cc\"\n\n\n\n\nOut-of-Order Indexes\nThe index vector can even be out-of-order. Here is a vector slice with the order of first and second members reversed.\n\ns[c(2, 1, 3)] \n\n[1] \"bb\" \"aa\" \"cc\"\n\n\n\n\nRange Index\nTo produce a vector slice between two indexes, we can use the colon operator “:”. This can be convenient for situations involving large vectors.\n\ns[2:4] \n\n[1] \"bb\" \"cc\" \"dd\"\n\n\n\n\nLogical Index Vectors\nA new vector can be sliced from a given vector with a logical index vector.\nThe logical vector must the same length as the original vector.\nIts members are TRUE if the corresponding members in the original vector are to be included in the slice, and FALSE if otherwise.\n\nThis is what we called boolean indexing and masking in Python.\n\nFor example, consider the following vector s of length 5.\n\ns &lt;- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\")\n\nTo retrieve the the second and fourth members of s, we define a logical vector L of the same length, and have its second and fourth members set as TRUE.\n\nL = c(FALSE, TRUE, FALSE, TRUE, FALSE)\ns[L] \n\n[1] \"bb\" \"dd\"\n\n\nThe code can be abbreviated into a single line.\n\ns[c(FALSE, TRUE, FALSE, TRUE, FALSE)]\n\n[1] \"bb\" \"dd\"\n\n\n\n\nNaming Vector Members with names()\nWe can assign names to vector members, too.\n\nv &lt;- c(\"Mary\", \"Sue\") \nnames(v) &lt;- c(\"First\", \"Last\") \nv \n\n First   Last \n\"Mary\"  \"Sue\" \n\n\nNow we can retrieve the first member by name, much like a Python dictionary.\n\nv[\"First\"] \n\n First \n\"Mary\" \n\n\nWe can also reverse the order with a character string index vector.\n\nv[c(\"Last\", \"First\")] \n\n  Last  First \n \"Sue\" \"Mary\" \n\n\n\n\n\nLists\nA list is a generic vector containing other objects.\nThis is close to a Python list.\nThe following variable x is a list containing copies of three vectors n, s, b, and a numeric value \\(3\\).\n\nn &lt;- c(2, 3, 5) \ns &lt;- c(\"aa\", \"bb\", \"cc\", \"dd\", \"ee\") \nb &lt;- c(TRUE, FALSE, TRUE, FALSE, FALSE) \n\nx &lt;- list(n, s, b, 3)   # x contains copies of n, s, b\nx\n\n[[1]]\n[1] 2 3 5\n\n[[2]]\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n[[3]]\n[1]  TRUE FALSE  TRUE FALSE FALSE\n\n[[4]]\n[1] 3\n\n\nNote that odd bracket notation.\nIt indicates that each list member contains a vector, even if the length of the vector is \\(1.\\)\n\nList Slicing\nWe retrieve a list slice with the single square bracket [] operator.\nThe following is a slice containing the second member of x, which is a copy of s.\n\nx[2] \n\n[[1]]\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\nWith a vector, we can retrieve a slice with multiple members.\nHere a slice containing the second and fourth members of x.\n\nx[c(2, 4)] \n\n[[1]]\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n[[2]]\n[1] 3\n\n\n\n\nMember Reference with [[]]\nTo reference a list member directly, we use the double square bracket [[]] operator.\nThe following object x[[2]] is the second member of x.\nIn other words, x[[2]] is a true copy of s, not a slice containing s or its copy.\n\nx[2]\n\n[[1]]\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\n\nx[[2]]\n\n[1] \"aa\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\nWe can modify its content directly.\n\nx[[2]][1] = \"ta\" \nx[[2]] \n\n[1] \"ta\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n\nAnd s is unaffected.\n\nx \n\n[[1]]\n[1] 2 3 5\n\n[[2]]\n[1] \"ta\" \"bb\" \"cc\" \"dd\" \"ee\"\n\n[[3]]\n[1]  TRUE FALSE  TRUE FALSE FALSE\n\n[[4]]\n[1] 3\n\n\n\n\n\nData Frames\nA data frame is used for storing data tables.\nIt is essentially a list of vectors of equal length.\nFor example, the following variable df is a data frame containing three vectors n, s, b.\n\nn &lt;- c(2, 3, 5) \ns &lt;- c(\"aa\", \"bb\", \"cc\") \nb &lt;- c(TRUE, FALSE, TRUE) \ndf &lt;- data.frame(n, s, b)\ndf\n\n  n  s     b\n1 2 aa  TRUE\n2 3 bb FALSE\n3 5 cc  TRUE\n\n\nNotice that data frames are built column-wise.\nWhen displayed, the top line of the data frame is the header; it contains the column names.\nThe data type is listed below the column name.\nEach horizontal line afterward denotes a data row, which may begin with the name of the row, and then followed by the actual data.\nEach data member of a row is called a cell.\n\nBuilt-in Data Frames\nHere is a built-in data frame in R, called mtcars.\nNote that it comes with R without having to import anything.\n\nmtcars \n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\nTo retrieve data in a cell, we enter its row and column coordinates in the single square bracket [ ] operator.\nThe two coordinates are separated by a comma, e.g. [row, col].\nHere is the cell value from the first row, second column of mtcars.\n\nmtcars[1, 2] \n\n[1] 6\n\n\nWe can use names instead of the numeric coordinates.\n\nmtcars[\"Mazda RX4\", \"cyl\"] \n\n[1] 6\n\n\nLastly, the number of data rows in the data frame is given by the nrow() function.\n\nnrow(mtcars)\n\n[1] 32\n\n\nAnd the number of columns of a data frame is given by the ncol() function.\n\nncol(mtcars)\n\n[1] 11\n\n\nWe get the shape of the data frame withdim(), which stands for ‘dimension’.\n\ndim(mtcars)\n\n[1] 32 11\n\n\nFurther details of the mtcars data set is available in the R documentation.\n\nhelp(mtcars)\n\n\n\nPreview with head()\nInstead of printing out the entire data frame, it is often desirable to preview it with the head function beforehand\n\nhead(mtcars) \n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\n\n\nData Frame Column Vectors\nWe reference a data frame column with the double square bracket [[]] operator, just as we do for lists.\nFor example, to retrieve the ninth column vector of the built-in data set mtcars, we write\n\nmtcars[[9]]\n\n [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1\n\n\nWe can retrieve the same column vector by its name\n\nmtcars[[\"am\"]] \n\n [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1\n\n\nWe can also retrieve with the $ operator in lieu of the double square bracket operator.\nThis is like using a dot in Pandas.\n\nmtcars$am\n\n [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1\n\n\nYet another way to retrieve the same column vector is to use the single square bracket [] operator.\nWe prepend the column name with a comma character, which signals a wildcard match for the row position\n\nmtcars[, \"am\"] \n\n [1] 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1\n\n\n\n\nData Frame Column Slice\nWe retrieve a data frame column slice with the single square bracket [ ] operator.\nNote: This is like a one-column dataframe in Pandas, as opposed to a Series.\n\nNumeric Indexing\nThe following is a slice containing the first column of the built-in data set mtcars\n\nmtcars[[1]]\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\nmtcars[1]\n\n                     mpg\nMazda RX4           21.0\nMazda RX4 Wag       21.0\nDatsun 710          22.8\nHornet 4 Drive      21.4\nHornet Sportabout   18.7\nValiant             18.1\nDuster 360          14.3\nMerc 240D           24.4\nMerc 230            22.8\nMerc 280            19.2\nMerc 280C           17.8\nMerc 450SE          16.4\nMerc 450SL          17.3\nMerc 450SLC         15.2\nCadillac Fleetwood  10.4\nLincoln Continental 10.4\nChrysler Imperial   14.7\nFiat 128            32.4\nHonda Civic         30.4\nToyota Corolla      33.9\nToyota Corona       21.5\nDodge Challenger    15.5\nAMC Javelin         15.2\nCamaro Z28          13.3\nPontiac Firebird    19.2\nFiat X1-9           27.3\nPorsche 914-2       26.0\nLotus Europa        30.4\nFord Pantera L      15.8\nFerrari Dino        19.7\nMaserati Bora       15.0\nVolvo 142E          21.4\n\n\n\n\nName Indexing\nWe can retrieve the same column slice by its name\n\nmtcars[\"mpg\"] \n\n                     mpg\nMazda RX4           21.0\nMazda RX4 Wag       21.0\nDatsun 710          22.8\nHornet 4 Drive      21.4\nHornet Sportabout   18.7\nValiant             18.1\nDuster 360          14.3\nMerc 240D           24.4\nMerc 230            22.8\nMerc 280            19.2\nMerc 280C           17.8\nMerc 450SE          16.4\nMerc 450SL          17.3\nMerc 450SLC         15.2\nCadillac Fleetwood  10.4\nLincoln Continental 10.4\nChrysler Imperial   14.7\nFiat 128            32.4\nHonda Civic         30.4\nToyota Corolla      33.9\nToyota Corona       21.5\nDodge Challenger    15.5\nAMC Javelin         15.2\nCamaro Z28          13.3\nPontiac Firebird    19.2\nFiat X1-9           27.3\nPorsche 914-2       26.0\nLotus Europa        30.4\nFord Pantera L      15.8\nFerrari Dino        19.7\nMaserati Bora       15.0\nVolvo 142E          21.4\n\n\nCompare to accessing the column vector data directly:\n\nmtcars[[\"mpg\"]]\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\n\nTo retrieve a data frame slice with the two columns mpg and hp, we put the column names into a vector inside the single square bracket operator:\n\nmtcars[c(\"mpg\", \"hp\")] \n\n                     mpg  hp\nMazda RX4           21.0 110\nMazda RX4 Wag       21.0 110\nDatsun 710          22.8  93\nHornet 4 Drive      21.4 110\nHornet Sportabout   18.7 175\nValiant             18.1 105\nDuster 360          14.3 245\nMerc 240D           24.4  62\nMerc 230            22.8  95\nMerc 280            19.2 123\nMerc 280C           17.8 123\nMerc 450SE          16.4 180\nMerc 450SL          17.3 180\nMerc 450SLC         15.2 180\nCadillac Fleetwood  10.4 205\nLincoln Continental 10.4 215\nChrysler Imperial   14.7 230\nFiat 128            32.4  66\nHonda Civic         30.4  52\nToyota Corolla      33.9  65\nToyota Corona       21.5  97\nDodge Challenger    15.5 150\nAMC Javelin         15.2 150\nCamaro Z28          13.3 245\nPontiac Firebird    19.2 175\nFiat X1-9           27.3  66\nPorsche 914-2       26.0  91\nLotus Europa        30.4 113\nFord Pantera L      15.8 264\nFerrari Dino        19.7 175\nMaserati Bora       15.0 335\nVolvo 142E          21.4 109\n\n\n\n\n\nData Frame Row Slice\nWe retrieve rows from a data frame with the single square bracket operator, just like what we did with columns. However, in additional to an index vector of row positions, we append an extra comma character. This is important, as the extra comma signals a wildcard match for the second coordinate for column positions.\n\nNumeric Indexing\nFor example, the following retrieves a row record of the built-in data set mtcars. Please notice the extra comma in the square bracket operator, and it is not a typo. It states that the 1974 Camaro Z28 has a gas mileage of \\(13.3\\) miles per gallon, and an eight cylinder \\(245\\) horse power engine, …, etc\n\nmtcars[24,] \n\n            mpg cyl disp  hp drat   wt  qsec vs am gear carb\nCamaro Z28 13.3   8  350 245 3.73 3.84 15.41  0  0    3    4\n\n\nTo retrieve more than one rows, we use a numeric index vector\n\nmtcars[c(3, 24),] \n\n            mpg cyl disp  hp drat   wt  qsec vs am gear carb\nDatsun 710 22.8   4  108  93 3.85 2.32 18.61  1  1    4    1\nCamaro Z28 13.3   8  350 245 3.73 3.84 15.41  0  0    3    4\n\n\n\n\nName Indexing\nWe can retrieve a row by its name.\n\nmtcars[\"Camaro Z28\",] \n\n            mpg cyl disp  hp drat   wt  qsec vs am gear carb\nCamaro Z28 13.3   8  350 245 3.73 3.84 15.41  0  0    3    4\n\n\nAnd we can pack the row names in an index vector in order to retrieve multiple rows.\n\nmtcars[c(\"Datsun 710\", \"Camaro Z28\"),] \n\n            mpg cyl disp  hp drat   wt  qsec vs am gear carb\nDatsun 710 22.8   4  108  93 3.85 2.32 18.61  1  1    4    1\nCamaro Z28 13.3   8  350 245 3.73 3.84 15.41  0  0    3    4\n\n\n\n\nLogical Indexing\nLastly, we can retrieve rows with a logical index vector. In the following vector L, the member value is TRUE if the car has automatic transmission, and FALSE if otherwise.\n\nL &lt;- mtcars$am == 1 \nL \n\n [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n[25] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n\n\nHere is the list of vehicles with automatic transmission\n\nmtcars[L,] \n\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora  15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\nAnd here is the gas mileage data for automatic transmission\n\nmtcars[L,]$mpg \n\n [1] 21.0 21.0 22.8 32.4 30.4 33.9 27.3 26.0 30.4 15.8 19.7 15.0 21.4\n\n\n\n\nChange the name of a column\n\nnames(df)[names(df) == 'old.var.name'] &lt;- 'new.var.name'\n\n\n\n\nImporting Data\nIt is often necessary to import sample textbook data into R before you start working on your homework.\nExcel Files\nQuite frequently, the sample data is in Excel format, and needs to be imported into R prior to use. For this, we can use the function read.xls from the gdata package. It reads from an Excel spreadsheet and returns a data frame. The following shows how to load an Excel spreadsheet named “mydata.xls”. This method requires Perl runtime to be present in the system\n\n##library(gdata)                   # load gdata package \n##help(read.xls)                   # documentation \n##mydata &lt;- read.xls(\"mydata.xls\")  # read from first sheet\n\nAlternatively, we can use the function loadWorkbook from the XLConnect package to read the entire workbook, and then load the worksheets with readWorksheet. The XLConnect package requires Java to be pre-installed\n\n##library(XLConnect)               # load XLConnect package \n##wk &lt;- loadWorkbook(\"mydata.xls\") \n##df &lt;- readWorksheet(wk, sheet=\"Sheet1\")\n\nTable Files\nA data table can reside in a text file.\nThe cells inside the table are separated by blank characters.\nHere is an example of a table with 4 rows and 3 columns.\n100 a1 b1 \n200 a2 b2 \n300 a3 b3 \n400 a4 b4\nNow copy and paste the table above in a file named “mydata.txt” with a text editor.\nThen load the data into the workspace with the function read.table\n\nmydata &lt;- read.table(\"mydata.txt\")  # read text file \n\nWarning in read.table(\"mydata.txt\"): incomplete final line found by\nreadTableHeader on 'mydata.txt'\n\nmydata                             # print data frame \n\n   V1 V2 V3\n1 100 a1 b1\n2 200 a2 b2\n3 300 a3 b3\n4 400 a4 b4\n\n\nCSV Files\nThe sample data can also be in comma separated values (CSV) format. Each cell inside such data file is separated by a special character, which usually is a comma, although other characters can be used as well.\nThe first row of the data file should contain the column names instead of the actual data. Here is a sample of the expected format.\nCol1,Col2,Col3 \n100,a1,b1 \n200,a2,b2 \n300,a3,b3\nAfter we copy and paste the data above in a file named “mydata.csv” with a text editor, we can read the data with the function read.csv\n\nmydata &lt;- read.csv(\"mydata.csv\")  # read csv file \n\nWarning in read.table(file = file, header = header, sep = sep, quote = quote, :\nincomplete final line found by readTableHeader on 'mydata.csv'\n\nmydata \n\n  Col1 Col2 Col3\n1  100   a1  b1 \n2  200   a2  b2 \n3  300   a3   b3\n\n\nIn various European locales, as the comma character serves as the decimal point, the function read.csv2 should be used instead. For further detail of the read.csv and read.csv2 functions, please consult the R documentation\n\nhelp(read.csv)\n\n\n\nWorking Directory\nFinally, the code samples above assume the data files are located in the R working directory, which can be found with the function getwd().\nNote that these things can also be set using the RStudio’s GUI.\n\ngetwd()               # get current working directory\n\n[1] \"/Users/rca2t1/Dropbox/Courses/DS/DS5100/repo-book/notebooks/M10_RBasics\"\n\n\nYou can select a different working directory with the function setwd(), and thus avoid entering the full path of the data files\n\n## setwd(\"&lt;new path&gt;\")   # set working directory\n\nNote that the forward slash should be used as the path separator even on Windows platform\n\n## setwd(\"C:/MyDoc\")",
    "crumbs": [
      "M10 Basic R",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>NB: Getting Started</span>"
    ]
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#extra",
    "href": "notebooks/M10_RBasics/M10-01-DataTypesAndStructures.html#extra",
    "title": "NB: Getting Started",
    "section": "Extra",
    "text": "Extra\n\nPlots with plot()\nR is know for its high-quality visualizations, and we’ll explore at these in more detail when we look at GGPlot.\nFor now, consider the plot() function.\nLet’s plot the data from the built in data frame airquality.\n\nairquality\n\n    Ozone Solar.R Wind Temp Month Day\n1      41     190  7.4   67     5   1\n2      36     118  8.0   72     5   2\n3      12     149 12.6   74     5   3\n4      18     313 11.5   62     5   4\n5      NA      NA 14.3   56     5   5\n6      28      NA 14.9   66     5   6\n7      23     299  8.6   65     5   7\n8      19      99 13.8   59     5   8\n9       8      19 20.1   61     5   9\n10     NA     194  8.6   69     5  10\n11      7      NA  6.9   74     5  11\n12     16     256  9.7   69     5  12\n13     11     290  9.2   66     5  13\n14     14     274 10.9   68     5  14\n15     18      65 13.2   58     5  15\n16     14     334 11.5   64     5  16\n17     34     307 12.0   66     5  17\n18      6      78 18.4   57     5  18\n19     30     322 11.5   68     5  19\n20     11      44  9.7   62     5  20\n21      1       8  9.7   59     5  21\n22     11     320 16.6   73     5  22\n23      4      25  9.7   61     5  23\n24     32      92 12.0   61     5  24\n25     NA      66 16.6   57     5  25\n26     NA     266 14.9   58     5  26\n27     NA      NA  8.0   57     5  27\n28     23      13 12.0   67     5  28\n29     45     252 14.9   81     5  29\n30    115     223  5.7   79     5  30\n31     37     279  7.4   76     5  31\n32     NA     286  8.6   78     6   1\n33     NA     287  9.7   74     6   2\n34     NA     242 16.1   67     6   3\n35     NA     186  9.2   84     6   4\n36     NA     220  8.6   85     6   5\n37     NA     264 14.3   79     6   6\n38     29     127  9.7   82     6   7\n39     NA     273  6.9   87     6   8\n40     71     291 13.8   90     6   9\n41     39     323 11.5   87     6  10\n42     NA     259 10.9   93     6  11\n43     NA     250  9.2   92     6  12\n44     23     148  8.0   82     6  13\n45     NA     332 13.8   80     6  14\n46     NA     322 11.5   79     6  15\n47     21     191 14.9   77     6  16\n48     37     284 20.7   72     6  17\n49     20      37  9.2   65     6  18\n50     12     120 11.5   73     6  19\n51     13     137 10.3   76     6  20\n52     NA     150  6.3   77     6  21\n53     NA      59  1.7   76     6  22\n54     NA      91  4.6   76     6  23\n55     NA     250  6.3   76     6  24\n56     NA     135  8.0   75     6  25\n57     NA     127  8.0   78     6  26\n58     NA      47 10.3   73     6  27\n59     NA      98 11.5   80     6  28\n60     NA      31 14.9   77     6  29\n61     NA     138  8.0   83     6  30\n62    135     269  4.1   84     7   1\n63     49     248  9.2   85     7   2\n64     32     236  9.2   81     7   3\n65     NA     101 10.9   84     7   4\n66     64     175  4.6   83     7   5\n67     40     314 10.9   83     7   6\n68     77     276  5.1   88     7   7\n69     97     267  6.3   92     7   8\n70     97     272  5.7   92     7   9\n71     85     175  7.4   89     7  10\n72     NA     139  8.6   82     7  11\n73     10     264 14.3   73     7  12\n74     27     175 14.9   81     7  13\n75     NA     291 14.9   91     7  14\n76      7      48 14.3   80     7  15\n77     48     260  6.9   81     7  16\n78     35     274 10.3   82     7  17\n79     61     285  6.3   84     7  18\n80     79     187  5.1   87     7  19\n81     63     220 11.5   85     7  20\n82     16       7  6.9   74     7  21\n83     NA     258  9.7   81     7  22\n84     NA     295 11.5   82     7  23\n85     80     294  8.6   86     7  24\n86    108     223  8.0   85     7  25\n87     20      81  8.6   82     7  26\n88     52      82 12.0   86     7  27\n89     82     213  7.4   88     7  28\n90     50     275  7.4   86     7  29\n91     64     253  7.4   83     7  30\n92     59     254  9.2   81     7  31\n93     39      83  6.9   81     8   1\n94      9      24 13.8   81     8   2\n95     16      77  7.4   82     8   3\n96     78      NA  6.9   86     8   4\n97     35      NA  7.4   85     8   5\n98     66      NA  4.6   87     8   6\n99    122     255  4.0   89     8   7\n100    89     229 10.3   90     8   8\n101   110     207  8.0   90     8   9\n102    NA     222  8.6   92     8  10\n103    NA     137 11.5   86     8  11\n104    44     192 11.5   86     8  12\n105    28     273 11.5   82     8  13\n106    65     157  9.7   80     8  14\n107    NA      64 11.5   79     8  15\n108    22      71 10.3   77     8  16\n109    59      51  6.3   79     8  17\n110    23     115  7.4   76     8  18\n111    31     244 10.9   78     8  19\n112    44     190 10.3   78     8  20\n113    21     259 15.5   77     8  21\n114     9      36 14.3   72     8  22\n115    NA     255 12.6   75     8  23\n116    45     212  9.7   79     8  24\n117   168     238  3.4   81     8  25\n118    73     215  8.0   86     8  26\n119    NA     153  5.7   88     8  27\n120    76     203  9.7   97     8  28\n121   118     225  2.3   94     8  29\n122    84     237  6.3   96     8  30\n123    85     188  6.3   94     8  31\n124    96     167  6.9   91     9   1\n125    78     197  5.1   92     9   2\n126    73     183  2.8   93     9   3\n127    91     189  4.6   93     9   4\n128    47      95  7.4   87     9   5\n129    32      92 15.5   84     9   6\n130    20     252 10.9   80     9   7\n131    23     220 10.3   78     9   8\n132    21     230 10.9   75     9   9\n133    24     259  9.7   73     9  10\n134    44     236 14.9   81     9  11\n135    21     259 15.5   76     9  12\n136    28     238  6.3   77     9  13\n137     9      24 10.9   71     9  14\n138    13     112 11.5   71     9  15\n139    46     237  6.9   78     9  16\n140    18     224 13.8   67     9  17\n141    13      27 10.3   76     9  18\n142    24     238 10.3   68     9  19\n143    16     201  8.0   82     9  20\n144    13     238 12.6   64     9  21\n145    23      14  9.2   71     9  22\n146    36     139 10.3   81     9  23\n147     7      49 10.3   69     9  24\n148    14      20 16.6   63     9  25\n149    30     193  6.9   70     9  26\n150    NA     145 13.2   77     9  27\n151    14     191 14.3   75     9  28\n152    18     131  8.0   76     9  29\n153    20     223 11.5   68     9  30\n\n\n\nplot(airquality)\n\n\n\n\n\n\n\n\n\nplot(airquality[, c(\"Temp\", \"Wind\")])\n\n\n\n\n\n\n\n\n\nplot(airquality$Temp, type='l')\n\n\n\n\n\n\n\n\n\n?plot\n\nHelp on topic 'plot' was found in the following packages:\n\n  Package               Library\n  graphics              /Library/Frameworks/R.framework/Versions/4.0/Resources/library\n  base                  /Library/Frameworks/R.framework/Resources/library\n\n\nUsing the first match ...\n\n\n\n\nValue Counts with table()\nThis function is like .value_counts() in Pandas. It does a quick count of all the value types of a feature or combination of them.\nHere we get a table of values and their counts for airquality$Temp, convert this into a data frame, and then plot the results.\n\ntemps &lt;- table(airquality$Temp)\ntemps\n\n\n56 57 58 59 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 \n 1  3  2  2  3  2  1  2  2  3  4  4  3  1  3  3  5  4  4  9  7  6  6  5 11  9 \n83 84 85 86 87 88 89 90 91 92 93 94 96 97 \n 4  5  5  7  5  3  2  3  2  5  3  2  1  1 \n\n\n\ntemps.df &lt;- data.frame(temps)\ntemps.df\n\n   Var1 Freq\n1    56    1\n2    57    3\n3    58    2\n4    59    2\n5    61    3\n6    62    2\n7    63    1\n8    64    2\n9    65    2\n10   66    3\n11   67    4\n12   68    4\n13   69    3\n14   70    1\n15   71    3\n16   72    3\n17   73    5\n18   74    4\n19   75    4\n20   76    9\n21   77    7\n22   78    6\n23   79    6\n24   80    5\n25   81   11\n26   82    9\n27   83    4\n28   84    5\n29   85    5\n30   86    7\n31   87    5\n32   88    3\n33   89    2\n34   90    3\n35   91    2\n36   92    5\n37   93    3\n38   94    2\n39   96    1\n40   97    1\n\n\n\nplot(temps.df, xlab=\"Temp\", type=\"b\")\n\n\n\n\n\n\n\n\n\n\nInstalling and Loading Packages\nPackages need to be installed once.\n\n## install.packages(\"tm\")  \n\nYou can also install thing using the Package window.\nOnce they are installed, you import them with the library() function:\n\nlibrary(tm)\n\nLoading required package: NLP\n\n\nNote that the library name is quoted in when installing, but not when using library.",
    "crumbs": [
      "M10 Basic R",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>NB: Getting Started</span>"
    ]
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html",
    "title": "NB: Control Structures and Functions",
    "section": "",
    "text": "if/else Statements\nYou’ve seen this in Python.\nThey work the same way in both languages.\nHere’s their syntax in R.\nGenerate a uniform random number:\nx &lt;- runif(1, 0, 10) # From the Uniform Distribution\n\nif(x &gt; 3) {\n  y &lt;- 10\n} else {\n  y &lt;- 0\n}\n\nx\n\n[1] 8.316552\n\ny\n\n[1] 10\nYou assign an if statement to a variable.\nz &lt;- if(x &gt; 3) {\n  10\n} else { \n  0\n}\n\nz\n\n[1] 10\nYou can stack if blocks, too.",
    "crumbs": [
      "M10 Basic R",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>NB: Control Structures and Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#ifelse-statements",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#ifelse-statements",
    "title": "NB: Control Structures and Functions",
    "section": "",
    "text": "if(&lt;condition&gt;) {\n        ## do something\n} \n\nif(&lt;condition&gt;) {\n        ## do something\n} \nelse {\n        ## do something else\n}\n\nif(&lt;condition1&gt;) {\n        ## do something\n} else if(&lt;condition2&gt;)  {\n        ## do something different\n} else {\n        ## do something different\n}\n\n\n\n\n\nif(&lt;condition1&gt;) {\n\n}\n\nif(&lt;condition2&gt;) {\n\n}",
    "crumbs": [
      "M10 Basic R",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>NB: Control Structures and Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#control-structures",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#control-structures",
    "title": "NB: Control Structures and Functions",
    "section": "Control Structures",
    "text": "Control Structures\n\nfor Loops\nFor loops are straight-forward. The take an interator variable, e.g. i, and assign it successive values from a sequence or vector.\nFor loops are often used to iteratE over the elements of an object (list, vector, etc.).\n\nfor(i in 1:10) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n\n\nAccording to Hadley Wickham, loops are pretty much the only looping construct that you will need in R.\nThe following three loops all have the same behavior.\n\nx &lt;- c(\"a\", \"b\", \"c\", \"d\")\nfor (i in 1:4) {\n  # Print out each element of 'x'\n  print(x[i])  \n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n\n\n\n\nseq_along()\nThe seq_along() function is commonly used in conjunction with for loops in order to generate an integer sequence based on the length of an object (in this case, the object x).\n\nx\n\n[1] \"a\" \"b\" \"c\" \"d\"\n\n\nGenerate a sequence based on length of ‘x’:\n\nfor(i in seq_along(x)) {   \n  print(x[i])\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n\n\nIt is not necessary to use an index-type variable.\n\nfor(letter in x) {\n  print(letter)\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n\n\nFor one line loops, the curly braces are not strictly necessary.\n\nfor(i in 1:4) print(x[i])\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n\n\n\n\nNested for loops\nDor loops can be nested inside of each other.\n\nx &lt;- matrix(1:6, 2, 3)\nfor(i in seq_len(nrow(x))) {\n  for(j in seq_len(ncol(x))) {\n    print(x[i, j])\n  }   \n}\n\n[1] 1\n[1] 3\n[1] 5\n[1] 2\n[1] 4\n[1] 6\n\n\nNested loops are used to generate multidimensional or hierarchical data structures (e.g. matrices, lists).",
    "crumbs": [
      "M10 Basic R",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>NB: Control Structures and Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#while-loops",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#while-loops",
    "title": "NB: Control Structures and Functions",
    "section": "while Loops",
    "text": "while Loops\nAs with Python, while loops start with a condition. It loops while the condition is true and stops when it is false.\nRemembe, while loops can go on forever is the truth condition is never met.\n\ncount &lt;- 0\nwhile(count &lt; 10) {\n  print(count)\n  count &lt;- count + 1\n}\n\n[1] 0\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9",
    "crumbs": [
      "M10 Basic R",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>NB: Control Structures and Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#repeat-loops",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#repeat-loops",
    "title": "NB: Control Structures and Functions",
    "section": "repeat Loops",
    "text": "repeat Loops\nrepeat loops are using by R. They initiate an infinite loop right from the start.\nThe only way to exit a repeat loop is to call break on an internal condition.",
    "crumbs": [
      "M10 Basic R",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>NB: Control Structures and Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#next-and-break",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#next-and-break",
    "title": "NB: Control Structures and Functions",
    "section": "next and break",
    "text": "next and break\nnext is used to skip an iteration of a loop. Same as Python continue.\n\nfor (i in 1:100) {\n  if (i &lt;= 20) {\n    # Skip the first 20 iterations\n    next                \n  }      # Do something here\n}\n\nbreak is used to exit a loop immediately.\n\nfor (i in 1:100) {\n  print(i)\n  if (i &gt; 20) {\n    # Stop loop after 20 iterations\n    break  \n  }     \n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n[1] 11\n[1] 12\n[1] 13\n[1] 14\n[1] 15\n[1] 16\n[1] 17\n[1] 18\n[1] 19\n[1] 20\n[1] 21",
    "crumbs": [
      "M10 Basic R",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>NB: Control Structures and Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#functions",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#functions",
    "title": "NB: Control Structures and Functions",
    "section": "Functions",
    "text": "Functions\nDefine some data\n\nx &lt;- 5                \nxx &lt;- c(4, 6, 7, 8, 2, 11)\n\nNow, define a function that does the following: - takes a value, vector of values as inputs - normalizes the value against the vector by subtracting the vector mean from value, and dividing by vector standard deviation.\n\ncompute_zscore &lt;- function(val, vec) {\n  z &lt;- (val - mean(vec)) / sd(vec)\n}\n\nprint(compute_zscore(x, xx))\n\n[1] -0.4244764\n\n\nIf vector contains identical values, sd is zero, and so the z-score is undefined.\n\nprint(compute_zscore(x, c(1, 1, 1, 1)))\n\n[1] Inf\n\n\nIf vector contains missing values, the result will be NA.\n\nxx_na &lt;- c(1, NA, 3, 5) \nprint(compute_zscore(x, xx_na))\n\n[1] NA",
    "crumbs": [
      "M10 Basic R",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>NB: Control Structures and Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#using-conditions-in-functions",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#using-conditions-in-functions",
    "title": "NB: Control Structures and Functions",
    "section": "Using conditions in functions",
    "text": "Using conditions in functions\nA function returns 1 if passed value is odd, 0 if even",
    "crumbs": [
      "M10 Basic R",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>NB: Control Structures and Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#is-mod-operator-returns-remainder",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#is-mod-operator-returns-remainder",
    "title": "NB: Control Structures and Functions",
    "section": "%% is mod operator (returns remainder)",
    "text": "%% is mod operator (returns remainder)\n\nis_odd &lt;- function(x){ if (x %% 2 == 1) { \n    return(1) \n  } else { \n    return(0)\n  } \n}\n\nCall to test some cases:\n\nis_odd(4)\n\n[1] 0\n\nis_odd(3)\n\n[1] 1\n\n\nFunction arguments can use default values:\n\nthreshold_vals &lt;- function(p, thresh = 0.5) {\n  # for each element in p, returns TRUE if value &gt; thresh, else FALSE\n  p &gt; thresh\n}\n\n\nthreshold_vals(c(0.6, 0.4, 0.1, 1))\n\n[1]  TRUE FALSE FALSE  TRUE\n\n\nNow, pass a threshhold:\n\nthreshold_vals(c(0.6, 0.4, 0.1, 1), 0.7)\n\n[1] FALSE FALSE FALSE  TRUE\n\n\nAssert important preconditions\n\nadd_vectors &lt;- function(x, y) {\n  # assert the lengths of vectors x and y match\n  # if they do, sum elementwise, else throw error with stop()\n\n  if (length(x) != length(y)) {\n    stop(\"x and y must be the same length\", call. = FALSE)\n  }\n  x + y\n}\n\n\nadd_vectors(c(1, 2, 3), c(3, 3, 3))\n\n[1] 4 5 6\n\n\n\nadd_vectors(c(1, 2, 3), c(3, 3, 3, 3)) # breaks",
    "crumbs": [
      "M10 Basic R",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>NB: Control Structures and Functions</span>"
    ]
  },
  {
    "objectID": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#scoping-rules",
    "href": "notebooks/M10_RBasics/M10-02-ControlStructuresAndFunctions.html#scoping-rules",
    "title": "NB: Control Structures and Functions",
    "section": "Scoping Rules",
    "text": "Scoping Rules\n\nz &lt;- 4\ntest_fcn &lt;- function(x) {\n  x^z\n}\n\nNow look at this:\n\ntest_fcn(2)\n\n[1] 16\n\n\nIf z isn’t defined in the function, how does this work?\nR’s scoping rules are similar to Python’s.\nSince z isn’t in the function, R looks in the function’s environment for it.\nFor more on scoping rules, see Chapter 15: Scoping Rules of R in Peng’s R Programming For Data Science.",
    "crumbs": [
      "M10 Basic R",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>NB: Control Structures and Functions</span>"
    ]
  },
  {
    "objectID": "modules/m11/m11-intro.html",
    "href": "modules/m11/m11-intro.html",
    "title": "M11 Dplyr",
    "section": "",
    "text": "Topics",
    "crumbs": [
      "M11 Dplyr"
    ]
  },
  {
    "objectID": "modules/m11/m11-intro.html#topics",
    "href": "modules/m11/m11-intro.html#topics",
    "title": "M11 Dplyr",
    "section": "",
    "text": "The Tidyverse\nTibbles, a lightweight version of data frames\nData transformations using dplyr verbs",
    "crumbs": [
      "M11 Dplyr"
    ]
  },
  {
    "objectID": "modules/m11/m11-intro.html#readings",
    "href": "modules/m11/m11-intro.html#readings",
    "title": "M11 Dplyr",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\nRFDS Explore 5 Data Transformation\n\n(dplyr)\n\nRDFS Wrangle 10 Tibbles\nRDFS Wrangle 11 Data Import\nRDFS Wrangle 12 Tidy data\n\n\n\nOptional\n\nPeng, 2022, “Managing Data Frames with the dplyr package”",
    "crumbs": [
      "M11 Dplyr"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html",
    "title": "NB: Introducing Tibbles",
    "section": "",
    "text": "The Tidyverse\nTidyverse is a collection of essential R packages for data science.\nThe packages included in the Tidyverse are designed to support the pipeline of activities associated with data science, such as filtering, transforming, visualizing, etc.\nTidyverse was created by Hadley Wickham and his team with the aim of providing all these utilities to clean and work with data.\nHere’s a graphic of the packages associated with the Tidyverse:",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>NB: Introducing Tibbles</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#dplyr",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#dplyr",
    "title": "NB: Introducing Tibbles",
    "section": "Dplyr",
    "text": "Dplyr\nDplyr introduces a new set of functions that make working with data more intuitive.\n\nIt does this by introducing a set of functions that work together well to produce pipelines of actions.\n\nBut as important, it introduces a vocabulary for talking about data.\n\nThis makes it possible to imagine solutions verbally, and then to implement them in code.\n\nTo use the Tidyverse, we often import everything:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.1\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>NB: Introducing Tibbles</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#piping-with",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#piping-with",
    "title": "NB: Introducing Tibbles",
    "section": "Piping with %>%",
    "text": "Piping with %&gt;%\nJust a quick note about this odd looking operator that you will start to see.\nOne of the key elements of the Tidyverse is the use of piping, or the ability of to pass the return values of one function to another, without having to nest functions.\nFor example, instead of something like this:\n\na &lt;- \"Hello\"\nb &lt;- \"World\"\n\nvar1 &lt;- c(a, b)\nvar2 &lt;- paste(var1)\nprint(var2)\n\n[1] \"Hello\" \"World\"\n\n\nOr this:\n\nprint(paste(c(a,b)))\n\n[1] \"Hello\" \"World\"\n\n\nWe can do:\n\nc(a, b) %&gt;%\n  paste() %&gt;%\n  print()\n\n[1] \"Hello\" \"World\"\n\n\nAlthough the last pattern is longer than the preceding, it is much easier to read and write, especially when we are working with several connected functions.\nThis is similar to method chaining in Python, but is more pervasive.\n\nIn Python you can do it with individual objects that return themselves (as it were).\nIn Tidyverse, you can apply it to any two functions so long as it makes sense to pass the output of one as the input of another.\nBasically, the output of one function becomes the first argument of the following the %&gt;%.\n\nIt is similar to the pipe operator | in Unix shells.\nBy the way, the operator comes with the magrittr package, which is a central part of the Tidyverse. It is so central, in fact, that packages in the tidyverse load %&gt;% automatically.\nIt provides a set of operators which make your code more readable.",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>NB: Introducing Tibbles</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#creating-tibbles",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#creating-tibbles",
    "title": "NB: Introducing Tibbles",
    "section": "Creating tibbles",
    "text": "Creating tibbles\nIf you need to make a tibble “by hand”, you can use tibble() or tribble() (see below).\ntibble() works by assembling individual vectors, a column-wise operation:\n\nx &lt;- c(1, 2, 5)\ny &lt;- c(\"a\", \"b\", \"h\")\ntibble(x, y)\n\n# A tibble: 3 × 2\n      x y    \n  &lt;dbl&gt; &lt;chr&gt;\n1     1 a    \n2     2 b    \n3     5 h    \n\n\nYou can also optionally name the inputs, provide data inline with c(), and perform computation:\n\ntibble(\n  x1 = x,\n  x2 = c(10, 15, 25),\n  y = sqrt(x1^2 + x2^2)\n)\n\n# A tibble: 3 × 3\n     x1    x2     y\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1    10  10.0\n2     2    15  15.1\n3     5    25  25.5\n\n\nEvery column in a data frame or tibble must be the same length. If they are not, you will get an error:\nAs the error suggests, individual values will be recycled to the same length as everything else:\n\ntibble(\n  x = 1:5,\n  y = \"a\",\n  z = TRUE\n)\n\n# A tibble: 5 × 3\n      x y     z    \n  &lt;int&gt; &lt;chr&gt; &lt;lgl&gt;\n1     1 a     TRUE \n2     2 a     TRUE \n3     3 a     TRUE \n4     4 a     TRUE \n5     5 a     TRUE",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>NB: Introducing Tibbles</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#tribbles",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#tribbles",
    "title": "NB: Introducing Tibbles",
    "section": "Tribbles",
    "text": "Tribbles\nAnother way to create a tibble is with tribble(), which short for transposed tibble.\ntribble() is customized for data entry in code: column headings start with ~ and entries are separated by commas.\nThis makes it possible to lay out small amounts of data in an easy to read form:\n\ntribble(\n  ~x, ~y, ~z,\n  \"a\", 2, 3.6,\n  \"b\", 1, 8.5\n)\n\n# A tibble: 2 × 3\n  x         y     z\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 a         2   3.6\n2 b         1   8.5\n\n\nFinally, if you have a regular data frame you can turn it into to a tibble with as_tibble():\n\nas_tibble(mtcars)\n\n# A tibble: 32 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n\n\nThe inverse of as_tibble() is as.data.frame(); it converts a tibble back into a regular data.frame.",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>NB: Introducing Tibbles</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#non-syntactic-names",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#non-syntactic-names",
    "title": "NB: Introducing Tibbles",
    "section": "Non-syntactic names",
    "text": "Non-syntactic names\nIt’s possible for a tibble to have column names that are not valid R variable names, names that are non-syntactic.\nFor example, the variables might not start with a letter or they might contain unusual characters like a space.\nTo refer to these variables, you need to surround them with backticks, `:\n\ntb &lt;- tibble(\n  `:)` = \"smile\", \n  ` ` = \"space\",\n  `2000` = \"number\"\n)\ntb\n\n# A tibble: 1 × 3\n  `:)`  ` `   `2000`\n  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; \n1 smile space number\n\n\nYou’ll also need the backticks when working with these variables in other packages, like ggplot2, dplyr, and tidyr.",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>NB: Introducing Tibbles</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#printing",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#printing",
    "title": "NB: Introducing Tibbles",
    "section": "Printing",
    "text": "Printing\nThe print method:\n\nOnly the first 10 rows\nAll the columns that fit on screen\n\nThis makes it much easier to work with large data.\n\ntibble(\n  a = lubridate::now() + runif(1e3) * 86400,\n  b = lubridate::today() + runif(1e3) * 30,\n  c = 1:1e3,\n  d = runif(1e3),\n  e = sample(letters, 1e3, replace = TRUE)\n) %&gt;% head()\n\n# A tibble: 6 × 5\n  a                   b              c     d e    \n  &lt;dttm&gt;              &lt;date&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;\n1 2024-07-08 21:30:14 2024-07-21     1 0.446 h    \n2 2024-07-09 08:14:15 2024-08-03     2 0.904 x    \n3 2024-07-09 02:48:54 2024-07-28     3 0.700 g    \n4 2024-07-09 05:18:44 2024-07-22     4 0.482 t    \n5 2024-07-09 00:18:02 2024-08-04     5 0.101 r    \n6 2024-07-09 09:29:33 2024-07-26     6 0.810 n    \n\n\nWhere possible, tibbles also use color to draw your eye to important differences.\nOne of the most important distinctions is between the string \"NA\" and the missing value, NA:\n\ntibble(x = c(\"NA\", NA))\n\n# A tibble: 2 × 1\n  x    \n  &lt;chr&gt;\n1 NA   \n2 &lt;NA&gt; \n\n\nTibbles are designed to avoid overwhelming your console when you print large data frames.\nBut sometimes you need more output than the default display.\nThere are a few options that can help.\nFirst, you can explicitly print() the data frame and control the number of rows (n) and the width of the display. width = Inf will display all columns:\n\nlibrary(nycflights13)\nflights %&gt;%\n  print(n = 10, width = Inf)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n   arr_delay carrier flight tailnum origin dest  air_time distance  hour minute\n       &lt;dbl&gt; &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n 1        11 UA        1545 N14228  EWR    IAH        227     1400     5     15\n 2        20 UA        1714 N24211  LGA    IAH        227     1416     5     29\n 3        33 AA        1141 N619AA  JFK    MIA        160     1089     5     40\n 4       -18 B6         725 N804JB  JFK    BQN        183     1576     5     45\n 5       -25 DL         461 N668DN  LGA    ATL        116      762     6      0\n 6        12 UA        1696 N39463  EWR    ORD        150      719     5     58\n 7        19 B6         507 N516JB  EWR    FLL        158     1065     6      0\n 8       -14 EV        5708 N829AS  LGA    IAD         53      229     6      0\n 9        -8 B6          79 N593JB  JFK    MCO        140      944     6      0\n10         8 AA         301 N3ALAA  LGA    ORD        138      733     6      0\n   time_hour          \n   &lt;dttm&gt;             \n 1 2013-01-01 05:00:00\n 2 2013-01-01 05:00:00\n 3 2013-01-01 05:00:00\n 4 2013-01-01 05:00:00\n 5 2013-01-01 06:00:00\n 6 2013-01-01 05:00:00\n 7 2013-01-01 06:00:00\n 8 2013-01-01 06:00:00\n 9 2013-01-01 06:00:00\n10 2013-01-01 06:00:00\n# ℹ 336,766 more rows\n\n\nYou can also control the default print behavior by setting options:\n\noptions(tibble.print_max = n, tibble.print_min = m): if more than n rows, print only m rows.\nUse options(tibble.print_min = Inf) to always show all rows.\nUse options(tibble.width = Inf) to always print all columns, regardless of the width of the screen.\n\nYou can see a complete list of options by looking at the package help with package?tibble.",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>NB: Introducing Tibbles</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#using-rstudio-view",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#using-rstudio-view",
    "title": "NB: Introducing Tibbles",
    "section": "Using RStudio View()",
    "text": "Using RStudio View()\nA final option is to use RStudio’s built-in data viewer to get a scrollable view of the complete dataset. This is also often useful at the end of a long chain of manipulations.\nYou can open a window with a view to your data by calling View(), like so:\nflights %&gt;%\n  View()\nHere’s what the opened window would looks like:",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>NB: Introducing Tibbles</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#extracting-variables",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#extracting-variables",
    "title": "NB: Introducing Tibbles",
    "section": "Extracting variables",
    "text": "Extracting variables\nSo far all the tools you’ve learned have worked with complete data frames.\nIf you want to pull out a single variable, you can use dplyr::pull():\n\ntb &lt;- tibble(\n  id = LETTERS[1:5],\n  x1  = 1:5,\n  y1  = 6:10\n)\n\n\ntb %&gt;%  \n  pull(x1) # by name\n\n[1] 1 2 3 4 5\n\n\n\ntb %&gt;%  \n  pull(1)  # by position\n\n[1] \"A\" \"B\" \"C\" \"D\" \"E\"\n\n\npull() also takes an optional name argument that specifies the column to be used as names for a named vector.\n\ntb %&gt;%  \n  pull(x1, name = id)\n\nA B C D E \n1 2 3 4 5 \n\n\nYou can also use the base R tools $ and [[. [[ can extract by name or position; $ only extracts by name but is a little less typing.\nExtract by name:\n\ntb$x1\n\n[1] 1 2 3 4 5\n\ntb[[\"x1\"]]\n\n[1] 1 2 3 4 5\n\n\nExtract by position:\n\ntb[[1]]\n\n[1] \"A\" \"B\" \"C\" \"D\" \"E\"\n\n\nCompared to a data frame, tibbles are more strict: they never do partial matching, and they will generate a warning if the column you are trying to access does not exist.\n\n# Tibbles complain a lot:\ntb$x\n\nWarning: Unknown or uninitialised column: `x`.\n\n\nNULL\n\ntb$z\n\nWarning: Unknown or uninitialised column: `z`.\n\n\nNULL\n\n\nPartial matching is when you specify a part of a column name in a selection operation and R returns the column that matches the substring (if there is one). For example, if you have a data frame df with a column called x1 and you do this — df$x — R will return that column, assuming there are no other columns that begin with x. Tibbles don’t do that.\n\n# Data frame use partial matching and don't complain if a column doesn't exist\ndf &lt;- as.data.frame(tb)\ndf$x\n\n[1] 1 2 3 4 5\n\ndf$z\n\nNULL\n\n\nFor this reason we sometimes joke that tibbles are lazy and surly: they do less and complain more.",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>NB: Introducing Tibbles</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-01-Tibbles.html#subsetting",
    "href": "notebooks/M11_RDplyr/M11-01-Tibbles.html#subsetting",
    "title": "NB: Introducing Tibbles",
    "section": "Subsetting",
    "text": "Subsetting\nLastly, there are some important differences when using [.\nWith data.frames, [ sometimes returns a data.frame, and sometimes returns a vector.\n\nThis is a common source of bugs.\n\nWith tibbles, [ always returns another tibble.\n\nThis can sometimes cause problems when working with older code.\nIf you hit one of those functions, just use as.data.frame() to turn your tibble back to a data.frame.",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>NB: Introducing Tibbles</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html",
    "title": "NB: The dplyr package",
    "section": "",
    "text": "dplyr Grammar\nSome of the key “verbs” provided by the dplyr package are:",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>NB: The `dplyr` package</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#dplyr-grammar",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#dplyr-grammar",
    "title": "NB: The dplyr package",
    "section": "",
    "text": "select: return a subset of the columns of a data frame, using a flexible notation\nfilter: extract a subset of rows from a data frame based on logical conditions\narrange: reorder rows of a data frame\nrename: rename variables in a data frame\nmutate: add new variables/columns or transform existing variables\nsummarise / summarize: generate summary statistics of different variables in the data frame, possibly within strata\n%&gt;%: the “pipe” operator is used to connect multiple verb actions together into a pipeline",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>NB: The `dplyr` package</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#common-dplyr-function-properties",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#common-dplyr-function-properties",
    "title": "NB: The dplyr package",
    "section": "Common dplyr Function Properties",
    "text": "Common dplyr Function Properties\nAll of the functions that we will discuss in this Chapter will have a few common characteristics. In particular,\n\nThe first argument is a data frame.\nThe subsequent arguments describe what to do with the data frame specified in the first argument, and you can refer to columns in the data frame directly without using the $ operator (just use the column names).\nThe return result of a function is a new data frame.\nData frames must be properly formatted and annotated for this to all be useful.\n\nIn particular, the data must be tidy The main principles of tidy data are:\n\nEach variable forms a column.\nEach observation forms a row.\nEach type of observational unit forms a table.",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>NB: The `dplyr` package</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#installing-the-dplyr-package",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#installing-the-dplyr-package",
    "title": "NB: The dplyr package",
    "section": "Installing the dplyr package",
    "text": "Installing the dplyr package\nThe dplyr package can be installed from CRAN or from GitHub using the devtools package and the install_github() function.\nThe GitHub repository will usually contain the latest updates to the package and the development version.\nTo install from CRAN, just run\ninstall.packages(\"dplyr\")\nTo install from GitHub you can run\ninstall_github(\"hadley/dplyr\")\nAfter installing the package it is important that you load it into your R session with the library() function.\n\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.0.5\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nYou may get some warnings when the package is loaded because there are functions in the dplyr package that have the same name as functions in other packages. For now you can ignore the warnings.",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>NB: The `dplyr` package</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#getting-a-dataset",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#getting-a-dataset",
    "title": "NB: The dplyr package",
    "section": "Getting a dataset",
    "text": "Getting a dataset\nLet’s use a dataset containing air pollution and temperature data for the city of Chicago in the U.S.\nYou will find the data in the directory for this module.\nLoad the data into R using the readRDS() function.\n\nchicago &lt;- readRDS(\"chicago.rds\")\n\nYou can see some basic characteristics of the dataset with the dim() and str() functions.\n\ndim(chicago)\n\n[1] 6940    8\n\n\n\nstr(chicago)\n\n'data.frame':   6940 obs. of  8 variables:\n $ city      : chr  \"chic\" \"chic\" \"chic\" \"chic\" ...\n $ tmpd      : num  31.5 33 33 29 32 40 34.5 29 26.5 32.5 ...\n $ dptp      : num  31.5 29.9 27.4 28.6 28.9 ...\n $ date      : Date, format: \"1987-01-01\" \"1987-01-02\" ...\n $ pm25tmean2: num  NA NA NA NA NA NA NA NA NA NA ...\n $ pm10tmean2: num  34 NA 34.2 47 NA ...\n $ o3tmean2  : num  4.25 3.3 3.33 4.38 4.75 ...\n $ no2tmean2 : num  20 23.2 23.8 30.4 30.3 ...\n\n\n\nhead(chicago)\n\n  city tmpd   dptp       date pm25tmean2 pm10tmean2 o3tmean2 no2tmean2\n1 chic 31.5 31.500 1987-01-01         NA   34.00000 4.250000  19.98810\n2 chic 33.0 29.875 1987-01-02         NA         NA 3.304348  23.19099\n3 chic 33.0 27.375 1987-01-03         NA   34.16667 3.333333  23.81548\n4 chic 29.0 28.625 1987-01-04         NA   47.00000 4.375000  30.43452\n5 chic 32.0 28.875 1987-01-05         NA         NA 4.750000  30.33333\n6 chic 40.0 35.125 1987-01-06         NA   48.00000 5.833333  25.77233",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>NB: The `dplyr` package</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#select",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#select",
    "title": "NB: The dplyr package",
    "section": "select()",
    "text": "select()\nWe use the select() function to select columns you want to focus on.\nSuppose we wanted to take the first 3 columns only.\nThere are a few ways to do this.\nWe could for example use numerical indices.\n\nhead(chicago[names(chicago)[1:3]])\n\n  city tmpd   dptp\n1 chic 31.5 31.500\n2 chic 33.0 29.875\n3 chic 33.0 27.375\n4 chic 29.0 28.625\n5 chic 32.0 28.875\n6 chic 40.0 35.125\n\n\nBut we can also use the names directly.\n\nchicago %&gt;%\n  select(city:dptp) %&gt;%\n  head(10)\n\n   city tmpd   dptp\n1  chic 31.5 31.500\n2  chic 33.0 29.875\n3  chic 33.0 27.375\n4  chic 29.0 28.625\n5  chic 32.0 28.875\n6  chic 40.0 35.125\n7  chic 34.5 26.750\n8  chic 29.0 22.000\n9  chic 26.5 29.000\n10 chic 32.5 27.750\n\n\nNote the use of : inside the select() — you can use it to specify a range of variable names.\nYou can also omit variables using the select() function by using the negative sign.\nWith select() you can do:\n\nchicago %&gt;%\n    select(-(city:dptp)) %&gt;% \n    head(10)\n\n         date pm25tmean2 pm10tmean2  o3tmean2 no2tmean2\n1  1987-01-01         NA   34.00000  4.250000  19.98810\n2  1987-01-02         NA         NA  3.304348  23.19099\n3  1987-01-03         NA   34.16667  3.333333  23.81548\n4  1987-01-04         NA   47.00000  4.375000  30.43452\n5  1987-01-05         NA         NA  4.750000  30.33333\n6  1987-01-06         NA   48.00000  5.833333  25.77233\n7  1987-01-07         NA   41.00000  9.291667  20.58171\n8  1987-01-08         NA   36.00000 11.291667  17.03723\n9  1987-01-09         NA   33.28571  4.500000  23.38889\n10 1987-01-10         NA         NA  4.958333  19.54167\n\n\nThis indicates that we should include every variable except the variables city through dptp.\nThe equivalent code in base R would be\n\ni &lt;- match(\"city\", names(chicago))\nj &lt;- match(\"dptp\", names(chicago))\nhead(chicago[, -(i:j)])\n\n        date pm25tmean2 pm10tmean2 o3tmean2 no2tmean2\n1 1987-01-01         NA   34.00000 4.250000  19.98810\n2 1987-01-02         NA         NA 3.304348  23.19099\n3 1987-01-03         NA   34.16667 3.333333  23.81548\n4 1987-01-04         NA   47.00000 4.375000  30.43452\n5 1987-01-05         NA         NA 4.750000  30.33333\n6 1987-01-06         NA   48.00000 5.833333  25.77233\n\n\nNot super intuitive, right?\nThe select() function also allows a special syntax that allows you to specify variable names based on patterns.\nSo, for example, if you wanted to keep every variable that ends with a “2”, we could do\n\nchicago %&gt;%\n  select(ends_with(\"2\")) %&gt;%\n  head(10)\n\n   pm25tmean2 pm10tmean2  o3tmean2 no2tmean2\n1          NA   34.00000  4.250000  19.98810\n2          NA         NA  3.304348  23.19099\n3          NA   34.16667  3.333333  23.81548\n4          NA   47.00000  4.375000  30.43452\n5          NA         NA  4.750000  30.33333\n6          NA   48.00000  5.833333  25.77233\n7          NA   41.00000  9.291667  20.58171\n8          NA   36.00000 11.291667  17.03723\n9          NA   33.28571  4.500000  23.38889\n10         NA         NA  4.958333  19.54167\n\n\nOr if we wanted to keep every variable that starts with a “d”, we could do\n\nchicago %&gt;%\n  select(starts_with(\"d\")) %&gt;%\n  head(10)\n\n     dptp       date\n1  31.500 1987-01-01\n2  29.875 1987-01-02\n3  27.375 1987-01-03\n4  28.625 1987-01-04\n5  28.875 1987-01-05\n6  35.125 1987-01-06\n7  26.750 1987-01-07\n8  22.000 1987-01-08\n9  29.000 1987-01-09\n10 27.750 1987-01-10\n\n\nThis is super useful if you have a table with prefixes, such as doc_.\nYou can also use more general regular expressions if necessary.\nSee ?select for more info.\n\n?select",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>NB: The `dplyr` package</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#aside-helper-functions",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#aside-helper-functions",
    "title": "NB: The dplyr package",
    "section": "Aside: Helper Functions",
    "text": "Aside: Helper Functions\nNote the use the function ends_with() inside of the argument space for the function select() above.\nends_with() is an example of a “helper function” — a function that helps make dplyr functions more effective.\nThere are many of these introduced by dplyer. Here is a set of helper functions that can be especially useful with select() and related functions to specify variable names based on certain patterns or characteristics:\n\n\n\n\n\n\n\n\nHelper Function\nDescription\nExample\n\n\n\n\nstarts_with()\nMatches variable names that start with a given prefix\nselect(data, starts_with(\"X\"))\n\n\nends_with()\nMatches variable names that end with a given suffix\nselect(data, ends_with(\"_2019\"))\n\n\ncontains()\nMatches variable names that contain a given string\nselect(data, contains(\"income\"))\n\n\nmatches()\nMatches variable names that match a given regular expression\nselect(data, matches(\"^X[1-3]$\"))\n\n\nnum_range()\nMatches variable names that match a pattern of prefix + number\nselect(data, num_range(\"X\", 1:3))\n\n\none_of()\nMatches variable names that are in a given set of names\nselect(data, one_of(c(\"var1\", \"var2\")))\n\n\neverything()\nMatches all variable names (used to reorder variables)\nselect(data, starts_with(\"X\"), everything())",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>NB: The `dplyr` package</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#filter",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#filter",
    "title": "NB: The dplyr package",
    "section": "filter()",
    "text": "filter()\nThe filter() function extracts subsets of rows from a data frame.\n\n\n\n\n\n\nNote\n\n\n\nselect() is a column-wise operation, filter() is row-wise.\n\n\nThis function is similar to the existing subset() function in R but is quite a bit faster.\nSuppose we wanted to extract the rows of the chicago data frame where the levels of PM2.5 are greater than 30 (which is a reasonably high level), we could do\n\nchicago %&gt;%\n  filter(pm25tmean2 &gt; 30) %&gt;%\n  head(10)\n\n   city tmpd dptp       date pm25tmean2 pm10tmean2  o3tmean2 no2tmean2\n1  chic   23 21.9 1998-01-17      38.10   32.46154  3.180556  25.30000\n2  chic   28 25.8 1998-01-23      33.95   38.69231  1.750000  29.37630\n3  chic   55 51.3 1998-04-30      39.40   34.00000 10.786232  25.31310\n4  chic   59 53.7 1998-05-01      35.40   28.50000 14.295125  31.42905\n5  chic   57 52.0 1998-05-02      33.30   35.00000 20.662879  26.79861\n6  chic   57 56.0 1998-05-07      32.10   34.50000 24.270422  33.99167\n7  chic   75 65.8 1998-05-15      56.50   91.00000 38.573007  29.03261\n8  chic   61 59.0 1998-06-09      33.80   26.00000 17.890810  25.49668\n9  chic   73 60.3 1998-07-13      30.30   64.50000 37.018865  37.93056\n10 chic   78 67.1 1998-07-14      41.40   75.00000 40.080902  32.59054\n\n\nYou can see that there are now only 194 rows in the data frame and the distribution of the pm25tmean2 values is.\n\nsummary(chicago$pm25tmean2)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   1.70    9.70   14.66   16.23   20.60   61.50    4447 \n\n\nWe can place an arbitrarily complex logical sequence inside of filter(), so we could for example extract the rows where PM2.5 is greater than 30 and temperature is greater than 80 degrees Fahrenheit.\n\nchicago %&gt;%\n  filter(pm25tmean2 &gt; 30 & tmpd &gt; 80) %&gt;%\n  select(date, tmpd, pm25tmean2)\n\n         date tmpd pm25tmean2\n1  1998-08-23   81   39.60000\n2  1998-09-06   81   31.50000\n3  2001-07-20   82   32.30000\n4  2001-08-01   84   43.70000\n5  2001-08-08   85   38.83750\n6  2001-08-09   84   38.20000\n7  2002-06-20   82   33.00000\n8  2002-06-23   82   42.50000\n9  2002-07-08   81   33.10000\n10 2002-07-18   82   38.85000\n11 2003-06-25   82   33.90000\n12 2003-07-04   84   32.90000\n13 2005-06-24   86   31.85714\n14 2005-06-27   82   51.53750\n15 2005-06-28   85   31.20000\n16 2005-07-17   84   32.70000\n17 2005-08-03   84   37.90000\n\n\n\n?filter\n\nHelp on topic 'filter' was found in the following packages:\n\n  Package               Library\n  dplyr                 /Library/Frameworks/R.framework/Versions/4.0/Resources/library\n  stats                 /Library/Frameworks/R.framework/Versions/4.0/Resources/library\n\n\nUsing the first match ...\n\n\nHere’s a table of helper functions specifically associated with filter():\n\n\n\n\n\n\n\n\nHelper Function\nDescription\nExample\n\n\n\n\nbetween()\nCheck if a value lies between two other values.\nfilter(data, between(age, 18, 30))\n\n\nnear()\nCheck for near equality (useful for floating-point numbers).\nfilter(data, near(price, 19.99, tolerance = 0.01))\n\n\nisin() (or %in%)\nCheck if a value is in a set of values.\nfilter(data, region %in% c(\"East\", \"West\"))\n\n\nall_of()\nCheck for all of the variables, even if some don’t exist. Useful with character vectors.\nfilter(data, all_of(variables))\n\n\nany_of()\nCheck for any of the variables. Useful with character vectors.\nfilter(data, any_of(variables))\n\n\ncur_group_id()\nIdentify the current group inside group_by(). Useful for more complex filtering with groups.\nfilter(data, cur_group_id() == 1)",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>NB: The `dplyr` package</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#arrange",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#arrange",
    "title": "NB: The dplyr package",
    "section": "arrange()",
    "text": "arrange()\nUse arrange() to reorder rows of a data frame according to one or more of the columns. This normally called sorting.\nReordering rows of a data frame (while preserving corresponding order of other columns) is normally a pain to do in R.\nThe arrange() function simplifies the process quite a bit.\nHere we order the rows of the data frame by date in ascending order:\n\nchicago_by_date &lt;- chicago %&gt;%\n  arrange(date)\n\nhead(chicago_by_date)\n\n  city tmpd   dptp       date pm25tmean2 pm10tmean2 o3tmean2 no2tmean2\n1 chic 31.5 31.500 1987-01-01         NA   34.00000 4.250000  19.98810\n2 chic 33.0 29.875 1987-01-02         NA         NA 3.304348  23.19099\n3 chic 33.0 27.375 1987-01-03         NA   34.16667 3.333333  23.81548\n4 chic 29.0 28.625 1987-01-04         NA   47.00000 4.375000  30.43452\n5 chic 32.0 28.875 1987-01-05         NA         NA 4.750000  30.33333\n6 chic 40.0 35.125 1987-01-06         NA   48.00000 5.833333  25.77233\n\n\nWe can now check the first few rows\n\nchicago_by_date %&gt;%\n  select(date, pm25tmean2) %&gt;%\n  head(3)\n\n        date pm25tmean2\n1 1987-01-01         NA\n2 1987-01-02         NA\n3 1987-01-03         NA\n\n\nand the last few rows.\n\nchicago_by_date %&gt;%\n  select(date, pm25tmean2) %&gt;%\n  tail(3)\n\n           date pm25tmean2\n6938 2005-12-29    7.45000\n6939 2005-12-30   15.05714\n6940 2005-12-31   15.00000\n\n\nColumns can be arranged in descending order too by using the special desc() operator.\n\nchicago %&gt;%\n  arrange(desc(date)) %&gt;%\n  head()\n\n  city tmpd dptp       date pm25tmean2 pm10tmean2  o3tmean2 no2tmean2\n1 chic   35 30.1 2005-12-31   15.00000       23.5  2.531250  13.25000\n2 chic   36 31.0 2005-12-30   15.05714       19.2  3.034420  22.80556\n3 chic   35 29.4 2005-12-29    7.45000       23.5  6.794837  19.97222\n4 chic   37 34.5 2005-12-28   17.75000       27.5  3.260417  19.28563\n5 chic   40 33.6 2005-12-27   23.56000       27.0  4.468750  23.50000\n6 chic   35 29.6 2005-12-26    8.40000        8.5 14.041667  16.81944\n\n\nHere’s a table of helper functions specifically associated with arrange():\n\n\n\n\n\n\n\n\nHelper Function\nDescription\nExample\n\n\n\n\ndesc()\nOrder by descending instead of default ascending.\narrange(data, desc(salary))\n\n\nacross()\nApply to multiple columns, especially with c_across() in dplyr 1.0.0 and later.\narrange(data, across(starts_with(\"X\")))\n\n\nrow_number()\nCreate an index based on the order of rows.\nmutate(data, idx = row_number())\n\n\n\nNote that while row_number() can be used in conjunction with arrange(), it’s often seen in mutate() for creating an index column based on ordering.\nThe across() function, introduced in dplyr version 1.0.0, provides a more concise syntax for working with multiple columns. It can be especially useful in arrange() when you’re trying to order rows based on a selection of columns that match a certain criterion.\nNote that most of the magic with arrange() happens through the way you structure its arguments and not necessarily through a large set of helper functions.",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>NB: The `dplyr` package</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#rename",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#rename",
    "title": "NB: The dplyr package",
    "section": "rename()",
    "text": "rename()\nRenaming a variable in a data frame in R is surprisingly hard to do!\nThe rename() function is designed to make this process easier.\nHere we the names of the first five variables in the chicago data frame.\n\nhead(chicago[, 1:5], 3)\n\n  city tmpd   dptp       date pm25tmean2\n1 chic 31.5 31.500 1987-01-01         NA\n2 chic 33.0 29.875 1987-01-02         NA\n3 chic 33.0 27.375 1987-01-03         NA\n\n\nThe dptp column is supposed to represent the dew point temperature and the pm25tmean2 column provides the PM2.5 data.\nHowever, these names are awkward and should be renamed to something more sensible.\n\nchicago &lt;- chicago %&gt;%\n  rename(dewpoint = dptp, pm25 = pm25tmean2) \n\nchicago %&gt;%  \n  head(3)\n\n  city tmpd dewpoint       date pm25 pm10tmean2 o3tmean2 no2tmean2\n1 chic 31.5   31.500 1987-01-01   NA   34.00000 4.250000  19.98810\n2 chic 33.0   29.875 1987-01-02   NA         NA 3.304348  23.19099\n3 chic 33.0   27.375 1987-01-03   NA   34.16667 3.333333  23.81548\n\n\nThe syntax inside the rename() function is to have the new name on the left-hand side of the = sign and the old name on the right-hand side.\nI leave it as an exercise for the reader to figure how you do this in base R without dplyr.\nHere’s a table of helper functions that can be used with rename():\n\n\n\n\n\n\n\n\nHelper Function\nDescription\nExample\n\n\n\n\nstarts_with()\nMatch columns that start with a given prefix.\nrename(data, start_X = starts_with(\"X\")) (Note: This example would rename the first column that starts with “X” to “start_X”)\n\n\nends_with()\nMatch columns that end with a given suffix.\nrename(data, end_year = ends_with(\"_2021\"))\n\n\ncontains()\nMatch columns that contain a given string.\nrename(data, has_rate = contains(\"rate\"))\n\n\nmatches()\nMatch columns that match a given regular expression.\nrename(data, match_num = matches(\"^X[1-3]$\"))\n\n\neverything()\nMatch all columns.\nRarely used with rename(), but possible.\n\n\n\nIt’s worth noting that these helper functions will typically target the first column that meets the specified criterion. If there are multiple columns that match the criterion (e.g., multiple columns that start with “X”), you’ll need to use these helpers with more precision or utilize other techniques.\nAlso, remember to always refer to the official dplyr documentation as the package continues to evolve and new functionalities might be added over time.",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>NB: The `dplyr` package</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#mutate",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#mutate",
    "title": "NB: The dplyr package",
    "section": "mutate()",
    "text": "mutate()\nThe mutate() function creates new columns based on computations usually involving the other columns.\nFor example, with air pollution data, we often want to de-trend the data by subtracting the mean from the data.\nThat way we can look at whether a given day’s air pollution level is higher than or less than average (as opposed to looking at its absolute level).\nHere we create a pm25detrend variable that subtracts the mean from the pm25 variable.\n\nchicago &lt;- chicago %&gt;%\n  mutate(pm25detrend = pm25 - mean(pm25, na.rm = TRUE))\nchicago %&gt;%\n  head()\n\n  city tmpd dewpoint       date pm25 pm10tmean2 o3tmean2 no2tmean2 pm25detrend\n1 chic 31.5   31.500 1987-01-01   NA   34.00000 4.250000  19.98810          NA\n2 chic 33.0   29.875 1987-01-02   NA         NA 3.304348  23.19099          NA\n3 chic 33.0   27.375 1987-01-03   NA   34.16667 3.333333  23.81548          NA\n4 chic 29.0   28.625 1987-01-04   NA   47.00000 4.375000  30.43452          NA\n5 chic 32.0   28.875 1987-01-05   NA         NA 4.750000  30.33333          NA\n6 chic 40.0   35.125 1987-01-06   NA   48.00000 5.833333  25.77233          NA\n\n\nThere is also the related transmute() function, which does the same thing as mutate() but then drops all non-transformed variables.\nHere we de-trend the PM10 and ozone (O3) variables.\n\nchicago_detrended &lt;- chicago %&gt;%\n  transmute(pm10detrend = pm10tmean2 - mean(pm10tmean2, na.rm = TRUE), \n            o3detrend = o3tmean2 - mean(o3tmean2, na.rm = TRUE))\n\nhead(chicago_detrended)\n\n  pm10detrend o3detrend\n1   0.1047939 -15.18551\n2          NA -16.13117\n3   0.2714605 -16.10218\n4  13.1047939 -15.06051\n5          NA -14.68551\n6  14.1047939 -13.60218\n\n\nNote that there are only two columns in the transmuted data frame.\nHere’s a table of helper functions specifically associated with mutate():\n\n\n\n\n\n\n\n\nHelper Function\nDescription\nExample\n\n\n\n\nif_else()\nA vectorized conditional operation (if-else).\nmutate(data, status = if_else(age &lt; 18, \"minor\", \"adult\"))\n\n\ncase_when()\nGeneralized multiple conditions for transformations.\nmutate(data, category = case_when(score &gt; 90 ~ \"A\", score &gt; 80 ~ \"B\", TRUE ~ \"C\"))\n\n\nlead()\nAccess the subsequent value in the column.\nmutate(data, next_value = lead(column_name))\n\n\nlag()\nAccess the preceding value in the column.\nmutate(data, previous_value = lag(column_name))\n\n\nrow_number()\nGenerate row numbers, often used with arrange().\nmutate(data, rank = row_number())\n\n\nrank(), min_rank(), dense_rank()\nDifferent types of ranking functions.\nmutate(data, rank = rank(score))\n\n\ncumsum(), cumprod(), cummin(), cummax()\nCumulative functions.\nmutate(data, cumulative_total = cumsum(total))\n\n\ncoalesce()\nReturn the first non-missing value among its arguments.\nmutate(data, combined = coalesce(col1, col2))\n\n\nna_if()\nReplace a specified value with NA.\nmutate(data, updated_col = na_if(column_name, \"replace_me\"))\n\n\nreplace_na()\nReplace NA values with a specified value.\nmutate(data, updated_col = replace_na(column_name, \"new_value\"))\n\n\nrecode()\nRecode or replace values in a column.\nmutate(data, recoded_col = recode(column_name, old=\"new\", ...))\n\n\nacross()\nApply a function across multiple columns (from dplyr 1.0.0).\nmutate(data, across(c(col1, col2), function_name))",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>NB: The `dplyr` package</span>"
    ]
  },
  {
    "objectID": "notebooks/M11_RDplyr/M11-02-Dplyr.html#group_by",
    "href": "notebooks/M11_RDplyr/M11-02-Dplyr.html#group_by",
    "title": "NB: The dplyr package",
    "section": "group_by()",
    "text": "group_by()\nThe group_by() function is used to generate summary or aggregate statistics from a data frame.\nFor example, in this air pollution dataset, you might want to know the average annual level of PM2.5.\nSo the stratum is the year, which we can derive from the date variable.\nIn conjunction with the group_by() function we often use the summarize() function.\nThe general operation here is a combination of splitting a table into separate pieces defined by a variable or group of variables (group_by()), and then applying a summary function across those subsets (summarize()), then combining back into another table.\n\nThis pattern is called split, apply, and combine. It is a fundamental pattern in data processing.\n\nFirst, we can create a year variable using as.POSIXlt().\nThen we group on our new column and compute summary statistics for each year with the summarize() function.\n\nyears &lt;- chicago %&gt;%\n  mutate(year = as.POSIXlt(date)$year + 1900) %&gt;%\n  group_by(year) %&gt;%\n  summarize(pm25 = mean(pm25, na.rm = TRUE), \n          o3 = max(o3tmean2, na.rm = TRUE), \n          no2 = median(no2tmean2, na.rm = TRUE), .groups = \"drop\")\n\nhead(years)\n\n# A tibble: 6 × 4\n   year  pm25    o3   no2\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  1987   NaN  63.0  23.5\n2  1988   NaN  61.7  24.5\n3  1989   NaN  59.7  26.1\n4  1990   NaN  52.2  22.6\n5  1991   NaN  63.1  21.4\n6  1992   NaN  50.8  24.8\n\n\nTo see why we add \\(1900\\) in the preceding mutation, note that the date function returns just the last two digits of the year.\n\nas.POSIXlt(chicago$date)$year %&gt;% \n    head()\n\n[1] 87 87 87 87 87 87\n\n\nNote in the process, we implicitly created a separate data frame that splits the original data frame by year, which is then passed to summarize().\nsummarize() then returns a data frame with columns for year and the annual averages of pm25, o3, and no2.\nIn a slightly more complicated example, we might want to know what are the average levels of ozone (o3) and nitrogen dioxide (no2) within quantiles of pm25.\nA slicker way to do this would be through a regression model, but we can actually do this quickly with group_by() and summarize().\nFirst, we can create a categorical variable of pm25 divided into quantiles.\n\nqq &lt;- quantile(chicago$pm25, seq(0, 1, 0.2), na.rm = TRUE)\nqq\n\n    0%    20%    40%    60%    80%   100% \n 1.700  8.700 12.375 16.700 22.610 61.500 \n\n\nThen can group the data frame by the pm25.quint variable. and compute the mean of o3 and no2 within quantiles of pm25.\n\nchicago %&gt;%\n  mutate(pm25.quint = cut(pm25, qq)) %&gt;%\n  group_by(pm25.quint) %&gt;%\n  summarize(o3 = mean(o3tmean2, na.rm = TRUE), \n          no2 = mean(no2tmean2, na.rm = TRUE),\n          .groups = \"drop\")\n\n# A tibble: 6 × 3\n  pm25.quint     o3   no2\n  &lt;fct&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1 (1.7,8.7]    21.7  18.0\n2 (8.7,12.4]   20.4  22.1\n3 (12.4,16.7]  20.7  24.4\n4 (16.7,22.6]  19.9  27.3\n5 (22.6,61.5]  20.3  29.6\n6 &lt;NA&gt;         18.8  25.8\n\n\nFrom the table, it seems there isn’t a strong relationship between pm25 and o3, but there appears to be a positive correlation between pm25 and no2.\nMore sophisticated statistical modeling can help to provide precise answers to these questions, but a simple application of dplyr functions can often get you most of the way there.\nHere is another example:\n\nchicago %&gt;%  \n  mutate(month = as.POSIXlt(date)$mon + 1) %&gt;% \n  group_by(month) %&gt;%                              # SPLIT\n  summarize(pm25 = mean(pm25, na.rm = TRUE),       # APPLY \n    o3 = max(o3tmean2, na.rm = TRUE), \n    no2 = median(no2tmean2, na.rm = TRUE),\n    .groups = \"drop\")\n\n# A tibble: 12 × 4\n   month  pm25    o3   no2\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1  17.8  28.2  25.4\n 2     2  20.4  37.4  26.8\n 3     3  17.4  39.0  26.8\n 4     4  13.9  47.9  25.0\n 5     5  14.1  52.8  24.2\n 6     6  15.9  66.6  25.0\n 7     7  16.6  59.5  22.4\n 8     8  16.9  54.0  23.0\n 9     9  15.9  57.5  24.5\n10    10  14.2  47.1  24.2\n11    11  15.2  29.5  23.6\n12    12  17.5  27.7  24.5\n\n                                                   # COMBINE (in the result)\n\nHere’s a table of helper functions specifically associated with group_by():\n\n\n\n\n\n\n\n\nHelper Function\nDescription\nExample\n\n\n\n\nadd_tally()\nAdds a column with the count of each group (equivalent to adding a count with mutate() after a group_by()).\ngroup_by(data, group_var) %&gt;% add_tally()\n\n\ngroup_size()\nReturns the size of each group.\ngroup_by(data, group_var) %&gt;% summarise(size = group_size())\n\n\nntile()\nCreates rank percentiles within groups.\ngroup_by(data, group_var) %&gt;% mutate(perc = ntile(score, 4))\n\n\ncur_group_id()\nGives an integer identifier for the current group.\ngroup_by(data, group_var) %&gt;% filter(cur_group_id() == 1)\n\n\ncur_group_rows()\nProvides row indices for the current group.\nUsed internally, but can be useful for advanced operations.\n\n\ngroup_map(), group_modify(), group_walk()\nFunctions to iterate over groups, modify them or walk them with side effects.\ngroup_map(data, ~ head(.x, 2)) shows the first two rows of each group.\n\n\n\nIt’s worth noting that group_by() often works in tandem with other verbs, so the real power comes from the combined operations. For instance, after grouping data, one often uses summarise() to calculate summary statistics for each group. The combination of these functions and their associated helpers allow for a wide range of group-wise data manipulation tasks.",
    "crumbs": [
      "M11 Dplyr",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>NB: The `dplyr` package</span>"
    ]
  },
  {
    "objectID": "modules/m12/m12-intro.html",
    "href": "modules/m12/m12-intro.html",
    "title": "M12 Visualization",
    "section": "",
    "text": "Topics",
    "crumbs": [
      "M12 Visualization"
    ]
  },
  {
    "objectID": "modules/m12/m12-intro.html#topics",
    "href": "modules/m12/m12-intro.html#topics",
    "title": "M12 Visualization",
    "section": "",
    "text": "R’s basic visualization tools\nGGPlot2\nRMarkown",
    "crumbs": [
      "M12 Visualization"
    ]
  },
  {
    "objectID": "modules/m12/m12-intro.html#readings",
    "href": "modules/m12/m12-intro.html#readings",
    "title": "M12 Visualization",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\nW3Schools R Graphics\nRFDS Explore 3 Data Visualization\n\nggplot2\n\nRDFS Communicate 27 R Markdown\nRDFS Communicate 28 Graphics for Communication\n\n\n\nOptional\n\nggplot2 (Tidyverse)\nThe Complete ggplot2 Tutorial (r-statitics.co)\nR Markdown (RStudio)\nOverview (RStudio)\nIndex of Pages (RStudio)\nknitr (Yihui Xie)\nR Markdown: the Definitive Guide (Yihui Xie, J. J. Allaire, Garrett Grolemund)\nR Markdown Cookbook (Yihui Xie, Christophe Dervieux, Emily Riederer)\nGetting Started with R Markdown — Guide and Cheatsheet (Dataquest)\nGallery (RStudio)",
    "crumbs": [
      "M12 Visualization"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html",
    "title": "NB: GGPlot2",
    "section": "",
    "text": "Introduction\nToday we’ll look at GGPlot2, the graphics package associated with the Tidyverse.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#learning-goal",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#learning-goal",
    "title": "NB: GGPlot2",
    "section": "Learning Goal",
    "text": "Learning Goal\nYou will be introduced into how and why to use visualizations in DS 6001.\n\nVisualizations in EDA.\nVisualization in creating data products that communicate results, such as scientific publications, infographics, and interactive visualizations.\n\nThese things come at the end of the data science pipeline.\nToday, I just want to introduce you to the thinking and design logic behind the package, so you can be confident in learning more as you need to.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#the-grammar-of-graphics",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#the-grammar-of-graphics",
    "title": "NB: GGPlot2",
    "section": "The Grammar of Graphics",
    "text": "The Grammar of Graphics\nAs with Dplyr, GGPlot2 is a an entirely new system that supplants the older graph functions that are built into R.\nAnd just as with Dplyr, it is founded on a principled analysis of its domain and approaches code design through developing a basic grammar which can then be expressed in R.\nIn effect, Dplyr is built on a grammar of data by defining a set of verbs that can be used to build phrases that are put together into larger constructs.\nThese verbs correspond to a process of data transformation.\nGGPlot2 is built on a grammar of graphics that defines a set of nouns that correspond to the architecture of a graphic (aka plot).\nThe phrase “grammar of graphics” actually comes from the book by that name written by statistician and computer scientist Leland Wilkinson in 1999 and later revised:\n\n\n\nThe Second Edition\n\n\nIt’s worth reading if you want to get a solid grounding in visualization, which belongs to the design area of data science.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#a-layered-model",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#a-layered-model",
    "title": "NB: GGPlot2",
    "section": "A Layered Model",
    "text": "A Layered Model\nWilkinson takes an object-oriented approach to visualization and formalizes two main principles:\n\nGraphics are built out of distinct layers of grammatical elements.\nIn each layer, meaningful plots are constructed through mappings of data onto aesthetics.\n\nThe essential grammatical elements to create any visualization are:\n\nAccording to Wickham, who adopted these principles and applied them to R,\n\nA grammar of graphics is a tool that enables us to concisely describe the components of a graphic. Such a grammar allows us to move beyond named graphics (e.g., the “scatterplot”) and gain insight into the deep structure that underlies statistical graphics (Wickham 2012).\n\nWickham takes this idea and develops it into this:\n\nSource (see also ScienceCraft).\nYou can see that everything starts with data.\nThen data are mapped on aesthetics within geometries.\n\nGeometries are geometric things like points, lines, and bars.\nAesthetics are visual things like position, size, color and shape.\n\nYou can see how the latter are properties of the former.\nAlso note that aesthetics make use of visual channels to signify\n\nSize can mean greater than, which is good for numeric scale but not categories\nColor can signify things like value, e.g. via red : dangerous : : green : safe.\n\nThese are the primary layers.\nThe other layers apply downstream modifications that add more information and style to the graph.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#the-bare-minimum",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#the-bare-minimum",
    "title": "NB: GGPlot2",
    "section": "The Bare Minimum",
    "text": "The Bare Minimum\nEverything starts with ggplot() which is part of the Tidyverse.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.1\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nHere is a basic graph – a scatterplot comparing two features in the iris dataset. I’ve broken out the functions and arguments so you can see how the grammar is implemented:\n\niris %&gt;%\nggplot(\n  mapping = aes(\n    x = Sepal.Length, \n    y = Sepal.Width)\n  ) + \n  geom_point(size=3, aes(color=Species)\n)\n\n\n\n\n\n\n\n\nggplot() starts by creating a coordinate system that you can add layers to.\n\nThe coordinate system can be changed after the graph is initiated.\n\nThese layers are created by geometry functions.\n\nFor example, geom_point creates a point-based visualization.\nThere are many geom_ functions, and they can be layered on top of each other:\n\ngeom_point()\ngeom_bar()\ngeom_histogram()\ngeom_boxplot()\netc.\n\n\nHere we have a plot with two layers. The second layer is created by a stat function, which is similar to geom, but applies a statistical transformation to the data.\n\niris %&gt;%\nggplot(aes(\n  x = Sepal.Length, \n  y = Sepal.Width)) + \n  geom_point(size=3, aes(color=Species)) + \n  stat_smooth(method = lm)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nThe core the process is that each layer maps data onto what are called aesthetics (aes).\nAesthetics are visual objects and properties that can used to represent numeric and categorical values\n\nx and y positions (in a two-dimensional system)\nColor\nSize\nShape\nText\n\nIn addition to these elements, ggplot also provides faceting, which is the visual equivalent of grouping by. Just as with group by, a data feature is used to divide the visualization into groups, each taking the same form but showing a different subset of data.\n\niris %&gt;%\nggplot(aes(\n  x = Sepal.Length, \n  y = Sepal.Width)) + \n  geom_point(size=3, aes(color=Species)) + \n  stat_smooth(method = lm) +\n  facet_wrap(facets = vars(Species))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nBy the way, this is an example of Simpson’s Paradox. The overall trend is downward, but each group trend upward.\n\n\niris %&gt;%\n  ggplot(aes(\n    x = Sepal.Length, \n    y = Sepal.Width)) + \n    geom_point(size=3, aes(color=Species)) + \n    stat_smooth(method = lm) +\n    stat_smooth(method = lm, se=FALSE, aes(color=Species))\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nAnyway, the general structure of a ggplot statement is the following:\nggplot(data = &lt;DATA&gt;) + \n  &lt;GEOM_FUNCTION&gt;(\n     mapping = aes(&lt;MAPPINGS&gt;),\n     stat = &lt;STAT&gt;, \n     position = &lt;POSITION&gt;\n  ) +\n  &lt;COORDINATE_FUNCTION&gt; +\n  &lt;FACET_FUNCTION&gt;",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#the-operator",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#the-operator",
    "title": "NB: GGPlot2",
    "section": "The + operator",
    "text": "The + operator\nYou will notice the use of the + operator to connect ggplot functions together to produce a final product. Theses are not quite the same as pipes %&gt;%.\nThe difference is that pipes feed data from one function to another, whereas the + operation combines elements to produce an increasingly developed visualization.\nAnother thing to keep in mind: the + always goes at the end of a line, not at the beginning.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#add-title-x-and-y-axis-labels-with-labs",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#add-title-x-and-y-axis-labels-with-labs",
    "title": "NB: GGPlot2",
    "section": "Add Title, X and Y axis labels with labs()",
    "text": "Add Title, X and Y axis labels with labs()\n\ngg1 &lt;- gg + geom_point(aes(color=color))\ngg2 &lt;- gg1 + labs(title=\"Diamonds\", x=\"Carat\", y=\"Price\") \ngg2",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-color-of-all-text-with-theme",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-color-of-all-text-with-theme",
    "title": "NB: GGPlot2",
    "section": "Change color of all text with theme()",
    "text": "Change color of all text with theme()\n\ngg2 + theme(text=element_text(color=\"blue\"))  # all text turns blue.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-title-x-and-y-axis-label-and-text-size",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-title-x-and-y-axis-label-and-text-size",
    "title": "NB: GGPlot2",
    "section": "Change title, X and Y axis label and text size",
    "text": "Change title, X and Y axis label and text size\n\nplot.title: Controls plot title.\naxis.title.x: Controls X axis title\naxis.title.y: Controls Y axis title\naxis.text.x: Controls X axis text\naxis.text.y: Controls y axis text\n\n\ngg3 &lt;- gg2 + \n  theme(plot.title=element_text(size=25), \n        axis.title.x=element_text(size=20),\n        axis.title.y=element_text(size=20),\n        axis.text.x=element_text(size=15),\n        axis.text.y=element_text(size=15)\n        )\ngg3",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-title-face-color-line-height",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-title-face-color-line-height",
    "title": "NB: GGPlot2",
    "section": "Change title face, color, line height",
    "text": "Change title face, color, line height\n\ngg3 + \n  labs(title = \"Plot Title\\nSecond Line of Plot Title\") +\n  theme(plot.title = element_text(\n    face=\"bold\", \n    color=\"steelblue\", \n    lineheight=1.2)\n  )",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-point-color",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-point-color",
    "title": "NB: GGPlot2",
    "section": "Change point color",
    "text": "Change point color\n\ngg3 + scale_colour_manual(\n  name='Legend', \n  values=c('D'='grey', \n           'E'='red', \n           'F'='blue', \n           'G'='yellow', \n           'H'='black', \n           'I'='green', \n           'J'='firebrick'))",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#adjust-x-and-y-axis-limits",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#adjust-x-and-y-axis-limits",
    "title": "NB: GGPlot2",
    "section": "Adjust X and Y axis limits",
    "text": "Adjust X and Y axis limits\nMethod 1: Zoom in\n\ngg3 + \n    coord_cartesian(xlim=c(0,3), ylim=c(0, 5000)) + \n    geom_smooth()  # zoom in\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\nMethod 2: Deletes the points outside limits\n\ngg3 + \n  xlim(c(0,3)) + \n  ylim(c(0, 5000)) + \n  geom_smooth()  # deletes the points \n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\nWarning: Removed 14714 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 14714 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nMethod 3: Deletes the points outside limits\n\ngg3 + scale_x_continuous(limits=c(0,3)) + \n  scale_y_continuous(limits=c(0, 5000)) +\n  geom_smooth()  # deletes the points outside limits\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\nWarning: Removed 14714 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 14714 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nNotice the change in smoothing line because of deleted points. This could sometimes be misleading in your analysis.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-x-and-y-axis-labels",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-x-and-y-axis-labels",
    "title": "NB: GGPlot2",
    "section": "Change X and Y axis labels",
    "text": "Change X and Y axis labels\n\ngg3 + scale_x_continuous(\n  labels=c(\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\")) \n\n\n\n\n\n\n\n  scale_y_continuous(breaks=seq(0, 20000, 4000))  # if Y is continuous, if X is a factor\n\n&lt;ScaleContinuousPosition&gt;\n Range:  \n Limits:    0 --    1\n\n\nUse scale_x_discrete instead, if X variable is a factor.\nRotate axis text\n\ngg3 + theme(axis.text.x=element_text(angle=45), axis.text.y=element_text(angle=45))",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#flip-x-and-y-axis",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#flip-x-and-y-axis",
    "title": "NB: GGPlot2",
    "section": "Flip X and Y Axis",
    "text": "Flip X and Y Axis\n\ngg3 + coord_flip()  # flips X and Y axis.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#grid-lines-and-panel-background",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#grid-lines-and-panel-background",
    "title": "NB: GGPlot2",
    "section": "Grid lines and panel background",
    "text": "Grid lines and panel background\n\ngg3 + theme(panel.background = element_rect(fill = 'springgreen'),\n  panel.grid.major = element_line(colour = \"firebrick\", size=3),\n  panel.grid.minor = element_line(colour = \"blue\", size=1))\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#plot-margin-and-background",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#plot-margin-and-background",
    "title": "NB: GGPlot2",
    "section": "Plot margin and background",
    "text": "Plot margin and background\n\ngg3 + theme(plot.background=element_rect(fill=\"yellowgreen\"), plot.margin = unit(c(2, 4, 1, 3), \"cm\")) # top, right, bottom, left",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#hide-legend",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#hide-legend",
    "title": "NB: GGPlot2",
    "section": "Hide legend",
    "text": "Hide legend\n\ngg3 + theme(legend.position=\"none\")  # hides the legend",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-legend-title",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-legend-title",
    "title": "NB: GGPlot2",
    "section": "Change legend title",
    "text": "Change legend title\n\ngg3 + scale_color_discrete(name=\"\")  # Remove legend title (method1)\n\n\n\n\n\n\n\n# Remove legend title (method)\np1 &lt;- gg3 + theme(legend.title=element_blank())  \n\n# Change legend title\np2 &lt;- gg3 + scale_color_discrete(name=\"Diamonds\")  \n\n\n# install.packages(\"gridExtra\")\n\n\nlibrary(gridExtra)\n\n\nAttaching package: 'gridExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\ngrid.arrange(p1, p2, ncol=2)  # arrange",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-legend-and-point-color",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-legend-and-point-color",
    "title": "NB: GGPlot2",
    "section": "Change legend and point color",
    "text": "Change legend and point color\n\ngg3 + scale_colour_manual(name='Legend', values=c('D'='grey', 'E'='red', 'F'='blue', 'G'='yellow', 'H'='black', 'I'='green', 'J'='firebrick'))",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-legend-position",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-legend-position",
    "title": "NB: GGPlot2",
    "section": "Change legend position",
    "text": "Change legend position\nOutside plot\n\np1 &lt;- gg3 + theme(legend.position=\"top\")  # top / bottom / left / right\n\nInside plot\n\np2 &lt;- gg3 + theme(legend.justification=c(1,0), legend.position=c(1,0))  # legend justification is the anchor point on the legend, considering the bottom left of legend as (0,0)\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\ngridExtra::grid.arrange(p1, p2, ncol=2)",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-order-of-legend-items",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-order-of-legend-items",
    "title": "NB: GGPlot2",
    "section": "Change order of legend items",
    "text": "Change order of legend items\n\n#df$newLegendColumn &lt;- factor(df$legendcolumn, levels=c(new_order_of_legend_items), ordered = TRUE) \n\nCreate a new factor variable used in the legend, ordered as you need. Then use this variable instead in the plot.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#legend-title-text-box-symbol",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#legend-title-text-box-symbol",
    "title": "NB: GGPlot2",
    "section": "Legend title, text, box, symbol",
    "text": "Legend title, text, box, symbol\n\nlegend.title - Change legend title\nlegend.text - Change legend text\nlegend.key - Change legend box\nguides - Change legend symbols\n\n\ngg3 + theme(legend.title = element_text(size=20, color = \"firebrick\"), legend.text = element_text(size=15), legend.key=element_rect(fill='steelblue')) + guides(colour = guide_legend(override.aes = list(size=2, shape=4, stroke=2)))  # legend title color and size, box color, symbol color, size and shape.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#add-text-in-chart",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#add-text-in-chart",
    "title": "NB: GGPlot2",
    "section": "Add text in chart",
    "text": "Add text in chart\n\n# Not Run: gg + geom_text(aes(xcol, ycol, label=round(labelCol), size=3)) \n# general format \ngg + geom_text(aes(label=color, color=color), size=4)\n\n\n\n\n\n\n\n\n##Annotation\n\nlibrary(grid) \nmy_grob = grobTree(textGrob(\"My Custom Text\", x=0.8, y=0.2, \n                            gp=gpar(col=\"firebrick\", fontsize=25, fontface=\"bold\"))) \n\ngg3 + annotation_custom(my_grob)",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#multiple-chart-panels",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#multiple-chart-panels",
    "title": "NB: GGPlot2",
    "section": "Multiple chart panels",
    "text": "Multiple chart panels\n\np1 &lt;- gg1 + facet_grid(color ~ cut) # arrange in a grid. More space for plots. Free X and Y axis scales\n\nBy setting scales=‘free’, the scales of both X and Y axis is freed. Use scales=‘free_x’ to free only X-axis and scales=‘free_y’ to free only Y-axis.\n\np2 &lt;- gg1 + facet_wrap(color ~ cut, scales=\"free\") # free the x and yaxis scales.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#arrange-multiple-plots",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#arrange-multiple-plots",
    "title": "NB: GGPlot2",
    "section": "Arrange multiple plots",
    "text": "Arrange multiple plots\n\nlibrary(gridExtra) \ngrid.arrange(p1, p2, ncol=2)",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#add-smoothing-line",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#add-smoothing-line",
    "title": "NB: GGPlot2",
    "section": "Add smoothing line",
    "text": "Add smoothing line\n\ngg3 + geom_smooth(aes(color=color)) # method could be - 'lm', 'loess', 'gam'\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#add-horizontal-vertical-line",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#add-horizontal-vertical-line",
    "title": "NB: GGPlot2",
    "section": "Add horizontal / vertical line",
    "text": "Add horizontal / vertical line\n\np1 &lt;- gg3 + geom_hline(yintercept=5000, size=2, linetype=\"dotted\", color=\"blue\") # linetypes: solid, dashed, dotted, dotdash, longdash and twodash \n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\np2 &lt;- gg3 + geom_vline(xintercept=4, size=2, color=\"firebrick\") \np3 &lt;- gg3 + geom_segment(aes(x=4, y=5000, xend=4, yend=10000, size=2, lineend=\"round\")) \n\nWarning in geom_segment(aes(x = 4, y = 5000, xend = 4, yend = 10000, size = 2, :\nIgnoring unknown aesthetics: lineend\n\np4 &lt;- gg3 + geom_segment(aes(x=carat, y=price,\nxend=carat, yend=price-500, color=color), size=2) + coord_cartesian(xlim=c(3, 5)) # x, y: start points. xend, yend: endpoints \ngridExtra::grid.arrange(p1,p2,p3,p4, ncol=2)\n\nWarning in geom_segment(aes(x = 4, y = 5000, xend = 4, yend = 10000, size = 2, : All aesthetics have length 1, but the data has 53940 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#add-bar-chart",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#add-bar-chart",
    "title": "NB: GGPlot2",
    "section": "Add bar chart",
    "text": "Add bar chart\n\n# Frequency bar chart: Specify only X axis. \ngg &lt;- ggplot(mtcars, aes(x=cyl)) \ngg + geom_bar() # frequency table\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(mtcars, aes(x=cyl)) \np1 &lt;- gg + geom_bar(position=\"dodge\", aes(fill=factor(vs))) # side-by-side \np2 &lt;- gg + geom_bar(aes(fill=factor(vs))) # stacked \ngridExtra::grid.arrange(p1, p2, ncol=2)\n\n\n\n\n\n\n\n\n\n# Absolute bar chart: Specify both X adn Y axis. Set stat=\"identity\"\ndf &lt;- aggregate(mtcars$mpg, by=list(mtcars$cyl), FUN=mean)  # mean of mpg for every 'cyl'\nnames(df) &lt;- c(\"cyl\", \"mpg\")\nhead(df)\n\n  cyl      mpg\n1   4 26.66364\n2   6 19.74286\n3   8 15.10000\n\n#&gt;   cyl    mpg\n#&gt; 1   4  26.66\n#&gt; 2   6  19.74\n#&gt; 3   8  15.10\n\ngg_bar &lt;- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = \"identity\")  # Y axis is explicit. 'stat=identity'\nprint(gg_bar)",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#distinct-color-for-bars",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#distinct-color-for-bars",
    "title": "NB: GGPlot2",
    "section": "Distinct color for bars",
    "text": "Distinct color for bars\n\ngg_bar &lt;- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = \"identity\", aes(fill=cyl))\nprint(gg_bar)",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-color-and-width-of-bars",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-color-and-width-of-bars",
    "title": "NB: GGPlot2",
    "section": "Change color and width of bars",
    "text": "Change color and width of bars\n\ndf$cyl &lt;- as.factor(df$cyl)\ngg_bar &lt;- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = \"identity\", aes(fill=cyl), width = 0.25)\ngg_bar + scale_fill_manual(values=c(\"4\"=\"steelblue\", \"6\"=\"firebrick\", \"8\"=\"darkgreen\"))",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#change-color-palette",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#change-color-palette",
    "title": "NB: GGPlot2",
    "section": "Change color palette",
    "text": "Change color palette\n\nlibrary(RColorBrewer)\n\nWarning: package 'RColorBrewer' was built under R version 4.0.5\n\ndisplay.brewer.all(n=20, exact.n=FALSE)  # display available color palettes\n\n\n\n\n\n\n\nggplot(mtcars, aes(x=cyl, y=carb, fill=factor(cyl))) + geom_bar(stat=\"identity\") + scale_fill_brewer(palette=\"Reds\")  # \"Reds\" is palette name",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#line-chart-from-timeseries",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#line-chart-from-timeseries",
    "title": "NB: GGPlot2",
    "section": "Line chart from timeseries",
    "text": "Line chart from timeseries\n\n# One step method.\n# install.packages(\"ggfortify\")\nlibrary(ggfortify)\n\nWarning: package 'ggfortify' was built under R version 4.0.5\n\nautoplot(AirPassengers, size=2) + labs(title=\"AirPassengers\")",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-01-GGPlot.html#area",
    "href": "notebooks/M12_RViz/M12-01-GGPlot.html#area",
    "title": "NB: GGPlot2",
    "section": "Area",
    "text": "Area\ngeom_area is similar to geom_ribbon, except that the ymin is set to 0. If you want to make overlapping area plot, use the alpha aesthetic to make the top layer translucent.\n\n# Method1: Non-Overlapping Area\ndf &lt;- reshape2::melt(economics[, c(\"date\", \"psavert\", \"uempmed\")], id=\"date\")\nhead(df, 3)\n\n        date variable value\n1 1967-07-01  psavert  12.6\n2 1967-08-01  psavert  12.6\n3 1967-09-01  psavert  11.9\n\n#&gt;         date variable value\n#&gt; 1 1967-07-01  psavert  12.5\n#&gt; 2 1967-08-01  psavert  12.5\n#&gt; 3 1967-09-01  psavert  11.7\np1 &lt;- ggplot(df, aes(x=date)) + geom_area(aes(y=value, fill=variable)) + labs(title=\"Non-Overlapping - psavert and uempmed\")\n\n# Method2: Overlapping Area\np2 &lt;- ggplot(economics, aes(x=date)) + geom_area(aes(y=psavert), fill=\"yellowgreen\", color=\"yellowgreen\") + geom_area(aes(y=uempmed), fill=\"dodgerblue\", alpha=0.7, linetype=\"dotted\") + labs(title=\"Overlapping - psavert and uempmed\")\ngridExtra::grid.arrange(p1, p2, ncol=2)",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>NB: GGPlot2</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html",
    "title": "NB: R Markdown",
    "section": "",
    "text": "Introduction\nR provides a notebook style coding environment similar to Jupyter.\nHow, the R approach differs in some important ways:",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>NB: R Markdown</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#introduction",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#introduction",
    "title": "NB: R Markdown",
    "section": "",
    "text": "It follows the literate programming paradigm of inter-leaving text and code.\nIt uses a version of Markdown to create the text components.\nIt allows executable code blocks.\nThey can be used interactively or as exported documents into standard formats.\n\n\n\nRMarkdown is not visually rendered while your are editing.\n\nThe document has to be ‘knitted’ to see this.\nNewer versions of RStudio have a visual mode that does render Markdown, and also allows you to edit in this mode.\nThis differs from Jupyter’s cell-by-cell approach.\n\nRMarkdown allows several programming languages to be run in the same notebook.\nRMarkdown files are meant to be published documents, not work spaces for coding.\nRMarkdown is written in markdown and uses YAML to store configuration information.\n\nJupyter notebooks are written in JavaScript, which contains both configuration data and content data in the same structure.\nThis difference is what accounts for the different editing experiences. JavaScript is the native programming language of web browsers; the notebook format is executable code that can be integrated into a web application.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>NB: R Markdown</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#varieties-of-r-markdown-outputs",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#varieties-of-r-markdown-outputs",
    "title": "NB: R Markdown",
    "section": "Varieties of R Markdown outputs",
    "text": "Varieties of R Markdown outputs\nR Markdown is designed to be output to several formats:\n\nR Notebooks\n\nDesigned to previewed\nOr output to (html|pdf|doc)_notebook\nHave Preview in RStudio toolbar (but also Knit in menu)\n\nDocuments\n\nOutput to (html|pdf|doc)_document\nHas Knit in RStudio toolbar\n\nPresentations\n\nProduce slideshows from your source file, in ioslides, beamer, or powerpoint.\n\nShiny\n\nCreate interactive apps that can be published on the web.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>NB: R Markdown</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#knitting",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#knitting",
    "title": "NB: R Markdown",
    "section": "Knitting",
    "text": "Knitting\nKnitting is the process of compiling all the code and visual assets of an RMarkdown into a single file.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>NB: R Markdown</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#publishing",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#publishing",
    "title": "NB: R Markdown",
    "section": "Publishing",
    "text": "Publishing\nRMarkdown has publication in mind as an outcome.\nRStudio allows you to publish in these destinations:\n\nRPubs\nR Studio Connect",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>NB: R Markdown</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#outputting",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#outputting",
    "title": "NB: R Markdown",
    "section": "Outputting",
    "text": "Outputting\nThere are two ways to set the output of a document:\n\nPermanently, by modifying the YAML header:\ntitle: \"Viridis Demo\"\noutput: html_document\nTransiently, by calling rmarkdown::render() by hand:\n\nrmarkdown::render(\"diamond-sizes.Rmd\", output_format = \"word_document\")\n\nThis is useful if you want to programmatically produce multiple types of output.\n\nRStudio’s knit button renders a file to the first format listed in its output field.\nYou can also do it by code:\nknitr::include_graphics(\"screenshots/rmarkdown-knit.png\")\nEach output format is associated with an R function.\nYou can either write foo or pkg::foo.\nIf you omit pkg, the default is assumed to be rmarkdown.\nIt’s important to know the name of the function that makes the output because that’s where you get help.\nFor example, to figure out what parameters you can set with html_document, look at ?rmarkdown::html_document.\n\nOutput options\nTo override the default parameter values, you need to use an expanded output field. For example, if you wanted to render an html_document with a floating table of contents, you’d use:\noutput:\n  html_document:\n    toc: true\n    toc_float: true\nYou can even render to multiple outputs by supplying a list of formats:\noutput:\n  html_document:\n    toc: true\n    toc_float: true\n  pdf_document: default\nNote the special syntax if you don’t want to override any of the default options.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>NB: R Markdown</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#how-it-works",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#how-it-works",
    "title": "NB: R Markdown",
    "section": "How It Works",
    "text": "How It Works",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>NB: R Markdown</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-02-RMarkdown.html#the-rmarkdown-spec",
    "href": "notebooks/M12_RViz/M12-02-RMarkdown.html#the-rmarkdown-spec",
    "title": "NB: R Markdown",
    "section": "The RMarkdown Spec",
    "text": "The RMarkdown Spec\nSee The RMarkown Reference Guide and RStudio’s Guide.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>NB: R Markdown</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html",
    "href": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html",
    "title": "NB: Loose Ends",
    "section": "",
    "text": "qplot\nqplot creates quick and simple plots that use all of the ggplot2 defaults.\nIt let’s you define a plot in a single call that gives a set of aesthetics and a data set.\nIt infers a geom from your data and mappings if you don’t supply onw. Recall this is how plot worked.\nplot(select(iris, -Species))\n# qplot(select(iris, -Species))\nqplot(displ, hwy, data = mpg)\nqplot(displ, hwy, color=class, data = mpg)\nqplot(displ, data = mpg)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\nqplot(displ, data = mpg, geom = c('bar'))",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>NB: Loose Ends</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#qplot",
    "href": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#qplot",
    "title": "NB: Loose Ends",
    "section": "",
    "text": "Gotchas\nOddly, data is not the first argument, so it won’t work with %&gt;%.\nThis will fail:\n\n# mpg %&gt;% qplot(displ, hwy)\n\nAlso, data has to be called by key, e.g. data = mpg.\nThis will fail, too:\n\n# qplot(displ, hwy, mpg)\n\nHere’s a nice guide in PDF form: Getting started with qplot",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>NB: Loose Ends</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#ggplot-in-python",
    "href": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#ggplot-in-python",
    "title": "NB: Loose Ends",
    "section": "GGPlot in Python",
    "text": "GGPlot in Python\nThere are pygg plotnine and\nHard to replicate R syntax in Python.\nBut why should it? Should just implement to pattern Pythonically.\nSee example in M14-00a-Plotnine.ipynb.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>NB: Loose Ends</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#plotly-in-r",
    "href": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#plotly-in-r",
    "title": "NB: Loose Ends",
    "section": "Plotly in R",
    "text": "Plotly in R\n\ninstall.packages(\"plotly\")\n\n\n  There is a binary version available but the source version is later:\n       binary source needs_compilation\nplotly 4.10.0 4.10.2             FALSE\n\n\n\ninstalling the source package ‘plotly’\n\n\n\n\n\nlibrary(plotly)\n\n\nAttaching package: ‘plotly’\n\n\nThe following object is masked from ‘package:ggplot2’:\n\n    last_plot\n\n\nThe following object is masked from ‘package:stats’:\n\n    filter\n\n\nThe following object is masked from ‘package:graphics’:\n\n    layout\n\n\n\n\nTypes of plots\n'bar', 'barpolar', 'box', 'candlestick', 'carpet', 'choropleth', 'choroplethmapbox', 'cone', 'contour', 'contourcarpet', 'densitymapbox', 'funnel', 'funnelarea', 'heatmap', 'heatmapgl', 'histogram', 'histogram2d', 'histogram2dcontour', 'icicle', 'image', 'indicator', 'isosurface', 'mesh3d', 'ohlc', 'parcats', 'parcoords', 'pie', 'pointcloud', 'sankey', 'scatter', 'scatter3d', 'scattercarpet', 'scattergeo', 'scattergl', 'scattermapbox', 'scatterpolar', 'scatterpolargl', 'scatterternary', 'splom', 'streamtube', 'sunburst', 'surface', 'table', 'treemap', 'violin', 'volume', 'waterfall'\n\nhead(mpg)\n\n\n\nA tibble: 6 × 11\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n\n\n\n\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\naudi\na4\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\ncompact\n\n\n\n\n\n\n\nfig1 &lt;- mpg %&gt;%\n    plot_ly(\n        x         = ~hwy, \n        y         = ~cty, \n        size      = ~displ, \n        type      = 'scatter', \n        color     = ~class,\n        mode      = \"markers\",\n        hovertext = ~manufacturer,\n        height    = 500, width = 750)\n\n\nfig1\n\n\n\n    \n        \n        \n\n\n\n\n\n\n\n    \n    \n        \n\n    \n\n\n\n\nfig2 &lt;- iris %&gt;%\n    plot_ly(\n        x         = ~Petal.Length, \n        y         = ~Petal.Width, \n        size      = ~Sepal.Length, \n        color     = ~Sepal.Width,\n        symbol    = ~Species,\n        type      = \"scatter\", \n        mode      = \"markers\",\n        height    = 500, width = 750)\n\n\nfig2\n\n\n\n    \n        \n        \n\n\n\n\n\n\n\n    \n    \n        \n\n    \n\n\n\n\n# ?plot_ly\n\n\nGGPlotly\nBest of both worlds?\n\nWith ggplotly() by Plotly, you can convert your ggplot2 figures into interactive ones powered by plotly.js, ready for embedding into Dash applications.\n\nIf you call ggplotly() with no argument, it will display your last ggplot as a plotly plot.\nPretty cool.\nYou also pass it a plot that was assigned to a variable.\nIn both cases, you can then add ploty features to your graph.\n\ndf = data.frame(\n    x = 1:10,\n    y = 1:100:10\n)\n\n\ndf %&gt;% ggplot() + \n    aes(x, y) +\n    geom_line()\n\n\n\n\n\n\n\n\n\nggplotly()\n\n\n\n    \n        \n        \n\n\n\n\n\n\n\n    \n    \n        \n\n    \n\n\n\n\nggplotly(height=400, width=400)\n\n\n\n    \n        \n        \n\n\n\n\n\n\n\n    \n    \n        \n\n    \n\n\n\n\np = df %&gt;% ggplot() + \n    aes(x, y) +\n    geom_line()\n\n\nggplotly(p)\n\n\n\n    \n        \n        \n\n\n\n\n\n\n\n    \n    \n        \n\n    \n\n\n\n&gt;&gt;&gt; Learn more.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>NB: Loose Ends</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#using-in-r",
    "href": "notebooks/M12_RViz/M12-03-Qplot-and-Plotly.html#using-in-r",
    "title": "NB: Loose Ends",
    "section": "Using :: in R",
    "text": "Using :: in R\nWhen you load libraries in R that have the same function names, R resolves this by picking a default, and then letting you access the others using :: operator to specify the library from which the method comes.\nThe rule is that the package loaded last will hide, or mask, the function from earlier packages.\nIf you want to have a certain function be the default, make sure you load it last.\nFor example, when we load tidyverse, we get this message:\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nThis means that dplyr overrides the filter() and lag() methods associated with the stats library.\nSimilarly, when you load plotly, you’ll see this:\nAttaching package: ‘plotly’\n\nThe following object is masked from ‘package:ggplot2’:\n\n    last_plot\n\nThe following object is masked from ‘package:stats’:\n\n    filter\n\nThe following object is masked from ‘package:graphics’:\n\n    layout\nOne thing I have noticed is that even though the last library masks the other functions, the help operator ?&lt;objectname&gt; does not follow this.\nAlso, in this script, note that dplyr::filter is the default, even though plotly::filter loaded after dplyr. This is because Plotly’ filter function is not used in the normal way; it appears in the context of the transforms argument to plot_ly(). No need to get into this now, but just know that that’s why it does not mask dplyr.\nExamples\nHere, we call filter by itself and it uses the one from dplyr.\n\nhead(filter(mpg, hwy &gt; 0))\n\nBut if we ask for help, we’ll get the original stats version.\n\n# ?filter\n\nAnd if we ask for help about Plotly’s version, we see this:\n\n# ?plotly",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>NB: Loose Ends</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-04-Plotnine.html",
    "href": "notebooks/M12_RViz/M12-04-Plotnine.html",
    "title": "NB: GGPlot in Python with Plotnine",
    "section": "",
    "text": "GGPlot in Python\nThere are two ports of GGPlot2 to Python: pygg and plotnine.\nThe first seems to have stopped development and is much less used.\nLet’s look at Plotnine.\n## ! conda install -c conda-forge plotnine -y\nimport pandas as pd\nimport numpy as np\nfrom pandas.api.types import CategoricalDtype\nfrom plotnine import *\nfrom plotnine.data import mpg\nOur old friend, mpg in Python:\nmpg\n\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>NB: GGPlot in Python with Plotnine</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-04-Plotnine.html#a-simple-bar-chart",
    "href": "notebooks/M12_RViz/M12-04-Plotnine.html#a-simple-bar-chart",
    "title": "NB: GGPlot in Python with Plotnine",
    "section": "A Simple Bar Chart",
    "text": "A Simple Bar Chart\n\n(ggplot(mpg)            # defining what data to use\n    + aes(x='class')    # defining what variable to use\n    + geom_bar(size=20) # defining the type of plot to use\n)\n\n\n\n\n\n\n\n\nNotice that aes() is not a helper function (a function in the argument space).\nAlso, R dots become _ in the argument names.\nNote that we don’t have to use the syntax above, which groups the functions in a single expression with (...).\nWe can do this:\n\nggplot(mpg) + aes(x='class') + geom_bar(size=20)\n\n\n\n\n\n\n\n\nOr this:\n\nggplot(mpg) + \\\n    aes(x='class') + \\\n    geom_bar(size=20)\n\n\n\n\n\n\n\n\nNote that none of these are like R due to differing white space rules.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>NB: GGPlot in Python with Plotnine</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-04-Plotnine.html#faceting",
    "href": "notebooks/M12_RViz/M12-04-Plotnine.html#faceting",
    "title": "NB: GGPlot in Python with Plotnine",
    "section": "Faceting",
    "text": "Faceting\n\nggplot(mpg) + \\\n    aes(x = 'drv', y = 'cty', color = 'class', size='cyl') + \\\n    geom_point()\n\n\n\n\n\n\n\n\n\n(ggplot(mpg)         \n + aes(x='drv', y='cty', color='class', size='cyl')\n + geom_point()\n + facet_wrap('class')\n + theme(legend_position = \"none\")\n)",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>NB: GGPlot in Python with Plotnine</span>"
    ]
  },
  {
    "objectID": "notebooks/M12_RViz/M12-04-Plotnine.html#the-pandas-way",
    "href": "notebooks/M12_RViz/M12-04-Plotnine.html#the-pandas-way",
    "title": "NB: GGPlot in Python with Plotnine",
    "section": "The Pandas Way",
    "text": "The Pandas Way\nNote the GGPlot included the computation of counts in the geom_bar() function.\n\nggplot(mpg) + aes(x='class') + geom_bar(size=20)\n\n\n\n\n\n\n\n\n\n%matplotlib inline\n\n\n# mpg['class'].plot.bar()\n\n\nmpg['class'].value_counts().sort_index().plot.bar(rot=45);\n\n\n\n\n\n\n\n\nHowever, sometomes Pandas does do internal calculations, as with .hist():\n\nmpg['cty'].hist();\n\n\n\n\n\n\n\n\nFor faceting in Pandas, see this: https://stackoverflow.com/questions/29786227/how-do-i-plot-facet-plots-in-pandas\nNotice that it is essentially the result of a .groupby() followed by .unstack().\nSo, Pandas expects you to do the data transformations upfront.\nGGPlot2 will handle these in the geometries and facets\nGGPlot2 is easier, but Pandas separates comcerns\nAs a rule, data operations should never take place in the visualization.",
    "crumbs": [
      "M12 Visualization",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>NB: GGPlot in Python with Plotnine</span>"
    ]
  },
  {
    "objectID": "modules/m13/m13-intro.html",
    "href": "modules/m13/m13-intro.html",
    "title": "M13 Agile",
    "section": "",
    "text": "Topics",
    "crumbs": [
      "M13 Agile"
    ]
  },
  {
    "objectID": "modules/m13/m13-intro.html#topics",
    "href": "modules/m13/m13-intro.html#topics",
    "title": "M13 Agile",
    "section": "",
    "text": "General concept of project management (PM)\nRationale for PM\nMain types of PM\nDeeper dive into Agile PM\nBasic artifacts, tools, and processes for PM",
    "crumbs": [
      "M13 Agile"
    ]
  },
  {
    "objectID": "modules/m13/m13-intro.html#readings",
    "href": "modules/m13/m13-intro.html#readings",
    "title": "M13 Agile",
    "section": "Readings",
    "text": "Readings\n\nRequired\n\nManifesto for Agile Software Development (agilemanifesto.org)\nTwelve Principles of Agile Software (agilemanifesto.org)\nUser Stories: An Overview (Digité)\nProject Charters (Princeton)\nDataset Curation Template (Princeton)",
    "crumbs": [
      "M13 Agile"
    ]
  },
  {
    "objectID": "topics/project-management.html",
    "href": "topics/project-management.html",
    "title": "Project Management",
    "section": "",
    "text": "Some basic facts\nProject management is an established field that is used for many activities.\n\nIt is a profession in which you can be certified as a  CPM.\nIt is a field with an established and large body of knowledge – PMBOK.\n\n\nBroadly speaking, it refers to:\n\nA class of rational methods and protocols for organizing the labor of complex activities in order to achieve specific outcomes on time and on budget.\n\nThink NASA’s space program in the 1960s.\nIts history dates to the early 20th century but becomes highly developed in the 1950s and 60s.\n\nIt is closely associated with US military operations, e.g. Gantt Charts and PERT.\nIt was later adapted to software development, due to the complexity and importances of of this kind of work.\n\n\nSource\n\nSoftware is also mission critical\n\n\n\nFrom the beginning, it has been used to support critical operations: weapons systems, air traffic control, financial systems, health care, etc.\n\n\nOnly recently are we seeing the effects of software design – in the form of data products – fail on the basis of bias and other flaws that lead to social harm\n\n\n\nIn the 1960s, the US Department of Defenses study of software problems found that:\n\n\n\n47% of software delivered could not be used, as it usually didn’t meet requirements\n\n\n29% of funded software was never delivered, as it was usually canceled due to cost/schedule overruns\n\n\n19% of software was useful after extensive rework, and it usually cost 36 times more to fix problems after release\n\n\n\nBecause of this, software engineering was developed.\n\n\nBut Software development is hard for many reasons:\n\n\n\nHardware and software are inherently complex.\n\n\nCode is imperfect and error-prone.\n\n\nCode is always an interpretation of specifications that are always underspecified. → DEBUGGING THE SPEC\n\n\n\nUnderspecified in two senses:\n\n\n\nThe inherent inadequacy of language to represent reality.\n\n\n“The map is not the terrain”\n\n\n\n\nThe fact that people don’t know what they want even when they say they do.\n\n\nThat is, reality itself changes.\n\n\n\n\n\nThe slipperiness of writing code that achieves our goals is the subject of humor:\n\nSource\n\n\nMany paradigms of the software development life cycle (SDLC) have been introduced over the years to address these issues:\n\n\n\nWaterfall\n\n\nSpiral\n\n\nEtc. → See Tutorialspoint on SDLC.\n\n\n\nThe Waterfall Model\n\n\n\n\nWaterfall Methodology\n\n\nSource\n\nWhat they all have in is a faith in the power of planning and engineering to achieve results:\n\n\n\nPlanning as the ability to predict accurately how things will unfold\n\n\nand have people understand and follow rules.\n\n\n\n\nEngineering as the operationalization of labor processes\n\n\nThe ability to treat human behavior as a tractable variable.\n\n\nthe logic of the machine applied to the the organization of labor.\n\n\n\n\n\nThese assumptions are reflected in the relationship between client and developer\n\n\n\nNotice that absence of the client in the design, building, and validation\n\n\n\nThis is partly the result of mitigating the mission creep introduced by the client.\n\n\nThe Iron Triangle\n\nThe Iron Triangle concept shows the effect of changing user requirements on a project.\nIf users want to add something to a project — a new feature, for example — this means that scope has increased.\nTherefore, either tine or resources must expand as well to allow for the change.\n\n\nThe Spiral Method\n\n\nThe Spiral Method recognizes the need to be more iterative, and introduces the client at points in an ongoing cycle. \n\n\n\nPresumably, clients are involved in objective identification and testing …\n\n\n\n\nSource\n\n\nThe methods have the virtue of being rational and comprehensive, defining all the things involved in software development\n\n\n\nBut they are very linear\n\n\n\nEven the Spiral method, which is really a 2D linear process, where phases are features and iterations are observations:\n\n\n\n\n\n\n\n\nPrimary sequence\nS = OI → AE → PD → NPP\n\n\nProcess\nP = S1 → S2 → S3 → … → SN",
    "crumbs": [
      "M13 Agile",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Project Management</span>"
    ]
  },
  {
    "objectID": "topics/agile-dev.html",
    "href": "topics/agile-dev.html",
    "title": "Agile Development",
    "section": "",
    "text": "Backstory\nAgile development is essentially a philosophy developed in response to bureaucratic software development processes.\nIt is an approach that focuses on the realities of software:\nEssentially, it is based on a mistrust of machines, plans, contracts, documents, etc.\nThe Agile Manifesto was written in 2001 after a number of lighter and more flexible approaches were developed in the 1990s.\nIt is also a collection of methods and tools:\nAgile is also counter-cultural, like many of the software movements that attended the rise of the web.",
    "crumbs": [
      "M13 Agile",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>Agile Development</span>"
    ]
  },
  {
    "objectID": "topics/agile-dev.html#backstory",
    "href": "topics/agile-dev.html#backstory",
    "title": "Agile Development",
    "section": "",
    "text": "Individuals and interactions over processes and tools\nWorking software over comprehensive documentation\nCustomer collaboration over contract negotiation\nResponding to change over following a plan\n\n\n\n\nSCRUM\nXP (Extreme Program) \nEtc.\n\n\n\nUser stories\nScrum meetings\nSprints\nTask weighting with cards\nEtc.",
    "crumbs": [
      "M13 Agile",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>Agile Development</span>"
    ]
  },
  {
    "objectID": "topics/agile-dev.html#principles",
    "href": "topics/agile-dev.html#principles",
    "title": "Agile Development",
    "section": "Principles",
    "text": "Principles\nHere are the 12 Principles of Agile SD:\n\nCustomer satisfaction by early and continuous delivery of valuable software. → The “early and often” of open source development.\nWelcome changing requirements, even in late development.\nDeliver working software frequently (weeks rather than months).\nClose, daily cooperation between business people and developers.\nProjects are built around motivated individuals, who should be trusted.\nFace-to-face conversation is the best form of communication (co-location).\nWorking software is the primary measure of progress.\nSustainable development, able to maintain a constant pace.\nContinuous attention to technical excellence and good design.\nSimplicity—the art of maximizing the amount of work not done—is essential.\nBest architectures, requirements, and designs emerge from self-organizing teams.\nRegularly, the team reflects on how to become more effective, and adjusts accordingly.\n\nAs you can see, it’s all about giving teams the freedom and trust to creatively respond to client needs and change.",
    "crumbs": [
      "M13 Agile",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>Agile Development</span>"
    ]
  },
  {
    "objectID": "topics/agile-dev.html#aside",
    "href": "topics/agile-dev.html#aside",
    "title": "Agile Development",
    "section": "Aside",
    "text": "Aside\nAs an aside, it’s worth noting the effect of the Web on these developments.\n\nAgile was spurred by the affordances of the Web and open source software\nAnd for teams to organize organically, without the oversight of governmental bodies or corporations\nInfluenced by the success of Open Source tools like Linux\nConsistent with Git as a tool for organically organizing software development.",
    "crumbs": [
      "M13 Agile",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>Agile Development</span>"
    ]
  },
  {
    "objectID": "topics/user-stories.html",
    "href": "topics/user-stories.html",
    "title": "User Stories",
    "section": "",
    "text": "User Stories are at the heart of Agile development.\nInstead of eliciting requirements through a formal process, teams ask clients to provide statements in verbal form:\n\nAs a [type of user]\nI want [an action or behavior]\nso that [a benefit/value]\n\nThese are written on index cards.\nThese are accompanied by conversation to clarify the meaning of the sentences.\nThese are then converted into requirements:\n\nFunctional – relating specifically to how the software will work, i.e. function.\nNon-functional (so-called) – relating to the broader purpose and context of usage.\nThese map roughly onto the second and third parts of the user story.\nThey also map on MACHINE and HUMAN.\nThis page shows some examples of stories mapping onto features (so-called acceptance criteria).\n\nThese requirements are then prioritized\n\nUsing MSCW – Must / Should / Can / Won’t\nWithin the context of a scope definition in a charter (not discussed here)\nSee this link for some guidance.\n\nAfter this, requirements are serialized into a rough schedule, grouped into milestones.\nIn executing the “plan,” teams meet regularly in brief, stand-up meetings called scrums.\n\nThese happen daily.\nThese involve the development team.\nStakeholder representatives, such as the product manager, may attend too.\n\nAt regular intervals, clients are introduced to the process\n\nPrototypes, MVPs, etc. are presented.\nFeedback is elicited early and often.\n\nThe process is driven by a communication plan:\n\nFrequency of meeting.\nMode of communication – F2F, Slack, Git.\nTask management tools – Jira, Trello, Smartsheet, etc.\n\nOther artifacts are involved in this process:\n\nThe project charter.\nThe project plan.\nA Kan Ban board.",
    "crumbs": [
      "M13 Agile",
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>User Stories</span>"
    ]
  },
  {
    "objectID": "topics/oreilly-accounts.html",
    "href": "topics/oreilly-accounts.html",
    "title": "Setting Up O’Reilly",
    "section": "",
    "text": "O’Reilly for Higher Education contains books on all aspects of computers, programming and the Web from such publishers as O’Reilly, Sams, New Riders, Adobe. Students can access content for free.\nFollow these instructions to set up your account:\nGo to https://www.oreilly.com/library/view/temporary-access/.\nYou should see this dialog box:\n\nClick on Institution not listed? This will produce the following dialog box:\n\nIf you are first time user, enter your UVA email address and clicl on the big red button.\nThis should produce the following message:\n\nNow you can access all the books in the collection. When you return, click on Already a user? in the second dialog box.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Setting Up O'Reilly</span>"
    ]
  },
  {
    "objectID": "topics/refreshing-the-course-repo.html",
    "href": "topics/refreshing-the-course-repo.html",
    "title": "Refreshing the Course Repo",
    "section": "",
    "text": "Each day you will want to update the forked version of the course repo you created for your homework in Module 01.\nHere are the steps to do that:\nFirst, if you have made any changes to the course notebooks and want to keep your changes, make copies of these files in your private repo.\nSecond, enter the command git stash within your local repo to hide the changes you’ve made to the current branch. To learn more about how to use stash, check out the docs on GitHub. For now, we are just using it clean up the repo so when you pull, you don’t run into a conflict between local and remote changes.\nThird, go to the forked version of the course repo on GitHub and issue a Sync Fork command to refresh the content of your repo with the new course content. The screenshot below shows where this command is located on your repo’s web page:\n\nFourth, go back to your local repo and run git pull. You should now have the most recent content from the course repo.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>58</span>  <span class='chapter-title'>Refreshing the Course Repo</span>"
    ]
  }
]